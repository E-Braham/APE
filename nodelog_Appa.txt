Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[{'pmma': 'zz1'}], []], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[{'PMMA': 'ZZ1'}], [{'name': 'lko', 'axis': 'ZZ2', 'type': 'Keyence_GT2_A3200'}]], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'lko': {'axismask': {'Z': 'ZZ2'}}}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA']}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'lko': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'lko@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'lko@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'lko@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'lko': {'axismask': {'Z': 'ZZ2'}}}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA']}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'lko': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'lko@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'lko@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'lko@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[{'PMMA': 'ZZ1'}], [{'name': 'burp', 'axis': 'ZZ2', 'type': 'Keyence_GT2_A3200'}]], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'burp': {'axismask': {'Z': 'ZZ2'}}}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA']}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'burp@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'burp': {'axismask': {'Z': 'ZZ2'}}}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA']}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'burp@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[{'PMMA': 'ZZ1'}], [{'name': 'burp', 'axis': 'ZZ2', 'type': 'Keyence_GT2_A3200'}]], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'burp': {'axismask': {'Z': 'ZZ2'}}}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA']}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'burp@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'burp': {'axismask': {'Z': 'ZZ2'}}}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA']}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'burp@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[{'PMMA': 'ZZ1'}], [{'name': 'burp', 'axis': 'ZZ2', 'type': 'Keyence_GT2_A3200'}]], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'burp': {'axismask': {'Z': 'ZZ2'}}}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA']}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'burp@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'burp': {'axismask': {'Z': 'ZZ2'}}}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA']}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'burp@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['burp', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["burp"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Sent procexec {'subject': 'target.executor.devicelist["burp"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["burp"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["burp"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['burp', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'burp', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['burp', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["burp"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Sent procexec {'subject': 'target.executor.devicelist["burp"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["burp"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["burp"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['burp', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'burp', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'burp': {'axismask': {'Z': 'ZZ2'}}, 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system', 'system']}}, 'information': {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'burp@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'burp': {'axismask': {'Z': 'ZZ2'}}, 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system', 'system']}}, 'information': {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'burp@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'burp': {'axismask': {'Z': 'ZZ2'}}, 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system', 'system']}}, 'information': {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'burp@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'burp': {'axismask': {'Z': 'ZZ2'}}, 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system', 'system']}}, 'information': {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'burp@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[], []], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}}, 'alignmentnames': ['initial'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}}, 'alignmentnames': ['initial'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled gui {'subject': 'target.apparatus.Disconnect_All'}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'Connected': True}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}}, 'alignmentnames': ['initial'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'Connected': True}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}}, 'alignmentnames': ['initial'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'Connected': True}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}}, 'alignmentnames': ['initial'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'Connected': True}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}}, 'alignmentnames': ['initial'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'Connected': True}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}}, 'alignmentnames': ['initial'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'Connected': True}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}}, 'alignmentnames': ['initial'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[{'pmma': 'zz1'}], [{'name': 'burp', 'axis': 'zz2', 'type': 'Keyence_GT2_A3200'}]], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'burp': {'axismask': {'Z': 'zz2'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'burp@mark': {'X': '', 'Y': '', 'zz2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'burp': {'axismask': {'Z': 'zz2'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'burp@mark': {'X': '', 'Y': '', 'zz2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['burp', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["burp"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Sent procexec {'subject': 'target.executor.devicelist["burp"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["burp"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["burp"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['burp', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'burp', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'burp', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled gui {'subject': 'target.apparatus.Disconnect_All'}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'burp': {'axismask': {'Z': 'zz2'}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'burp@mark': {'X': '', 'Y': '', 'zz2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_burp_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'burp': {'axismask': {'Z': 'zz2'}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'burp@mark': {'X': '', 'Y': '', 'zz2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_burp_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'burp': {'axismask': {'Z': 'zz2'}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'burp@mark': {'X': '', 'Y': '', 'zz2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_burp_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'burp': {'axismask': {'Z': 'zz2'}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'burp@mark': {'X': '', 'Y': '', 'zz2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_burp_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'burp': {'axismask': {'Z': 'zz2'}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'burp@mark': {'X': '', 'Y': '', 'zz2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_burp_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'burp': {'axismask': {'Z': 'zz2'}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'burp@mark': {'X': '', 'Y': '', 'zz2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_burp_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'burp': {'axismask': {'Z': 'zz2'}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'burp@mark': {'X': '', 'Y': '', 'zz2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_burp_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'burp': {'axismask': {'Z': 'zz2'}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'burp@mark': {'X': '', 'Y': '', 'zz2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_burp_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[{'pmma': 'zz1'}], []], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_burp_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_burp_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_burp_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_burp_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_burp_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_burp_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[{'pmma': 'zz1'}], []], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_burp_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_burp_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_burp_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_burp_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_burp_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_burp_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[{'pmma': 'ZZ1'}], [{'name': 'burp', 'axis': 'ZZ2', 'type': 'Keyence_GT2_A3200'}]], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'ZZ1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'burp': {'axismask': {'Z': 'ZZ2'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'npmma@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'burp@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_burp_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'ZZ1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'burp': {'axismask': {'Z': 'ZZ2'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'npmma@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'burp@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_burp_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'ZZ1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'burp': {'axismask': {'Z': 'ZZ2'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'npmma@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'burp@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_burp_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'ZZ1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'burp': {'axismask': {'Z': 'ZZ2'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'npmma@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'burp@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_burp_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'ZZ1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'burp': {'axismask': {'Z': 'ZZ2'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'npmma@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'burp@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_burp_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'ZZ1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'burp': {'axismask': {'Z': 'ZZ2'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'npmma@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'burp@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_burp_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[{'pmma': 'zz1'}], [{'name': 'burp', 'axis': 'zz', 'type': 'Keyence_GT2_A3200'}]], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'burp': {'axismask': {'Z': 'zz'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'zz', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'burp@mark': {'X': '', 'Y': '', 'zz': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_burp_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'burp': {'axismask': {'Z': 'zz'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'zz', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'burp@mark': {'X': '', 'Y': '', 'zz': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_burp_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[{'pmma': 'zz1'}], []], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[{'pmma': 'ZZ1'}], []], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'ZZ1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'npmma@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'ZZ1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'npmma@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[{'pmma': 'zz1'}], [{'name': 'burp', 'axis': 'zz2', 'type': 'Keyence_GT2_A3200'}]], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'burp': {'axismask': {'Z': 'zz2'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'burp@mark': {'X': '', 'Y': '', 'zz2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'burp': {'axismask': {'Z': 'zz2'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'burp@mark': {'X': '', 'Y': '', 'zz2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'burp': {'axismask': {'Z': 'zz2'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'burp@mark': {'X': '', 'Y': '', 'zz2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'burp': {'axismask': {'Z': 'zz2'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'burp@mark': {'X': '', 'Y': '', 'zz2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'burp': {'axismask': {'Z': 'zz2'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'burp@mark': {'X': '', 'Y': '', 'zz2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'burp': {'axismask': {'Z': 'zz2'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'burp@mark': {'X': '', 'Y': '', 'zz2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[{'pmma': 'zz1'}], [{'name': 'burp', 'axis': 'zz2', 'type': 'Keyence_GT2_A3200'}]], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'burp': {'axismask': {'Z': 'zz2'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'burp@mark': {'X': '', 'Y': '', 'zz2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'burp': {'axismask': {'Z': 'zz2'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'burp@mark': {'X': '', 'Y': '', 'zz2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[{'pmma': 'zz1'}], []], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[{'pmma': 'ZZ1'}], []], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'ZZ1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'npmma@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'ZZ1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'npmma@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled gui {'subject': 'target.apparatus.Disconnect_All'}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'ZZ1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'npmma@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'ZZ1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'npmma@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'ZZ1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'npmma@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'ZZ1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'npmma@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[{'pmma': 'zz1'}], [{'name': 'Touch', 'axis': '', 'type': 'Keyence_GT2_A3200'}]], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'Touch': {'axismask': {'Z': ''}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'Touch': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'Touch@mark': {'X': '', 'Y': '', '': ''}, 'Touch@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'Touch@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'Touch': {'axismask': {'Z': ''}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'Touch': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'Touch@mark': {'X': '', 'Y': '', '': ''}, 'Touch@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'Touch@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['Touch', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["Touch"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Sent procexec {'subject': 'target.executor.devicelist["Touch"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["Touch"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["Touch"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['Touch', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'Touch', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'Touch': {'axismask': {'Z': ''}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'Touch': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'Touch@mark': {'X': '', 'Y': '', '': ''}, 'Touch@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'Touch@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_Touch_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'Touch': {'axismask': {'Z': ''}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'Touch': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'Touch@mark': {'X': '', 'Y': '', '': ''}, 'Touch@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'Touch@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_Touch_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'Touch': {'axismask': {'Z': ''}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'Touch': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'Touch@mark': {'X': '', 'Y': '', '': ''}, 'Touch@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'Touch@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_Touch_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'Touch': {'axismask': {'Z': ''}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'Touch': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'Touch@mark': {'X': '', 'Y': '', '': ''}, 'Touch@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'Touch@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_Touch_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]}]}}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'Touch', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled gui {'subject': 'target.apparatus.Disconnect_All'}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'Touch': {'axismask': {'Z': ''}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'Touch': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'Touch@mark': {'X': '', 'Y': '', '': ''}, 'Touch@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'Touch@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_Touch_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_Touch_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'Touch': {'axismask': {'Z': ''}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'Touch': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'Touch@mark': {'X': '', 'Y': '', '': ''}, 'Touch@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'Touch@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_Touch_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_Touch_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'Touch': {'axismask': {'Z': ''}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'Touch': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'Touch@mark': {'X': '', 'Y': '', '': ''}, 'Touch@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'Touch@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_Touch_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_Touch_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'Touch': {'axismask': {'Z': ''}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'Touch': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'Touch@mark': {'X': '', 'Y': '', '': ''}, 'Touch@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'Touch@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_Touch_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_Touch_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'Touch': {'axismask': {'Z': ''}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'Touch': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'Touch@mark': {'X': '', 'Y': '', '': ''}, 'Touch@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'Touch@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_Touch_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_Touch_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'Touch': {'axismask': {'Z': ''}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'Touch': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'Touch@mark': {'X': '', 'Y': '', '': ''}, 'Touch@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'Touch@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_Touch_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_Touch_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'Touch': {'axismask': {'Z': ''}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'Touch': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'Touch@mark': {'X': '', 'Y': '', '': ''}, 'Touch@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'Touch@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_Touch_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_Touch_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'Touch': {'axismask': {'Z': ''}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'Touch': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'Touch@mark': {'X': '', 'Y': '', '': ''}, 'Touch@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'Touch@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_Touch_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_Touch_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[{'pmma': 'zz1'}], []], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_Touch_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_Touch_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_Touch_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_Touch_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_Touch_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_Touch_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_Touch_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_Touch_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_Touch_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_Touch_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_Touch_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_Touch_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[{'pmma': ''}], []], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': ''}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': ''}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', '': ''}, 'npmma@start': {'X': '', 'Y': '', '': ''}, 'npmma@cal': {'X': '', 'Y': '', '': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': ''}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': ''}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', '': ''}, 'npmma@start': {'X': '', 'Y': '', '': ''}, 'npmma@cal': {'X': '', 'Y': '', '': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': ''}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': ''}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', '': ''}, 'npmma@start': {'X': '', 'Y': '', '': ''}, 'npmma@cal': {'X': '', 'Y': '', '': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': ''}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': ''}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', '': ''}, 'npmma@start': {'X': '', 'Y': '', '': ''}, 'npmma@cal': {'X': '', 'Y': '', '': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': ''}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': ''}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', '': ''}, 'npmma@start': {'X': '', 'Y': '', '': ''}, 'npmma@cal': {'X': '', 'Y': '', '': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': ''}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': ''}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', '': ''}, 'npmma@start': {'X': '', 'Y': '', '': ''}, 'npmma@cal': {'X': '', 'Y': '', '': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[{'pmma': 'zz1'}], [{'name': 'touch', 'axis': '', 'type': 'Keyence_GT2_A3200'}]], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'touch': {'axismask': {'Z': ''}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'touch': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'touch@mark': {'X': '', 'Y': '', '': ''}, 'touch@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'touch@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'touch': {'axismask': {'Z': ''}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'touch': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'touch@mark': {'X': '', 'Y': '', '': ''}, 'touch@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'touch@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['touch', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["touch"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Sent procexec {'subject': 'target.executor.devicelist["touch"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["touch"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["touch"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['touch', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'touch', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'touch': {'axismask': {'Z': ''}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'touch': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'touch@mark': {'X': '', 'Y': '', '': ''}, 'touch@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'touch@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_touch_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'touch': {'axismask': {'Z': ''}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'touch': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'touch@mark': {'X': '', 'Y': '', '': ''}, 'touch@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'touch@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_touch_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'touch': {'axismask': {'Z': ''}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'touch': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'touch@mark': {'X': '', 'Y': '', '': ''}, 'touch@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'touch@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_touch_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'touch': {'axismask': {'Z': ''}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'touch': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'touch@mark': {'X': '', 'Y': '', '': ''}, 'touch@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'touch@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_touch_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[{'pmma': 'zz1'}], []], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_touch_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_touch_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_touch_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_touch_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_touch_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_touch_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]}]}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[{'pmma': 'zz1'}], []], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled gui {'subject': 'target.apparatus.Disconnect_All'}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system', 'system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system', 'system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system', 'system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system', 'system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled gui {'subject': 'target.apparatus.Disconnect_All'}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system', 'system', 'system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system', 'system', 'system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled gui {'subject': 'target.apparatus.Disconnect_All'}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system', 'system', 'system', 'system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system', 'system', 'system', 'system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[{'pmma': 'zz1'}], []], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[{'pmma': 'zz1'}], []], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled gui {'subject': 'target.apparatus.Disconnect_All'}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled gui {'subject': 'target.apparatus.Disconnect_All'}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system', 'system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system', 'system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[], []], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}}, 'alignmentnames': ['initial'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}}, 'alignmentnames': ['initial'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}}, 'alignmentnames': ['initial'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}}, 'alignmentnames': ['initial'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'Connected': True}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}}, 'alignmentnames': ['initial'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'Connected': True}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}}, 'alignmentnames': ['initial'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}]]}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[{'pmma': 'zz1'}], []], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}]]}]}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[{'pmma': ''}], []], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': ''}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': ''}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', '': ''}, 'npmma@start': {'X': '', 'Y': '', '': ''}, 'npmma@cal': {'X': '', 'Y': '', '': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': ''}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': ''}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', '': ''}, 'npmma@start': {'X': '', 'Y': '', '': ''}, 'npmma@cal': {'X': '', 'Y': '', '': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': ''}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': ''}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', '': ''}, 'npmma@start': {'X': '', 'Y': '', '': ''}, 'npmma@cal': {'X': '', 'Y': '', '': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': ''}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': ''}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', '': ''}, 'npmma@start': {'X': '', 'Y': '', '': ''}, 'npmma@cal': {'X': '', 'Y': '', '': ''}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Handled launcher {'subject': 'close'}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[{'pmma': 'zz1'}], [{'name': 'burp', 'axis': 'zz2', 'type': 'Keyence_GT2_A3200'}]], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'burp': {'axismask': {'Z': 'zz2'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'burp@mark': {'X': '', 'Y': '', 'zz2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'burp': {'axismask': {'Z': 'zz2'}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'burp@mark': {'X': '', 'Y': '', 'zz2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['burp', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["burp"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Sent procexec {'subject': 'target.executor.devicelist["burp"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["burp"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["burp"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['burp', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'burp', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'burp': {'axismask': {'Z': 'zz2'}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'burp@mark': {'X': '', 'Y': '', 'zz2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'burp': {'axismask': {'Z': 'zz2'}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'burp': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'burp@mark': {'X': '', 'Y': '', 'zz2': ''}, 'burp@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'burp@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[{'mm': 'mm'}], []], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nmm': {'axismask': {'Z': 'mm'}}, 'nmmslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'mm'}}}, 'nmm': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'mm']}, 'nmmslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'mmslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'mm': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nmm@mark': {'X': '', 'Y': '', 'mm': ''}, 'nmm@start': {'X': '', 'Y': '', 'mm': ''}, 'nmm@cal': {'X': '', 'Y': '', 'mm': ''}}, 'alignmentnames': ['initial', 'nmm@mark', 'nmm@start', 'nmm@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nmm': {'axismask': {'Z': 'mm'}}, 'nmmslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'mm'}}}, 'nmm': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'mm']}, 'nmmslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'mmslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'mm': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nmm@mark': {'X': '', 'Y': '', 'mm': ''}, 'nmm@start': {'X': '', 'Y': '', 'mm': ''}, 'nmm@cal': {'X': '', 'Y': '', 'mm': ''}}, 'alignmentnames': ['initial', 'nmm@mark', 'nmm@start', 'nmm@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nmm': {'axismask': {'Z': 'mm'}}, 'nmmslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'mm'}}}, 'nmm': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'mm']}, 'nmmslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'mmslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'mm': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nmm@mark': {'X': '', 'Y': '', 'mm': ''}, 'nmm@start': {'X': '', 'Y': '', 'mm': ''}, 'nmm@cal': {'X': '', 'Y': '', 'mm': ''}}, 'alignmentnames': ['initial', 'nmm@mark', 'nmm@start', 'nmm@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nmm': {'axismask': {'Z': 'mm'}}, 'nmmslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'mm'}}}, 'nmm': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'mm']}, 'nmmslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'mmslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'mm': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nmm@mark': {'X': '', 'Y': '', 'mm': ''}, 'nmm@start': {'X': '', 'Y': '', 'mm': ''}, 'nmm@cal': {'X': '', 'Y': '', 'mm': ''}}, 'alignmentnames': ['initial', 'nmm@mark', 'nmm@start', 'nmm@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]}]}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled gui {'subject': 'target.apparatus.Disconnect_All'}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nmm': {'axismask': {'Z': 'mm'}}, 'nmmslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'mm'}}, 'Connected': True}, 'nmm': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'mm'], 'Connected': False}, 'nmmslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'mmslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'mm': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nmm@mark': {'X': '', 'Y': '', 'mm': ''}, 'nmm@start': {'X': '', 'Y': '', 'mm': ''}, 'nmm@cal': {'X': '', 'Y': '', 'mm': ''}}, 'alignmentnames': ['initial', 'nmm@mark', 'nmm@start', 'nmm@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nmm': {'axismask': {'Z': 'mm'}}, 'nmmslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'mm'}}, 'Connected': True}, 'nmm': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'mm'], 'Connected': False}, 'nmmslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'mmslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'mm': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nmm@mark': {'X': '', 'Y': '', 'mm': ''}, 'nmm@start': {'X': '', 'Y': '', 'mm': ''}, 'nmm@cal': {'X': '', 'Y': '', 'mm': ''}}, 'alignmentnames': ['initial', 'nmm@mark', 'nmm@start', 'nmm@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]}]}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nmm': {'axismask': {'Z': 'mm'}}, 'nmmslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'mm'}}, 'Connected': True}, 'nmm': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'mm'], 'Connected': False}, 'nmmslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'mmslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system', 'system']}}, 'information': {'materials': {'mm': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nmm@mark': {'X': '', 'Y': '', 'mm': ''}, 'nmm@start': {'X': '', 'Y': '', 'mm': ''}, 'nmm@cal': {'X': '', 'Y': '', 'mm': ''}}, 'alignmentnames': ['initial', 'nmm@mark', 'nmm@start', 'nmm@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nmm': {'axismask': {'Z': 'mm'}}, 'nmmslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'mm'}}, 'Connected': True}, 'nmm': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'mm'], 'Connected': False}, 'nmmslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'mmslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system', 'system']}}, 'information': {'materials': {'mm': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nmm@mark': {'X': '', 'Y': '', 'mm': ''}, 'nmm@start': {'X': '', 'Y': '', 'mm': ''}, 'nmm@cal': {'X': '', 'Y': '', 'mm': ''}}, 'alignmentnames': ['initial', 'nmm@mark', 'nmm@start', 'nmm@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nmm': {'axismask': {'Z': 'mm'}}, 'nmmslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'mm'}}, 'Connected': True}, 'nmm': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'mm'], 'Connected': False}, 'nmmslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'mmslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system', 'system', 'system', 'system']}}, 'information': {'materials': {'mm': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nmm@mark': {'X': '', 'Y': '', 'mm': ''}, 'nmm@start': {'X': '', 'Y': '', 'mm': ''}, 'nmm@cal': {'X': '', 'Y': '', 'mm': ''}}, 'alignmentnames': ['initial', 'nmm@mark', 'nmm@start', 'nmm@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nmm': {'axismask': {'Z': 'mm'}}, 'nmmslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'mm'}}, 'Connected': True}, 'nmm': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'mm'], 'Connected': False}, 'nmmslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'mmslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system', 'system', 'system', 'system']}}, 'information': {'materials': {'mm': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nmm@mark': {'X': '', 'Y': '', 'mm': ''}, 'nmm@start': {'X': '', 'Y': '', 'mm': ''}, 'nmm@cal': {'X': '', 'Y': '', 'mm': ''}}, 'alignmentnames': ['initial', 'nmm@mark', 'nmm@start', 'nmm@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[], []], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}}, 'alignmentnames': ['initial'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}}, 'alignmentnames': ['initial'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}}, 'alignmentnames': ['initial'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}}, 'alignmentnames': ['initial'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[{'mm': 'zz1'}], []], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nmm': {'axismask': {'Z': 'zz1'}}, 'nmmslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'nmm': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'mm']}, 'nmmslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'mmslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'mm': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nmm@mark': {'X': '', 'Y': '', 'zz1': ''}, 'nmm@start': {'X': '', 'Y': '', 'zz1': ''}, 'nmm@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'nmm@mark', 'nmm@start', 'nmm@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nmm': {'axismask': {'Z': 'zz1'}}, 'nmmslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}}, 'nmm': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'mm']}, 'nmmslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'mmslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'mm': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nmm@mark': {'X': '', 'Y': '', 'zz1': ''}, 'nmm@start': {'X': '', 'Y': '', 'zz1': ''}, 'nmm@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'nmm@mark', 'nmm@start', 'nmm@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nmm': {'axismask': {'Z': 'zz1'}}, 'nmmslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'Connected': True}, 'nmm': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'mm'], 'Connected': False}, 'nmmslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'mmslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'mm': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nmm@mark': {'X': '', 'Y': '', 'zz1': ''}, 'nmm@start': {'X': '', 'Y': '', 'zz1': ''}, 'nmm@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'nmm@mark', 'nmm@start', 'nmm@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nmm': {'axismask': {'Z': 'zz1'}}, 'nmmslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'Connected': True}, 'nmm': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'mm'], 'Connected': False}, 'nmmslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'mmslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'mm': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nmm@mark': {'X': '', 'Y': '', 'zz1': ''}, 'nmm@start': {'X': '', 'Y': '', 'zz1': ''}, 'nmm@cal': {'X': '', 'Y': '', 'zz1': ''}}, 'alignmentnames': ['initial', 'nmm@mark', 'nmm@start', 'nmm@cal'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[], []], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}}, 'alignmentnames': ['initial'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}}, 'alignmentnames': ['initial'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}}, 'alignmentnames': ['initial'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}}, 'alignmentnames': ['initial'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}}, 'alignmentnames': ['initial'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}}, 'alignmentnames': ['initial'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}}, 'alignmentnames': ['initial'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}}, 'alignmentnames': ['initial'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]}]}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'Connected': True}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}}, 'alignmentnames': ['initial'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'Connected': True}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}}, 'alignmentnames': ['initial'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}]]}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[{'pmma': 'zz1'}], [{'name': 'ger', 'axis': '', 'type': 'Keyence_GT2_A3200'}]], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'ger': {'axismask': {'Z': ''}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'ger': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'ger@mark': {'X': '', 'Y': '', '': ''}, 'ger@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'ger@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'ger': {'axismask': {'Z': ''}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'ger': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'ger@mark': {'X': '', 'Y': '', '': ''}, 'ger@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'ger@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'ger': {'axismask': {'Z': ''}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'ger': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'ger@mark': {'X': '', 'Y': '', '': ''}, 'ger@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'ger@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'ger': {'axismask': {'Z': ''}}}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma']}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'ger': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'ger@mark': {'X': '', 'Y': '', '': ''}, 'ger@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'ger@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}]]}]}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['ger', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["ger"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Sent procexec {'subject': 'target.executor.devicelist["ger"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["ger"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["ger"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['ger', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'ger', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['ger', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["ger"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Sent procexec {'subject': 'target.executor.devicelist["ger"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["ger"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["ger"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['ger', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'ger', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'ger': {'axismask': {'Z': ''}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'ger': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system', 'system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'ger@mark': {'X': '', 'Y': '', '': ''}, 'ger@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'ger@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_ger_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_ger_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'ger': {'axismask': {'Z': ''}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'ger': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system', 'system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'ger@mark': {'X': '', 'Y': '', '': ''}, 'ger@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'ger@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_ger_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_ger_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]}]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'ger': {'axismask': {'Z': ''}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'ger': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system', 'system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'ger@mark': {'X': '', 'Y': '', '': ''}, 'ger@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'ger@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_ger_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_ger_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'npmma': {'axismask': {'Z': 'zz1'}}, 'npmmaslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'zz1'}}, 'ger': {'axismask': {'Z': ''}}, 'Connected': True}, 'npmma': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmma'], 'Connected': False}, 'npmmaslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'pmmaslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200', 'pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'ger': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system', 'system']}}, 'information': {'materials': {'pmma': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'npmma@mark': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@start': {'X': '', 'Y': '', 'zz1': ''}, 'npmma@cal': {'X': '', 'Y': '', 'zz1': ''}, 'ger@mark': {'X': '', 'Y': '', '': ''}, 'ger@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'npmma@mark', 'npmma@start', 'npmma@cal', 'ger@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_burp_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_ger_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_ger_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]}]}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['ger', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["ger"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Sent procexec {'subject': 'target.executor.devicelist["ger"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["ger"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["ger"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['ger', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'ger', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {}, 'information': {}, 'eproclist': [], 'proclog': []}]}}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'args': ['FlexPrinterGUI'], 'kwargs': {'args': [[{'test': ''}, {'ZZ1': ''}], [{'name': 'dsdsd', 'axis': 'ZZ2', 'type': 'Keyence_GT2_A3200'}]], 'kwargs': {}}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'ntest': {'axismask': {'Z': ''}}, 'ntestslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': ''}}, 'nZZ1': {'axismask': {'Z': ''}}, 'nZZ1slide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': ''}}, 'dsdsd': {'axismask': {'Z': 'ZZ2'}}}, 'ntest': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'test']}, 'ntestslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'testslide']}, 'nZZ1': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'ZZ1']}, 'nZZ1slide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'ZZ1slide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'pump1': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump1': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump1', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'dsdsd': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'test': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}, 'ZZ1': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'ntest@mark': {'X': '', 'Y': '', '': ''}, 'ntest@start': {'X': '', 'Y': '', '': ''}, 'ntest@cal': {'X': '', 'Y': '', '': ''}, 'nZZ1@mark': {'X': '', 'Y': '', '': ''}, 'dsdsd@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'dsdsd@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'ntest@mark', 'ntest@start', 'ntest@cal', 'nZZ1@mark', 'dsdsd@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'ntest': {'axismask': {'Z': ''}}, 'ntestslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': ''}}, 'nZZ1': {'axismask': {'Z': ''}}, 'nZZ1slide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': ''}}, 'dsdsd': {'axismask': {'Z': 'ZZ2'}}}, 'ntest': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'test']}, 'ntestslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'testslide']}, 'nZZ1': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'ZZ1']}, 'nZZ1slide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'ZZ1slide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'pump1': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump1': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump1', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'dsdsd': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}, 'information': {'materials': {'test': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}, 'ZZ1': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'ntest@mark': {'X': '', 'Y': '', '': ''}, 'ntest@start': {'X': '', 'Y': '', '': ''}, 'ntest@cal': {'X': '', 'Y': '', '': ''}, 'nZZ1@mark': {'X': '', 'Y': '', '': ''}, 'dsdsd@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'dsdsd@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'ntest@mark', 'ntest@start', 'ntest@cal', 'nZZ1@mark', 'dsdsd@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': []}]}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump1', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump1"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump1"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump1"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['pump1', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump1', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump1', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump1"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump1"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump1"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['dsdsd', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["dsdsd"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Sent procexec {'subject': 'target.executor.devicelist["dsdsd"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["dsdsd"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump1"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['aeropump1', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump1', 'procedure': 'Connect', 'details': {'pumpname': 'pump1', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["dsdsd"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'args': ['dsdsd', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'dsdsd', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'ntest': {'axismask': {'Z': ''}}, 'ntestslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': ''}}, 'nZZ1': {'axismask': {'Z': ''}}, 'nZZ1slide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': ''}}, 'dsdsd': {'axismask': {'Z': 'ZZ2'}}, 'Connected': True}, 'ntest': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'test'], 'Connected': False}, 'ntestslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'testslide'], 'Connected': False}, 'nZZ1': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'ZZ1'], 'Connected': False}, 'nZZ1slide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'ZZ1slide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'pump1': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump1': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump1', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'dsdsd': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'test': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}, 'ZZ1': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'ntest@mark': {'X': '', 'Y': '', '': ''}, 'ntest@start': {'X': '', 'Y': '', '': ''}, 'ntest@cal': {'X': '', 'Y': '', '': ''}, 'nZZ1@mark': {'X': '', 'Y': '', '': ''}, 'dsdsd@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'dsdsd@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'ntest@mark', 'ntest@start', 'ntest@cal', 'nZZ1@mark', 'dsdsd@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_pump1_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_aeropump1_Connect', 'information': {'pumpname': 'pump1', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_dsdsd_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['clone', {'devices': {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion', 'motion', 'Aerotech', 'A3200', 'sensor'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'ntest': {'axismask': {'Z': ''}}, 'ntestslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': ''}}, 'nZZ1': {'axismask': {'Z': ''}}, 'nZZ1slide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': ''}}, 'dsdsd': {'axismask': {'Z': 'ZZ2'}}, 'Connected': True}, 'ntest': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'test'], 'Connected': False}, 'ntestslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'testslide'], 'Connected': False}, 'nZZ1': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'ZZ1'], 'Connected': False}, 'nZZ1slide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'ZZ1slide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'pump1': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV'], 'address': 'procexec', 'Connected': True}, 'aeropump1': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump1', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'dsdsd': {'type': 'Keyence_GT2_A3200', 'addresstype': 'zmqNode', 'address': 'procexec', 'A3200name': 'gantry', 'systemname': 'system', 'retract': True, 'zreturn': 5, 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0, 'Connected': True, 'descriptors': [], 'A3200address': 'procexec', 'systemaddress': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}}, 'information': {'materials': {'test': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}, 'ZZ1': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'ntest@mark': {'X': '', 'Y': '', '': ''}, 'ntest@start': {'X': '', 'Y': '', '': ''}, 'ntest@cal': {'X': '', 'Y': '', '': ''}, 'nZZ1@mark': {'X': '', 'Y': '', '': ''}, 'dsdsd@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'dsdsd@TP_init': {'X': -200, 'Y': -250, 'ZZ2': -50}}, 'alignmentnames': ['initial', 'ntest@mark', 'ntest@start', 'ntest@cal', 'nZZ1@mark', 'dsdsd@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}, 'eproclist': [], 'proclog': [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_pump1_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_aeropump1_Connect', 'information': {'pumpname': 'pump1', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_dsdsd_Connect', 'information': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]}]}}
Handled launcher {'subject': 'close'}
Handled launcher {'subject': 'close'}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Disconnect_All', None]}
Handled gui {'subject': 'target.apparatus.Disconnect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Disconnect_All', None]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.applyTemplate', None]}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.applyTemplate', None]}, 'kwargs': {'args': ['C:/Users/jhardin/Desktop/testAPP.json'], 'kwargs': {}}, 'args': ['FromFile']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'consol', 'guiconsol', 'User'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pressure', 'A3200', 'UltimusV', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion', 'sensor', 'Aerotech', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pressure', 'UltimusV', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'consol', 'guiconsol', 'User'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pressure', 'A3200', 'UltimusV', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion', 'sensor', 'Aerotech', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pressure', 'UltimusV', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'type']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'type'], 'value': 'User_GUI'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'address']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'address'], 'value': 'gui'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'addresstype']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype'], 'value': 'zmqNode'}}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', ['sensor', 'User', 'consol', 'guiconsol']]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', None]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', False]}
Sent gui {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['User', 'Connect', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['camera', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['sensor', 'Aerotech', 'motion', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['gantry', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['pump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['system', 'System', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['system', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', 'e_reply']}, 'args': ['aeropump0', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['aeropump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}
Handled gui {'subject': 'target.apparatus.Connect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}, 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'guiconsol', 'User', 'consol'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'A3200', 'UltimusV', 'pressure', 'Nordson', 'Ultimus'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion', 'sensor', 'Aerotech', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'UltimusV', 'pressure', 'Nordson', 'Ultimus'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'guiconsol', 'User', 'consol'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'A3200', 'UltimusV', 'pressure', 'Nordson', 'Ultimus'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion', 'sensor', 'Aerotech', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'UltimusV', 'pressure', 'Nordson', 'Ultimus'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled launcher {'subject': 'close'}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Disconnect_All', None]}
Handled gui {'subject': 'target.apparatus.Disconnect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Disconnect_All', None]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.applyTemplate', None]}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.applyTemplate', None]}, 'kwargs': {'args': ['C:/Users/jhardin/Desktop/testAPP.json'], 'kwargs': {}}, 'args': ['FromFile']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'consol', 'guiconsol', 'User'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pressure', 'A3200', 'UltimusV', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion', 'sensor', 'Aerotech', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pressure', 'UltimusV', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'consol', 'guiconsol', 'User'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pressure', 'A3200', 'UltimusV', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion', 'sensor', 'Aerotech', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pressure', 'UltimusV', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'type']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'type'], 'value': 'User_GUI'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'address']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'address'], 'value': 'gui'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'addresstype']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype'], 'value': 'zmqNode'}}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', ['User', 'consol', 'guiconsol', 'sensor']]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', None]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', False]}
Sent gui {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['User', 'Connect', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['camera', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['motion', 'sensor', 'Aerotech', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['gantry', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['pump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['system', 'System', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['system', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', 'e_reply']}, 'args': ['aeropump0', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['aeropump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}
Handled gui {'subject': 'target.apparatus.Connect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}, 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'consol', 'User', 'guiconsol'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'A3200', 'pump', 'Nordson', 'Ultimus', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'A3200', 'Aerotech', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'pump', 'Nordson', 'Ultimus', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'consol', 'User', 'guiconsol'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'A3200', 'pump', 'Nordson', 'Ultimus', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'A3200', 'Aerotech', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'pump', 'Nordson', 'Ultimus', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'XlineTPGen']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'XlineTPGen']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'desc': 'parameters used to generate toolpath'}, 'generator': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator'], 'value': 'XlineTPGen', 'desc': 'name of generator'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'dataArgs': {'source': 'apparatus', 'address': '', 'value': ['PMMA'], 'desc': 'arguments to make parameter structure'}}]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]], 'dataArgs': ['PMMA']}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]], 'dataArgs': ['PMMA']}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'XlineTPGen']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'XlineTPGen']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'desc': 'parameters used to generate toolpath'}, 'generator': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator'], 'value': 'XlineTPGen', 'desc': 'name of generator'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'dataArgs': {'source': 'apparatus', 'address': '', 'value': ['PMMA'], 'desc': 'arguments to make parameter structure'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Run', {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, [0]]}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'desc': 'parameters used to generate toolpath'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'newfigure': {'source': 'apparatus', 'address': '', 'value': True, 'desc': 'Make a new figure?'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name'], 'value': 'Logs/1565122803image.png'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]], 'dataArgs': ['PMMA']}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]], 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]], 'dataArgs': ['PMMA']}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]], 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'consol', 'User', 'guiconsol'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'A3200', 'pump', 'Nordson', 'Ultimus', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'A3200', 'Aerotech', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'pump', 'Nordson', 'Ultimus', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'consol', 'User', 'guiconsol'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'A3200', 'pump', 'Nordson', 'Ultimus', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'A3200', 'Aerotech', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'pump', 'Nordson', 'Ultimus', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': 'Logs/1565122803image.png'}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': 'Logs/1565122803image.png'}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]], 'dataArgs': ['PMMA']}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]], 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]], 'dataArgs': ['PMMA']}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]], 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled launcher {'subject': 'close'}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Disconnect_All', None]}
Handled gui {'subject': 'target.apparatus.Disconnect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Disconnect_All', None]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.applyTemplate', None]}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.applyTemplate', None]}, 'kwargs': {'args': ['C:/Users/jhardin/Desktop/testAPP.json'], 'kwargs': {}}, 'args': ['FromFile']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'consol', 'guiconsol', 'User'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pressure', 'A3200', 'UltimusV', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion', 'sensor', 'Aerotech', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pressure', 'UltimusV', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'consol', 'guiconsol', 'User'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pressure', 'A3200', 'UltimusV', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion', 'sensor', 'Aerotech', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pressure', 'UltimusV', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'type']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'type'], 'value': 'User_GUI'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'address']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'address'], 'value': 'gui'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'addresstype']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype'], 'value': 'zmqNode'}}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', ['guiconsol', 'User', 'sensor', 'consol']]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', None]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', False]}
Sent gui {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['User', 'Connect', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['camera', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['Aerotech', 'A3200', 'sensor', 'motion']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['gantry', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['pump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['system', 'System', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['system', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', 'e_reply']}, 'args': ['aeropump0', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['aeropump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}
Handled gui {'subject': 'target.apparatus.Connect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}, 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['User', 'sensor', 'consol', 'guiconsol'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'UltimusV', 'A3200', 'pressure', 'Nordson', 'Ultimus'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['camera', 'ueye'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'motion', 'Aerotech', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'UltimusV', 'pressure', 'Nordson', 'Ultimus'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['User', 'sensor', 'consol', 'guiconsol'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'UltimusV', 'A3200', 'pressure', 'Nordson', 'Ultimus'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['camera', 'ueye'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'motion', 'Aerotech', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'UltimusV', 'pressure', 'Nordson', 'Ultimus'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What filename?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'alignments.json', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': 'alignments.json'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'initial': {'X': -241.20172932965255, 'Y': -286.691662732826, 'ZZ1': -6.644274461633202, 'ZZ2': -5.000002007434219, 'ZZ3': -4.999998848323777, 'ZZ4': -4.999876571618324}, 'nAgPMMA@mark': {'X': -257.59173020097427, 'Y': -290.6916728263365, 'ZZ1': -135.86427496373074}, 'nAgPMMA@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}, 'nAgPMMA@cal': {'X': -342.21179128221985, 'Y': -282.43170111987484, 'ZZ1': -106.50427566058444}, 'safeZZ1': {'ZZ1': -6.644274461633202}, 'safeZZ2': {'ZZ2': -5.000002007434219}, 'safeZZ3': {'ZZ3': -4.999998848323777}, 'safeZZ4': {'ZZ4': -4.999876571618324}, 'nAgPMMAslide@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}}}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'initial': {'X': -241.20172932965255, 'Y': -286.691662732826, 'ZZ1': -6.644274461633202, 'ZZ2': -5.000002007434219, 'ZZ3': -4.999998848323777, 'ZZ4': -4.999876571618324}, 'nAgPMMA@mark': {'X': -257.59173020097427, 'Y': -290.6916728263365, 'ZZ1': -135.86427496373074}, 'nAgPMMA@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}, 'nAgPMMA@cal': {'X': -342.21179128221985, 'Y': -282.43170111987484, 'ZZ1': -106.50427566058444}, 'safeZZ1': {'ZZ1': -6.644274461633202}, 'safeZZ2': {'ZZ2': -5.000002007434219}, 'safeZZ3': {'ZZ3': -4.999998848323777}, 'safeZZ4': {'ZZ4': -4.999876571618324}, 'nAgPMMAslide@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'initial': {'X': -241.20172932965255, 'Y': -286.691662732826, 'ZZ1': -6.644274461633202, 'ZZ2': -5.000002007434219, 'ZZ3': -4.999998848323777, 'ZZ4': -4.999876571618324}, 'nAgPMMA@mark': {'X': -257.59173020097427, 'Y': -290.6916728263365, 'ZZ1': -135.86427496373074}, 'nAgPMMA@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}, 'nAgPMMA@cal': {'X': -342.21179128221985, 'Y': -282.43170111987484, 'ZZ1': -106.50427566058444}, 'safeZZ1': {'ZZ1': -6.644274461633202}, 'safeZZ2': {'ZZ2': -5.000002007434219}, 'safeZZ3': {'ZZ3': -4.999998848323777}, 'safeZZ4': {'ZZ4': -4.999876571618324}, 'nAgPMMAslide@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'initial\nX -241.20172932965255 Y -286.691662732826 ZZ1 -6.644274461633202 ZZ2 -5.000002007434219 ZZ3 -4.999998848323777 ZZ4 -4.999876571618324 \n\nnAgPMMA@mark\nX -257.59173020097427 Y -290.6916728263365 ZZ1 -135.86427496373074 \n\nnAgPMMA@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nnAgPMMA@cal\nX -342.21179128221985 Y -282.43170111987484 ZZ1 -106.50427566058444 \n\nsafeZZ1\nZZ1 -6.644274461633202 \n\nsafeZZ2\nZZ2 -5.000002007434219 \n\nsafeZZ3\nZZ3 -4.999998848323777 \n\nsafeZZ4\nZZ4 -4.999876571618324 \n\nnAgPMMAslide@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nWould you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'initial\nX -241.20172932965255 Y -286.691662732826 ZZ1 -6.644274461633202 ZZ2 -5.000002007434219 ZZ3 -4.999998848323777 ZZ4 -4.999876571618324 \n\nnAgPMMA@mark\nX -257.59173020097427 Y -290.6916728263365 ZZ1 -135.86427496373074 \n\nnAgPMMA@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nnAgPMMA@cal\nX -342.21179128221985 Y -282.43170111987484 ZZ1 -106.50427566058444 \n\nsafeZZ1\nZZ1 -6.644274461633202 \n\nsafeZZ2\nZZ2 -5.000002007434219 \n\nsafeZZ3\nZZ3 -4.999998848323777 \n\nsafeZZ4\nZZ4 -4.999876571618324 \n\nnAgPMMAslide@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'n'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', {'Measured_List': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'list of measurements'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'initial': {'X': -241.20172932965255, 'Y': -286.691662732826, 'ZZ1': -6.644274461633202, 'ZZ2': -5.000002007434219, 'ZZ3': -4.999998848323777, 'ZZ4': -4.999876571618324}, 'nAgPMMA@mark': {'X': -257.59173020097427, 'Y': -290.6916728263365, 'ZZ1': -135.86427496373074}, 'nAgPMMA@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}, 'nAgPMMA@cal': {'X': -342.21179128221985, 'Y': -282.43170111987484, 'ZZ1': -106.50427566058444}, 'safeZZ1': {'ZZ1': -6.644274461633202}, 'safeZZ2': {'ZZ2': -5.000002007434219}, 'safeZZ3': {'ZZ3': -4.999998848323777}, 'safeZZ4': {'ZZ4': -4.999876571618324}, 'nAgPMMAslide@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'initial': {'X': -241.20172932965255, 'Y': -286.691662732826, 'ZZ1': -6.644274461633202, 'ZZ2': -5.000002007434219, 'ZZ3': -4.999998848323777, 'ZZ4': -4.999876571618324}, 'nAgPMMA@mark': {'X': -257.59173020097427, 'Y': -290.6916728263365, 'ZZ1': -135.86427496373074}, 'nAgPMMA@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}, 'nAgPMMA@cal': {'X': -342.21179128221985, 'Y': -282.43170111987484, 'ZZ1': -106.50427566058444}, 'safeZZ1': {'ZZ1': -6.644274461633202}, 'safeZZ2': {'ZZ2': -5.000002007434219}, 'safeZZ3': {'ZZ3': -4.999998848323777}, 'safeZZ4': {'ZZ4': -4.999876571618324}, 'nAgPMMAslide@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'initial\nX -241.20172932965255 Y -286.691662732826 ZZ1 -6.644274461633202 ZZ2 -5.000002007434219 ZZ3 -4.999998848323777 ZZ4 -4.999876571618324 \n\nnAgPMMA@mark\nX -257.59173020097427 Y -290.6916728263365 ZZ1 -135.86427496373074 \n\nnAgPMMA@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nnAgPMMA@cal\nX -342.21179128221985 Y -282.43170111987484 ZZ1 -106.50427566058444 \n\nsafeZZ1\nZZ1 -6.644274461633202 \n\nsafeZZ2\nZZ2 -5.000002007434219 \n\nsafeZZ3\nZZ3 -4.999998848323777 \n\nsafeZZ4\nZZ4 -4.999876571618324 \n\nnAgPMMAslide@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'initial\nX -241.20172932965255 Y -286.691662732826 ZZ1 -6.644274461633202 ZZ2 -5.000002007434219 ZZ3 -4.999998848323777 ZZ4 -4.999876571618324 \n\nnAgPMMA@mark\nX -257.59173020097427 Y -290.6916728263365 ZZ1 -135.86427496373074 \n\nnAgPMMA@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nnAgPMMA@cal\nX -342.21179128221985 Y -282.43170111987484 ZZ1 -106.50427566058444 \n\nsafeZZ1\nZZ1 -6.644274461633202 \n\nsafeZZ2\nZZ2 -5.000002007434219 \n\nsafeZZ3\nZZ3 -4.999998848323777 \n\nsafeZZ4\nZZ4 -4.999876571618324 \n\nnAgPMMAslide@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'initial\nX -241.20172932965255 Y -286.691662732826 ZZ1 -6.644274461633202 ZZ2 -5.000002007434219 ZZ3 -4.999998848323777 ZZ4 -4.999876571618324 \n\nnAgPMMA@mark\nX -257.59173020097427 Y -290.6916728263365 ZZ1 -135.86427496373074 \n\nnAgPMMA@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nnAgPMMA@cal\nX -342.21179128221985 Y -282.43170111987484 ZZ1 -106.50427566058444 \n\nsafeZZ1\nZZ1 -6.644274461633202 \n\nsafeZZ2\nZZ2 -5.000002007434219 \n\nsafeZZ3\nZZ3 -4.999998848323777 \n\nsafeZZ4\nZZ4 -4.999876571618324 \n\nnAgPMMAslide@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'initial\nX -241.20172932965255 Y -286.691662732826 ZZ1 -6.644274461633202 ZZ2 -5.000002007434219 ZZ3 -4.999998848323777 ZZ4 -4.999876571618324 \n\nnAgPMMA@mark\nX -257.59173020097427 Y -290.6916728263365 ZZ1 -135.86427496373074 \n\nnAgPMMA@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nnAgPMMA@cal\nX -342.21179128221985 Y -282.43170111987484 ZZ1 -106.50427566058444 \n\nsafeZZ1\nZZ1 -6.644274461633202 \n\nsafeZZ2\nZZ2 -5.000002007434219 \n\nsafeZZ3\nZZ3 -4.999998848323777 \n\nsafeZZ4\nZZ4 -4.999876571618324 \n\nnAgPMMAslide@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['User', 'sensor', 'consol', 'guiconsol'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'UltimusV', 'A3200', 'pressure', 'Nordson', 'Ultimus'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['camera', 'ueye'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'motion', 'Aerotech', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'UltimusV', 'pressure', 'Nordson', 'Ultimus'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['User', 'sensor', 'consol', 'guiconsol'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'UltimusV', 'A3200', 'pressure', 'Nordson', 'Ultimus'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['camera', 'ueye'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'motion', 'Aerotech', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'UltimusV', 'pressure', 'Nordson', 'Ultimus'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'initial': {'X': -241.20172932965255, 'Y': -286.691662732826, 'ZZ1': -6.644274461633202, 'ZZ2': -5.000002007434219, 'ZZ3': -4.999998848323777, 'ZZ4': -4.999876571618324}, 'nAgPMMA@mark': {'X': -257.59173020097427, 'Y': -290.6916728263365, 'ZZ1': -135.86427496373074}, 'nAgPMMA@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}, 'nAgPMMA@cal': {'X': -342.21179128221985, 'Y': -282.43170111987484, 'ZZ1': -106.50427566058444}, 'safeZZ1': {'ZZ1': -6.644274461633202}, 'safeZZ2': {'ZZ2': -5.000002007434219}, 'safeZZ3': {'ZZ3': -4.999998848323777}, 'safeZZ4': {'ZZ4': -4.999876571618324}, 'nAgPMMAslide@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': 'alignments.json'}, 'User_Consol_InputOptions': {'result': 'n'}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'initial': {'X': -241.20172932965255, 'Y': -286.691662732826, 'ZZ1': -6.644274461633202, 'ZZ2': -5.000002007434219, 'ZZ3': -4.999998848323777, 'ZZ4': -4.999876571618324}, 'nAgPMMA@mark': {'X': -257.59173020097427, 'Y': -290.6916728263365, 'ZZ1': -135.86427496373074}, 'nAgPMMA@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}, 'nAgPMMA@cal': {'X': -342.21179128221985, 'Y': -282.43170111987484, 'ZZ1': -106.50427566058444}, 'safeZZ1': {'ZZ1': -6.644274461633202}, 'safeZZ2': {'ZZ2': -5.000002007434219}, 'safeZZ3': {'ZZ3': -4.999998848323777}, 'safeZZ4': {'ZZ4': -4.999876571618324}, 'nAgPMMAslide@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': 'alignments.json'}, 'User_Consol_InputOptions': {'result': 'n'}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'initial\nX -241.20172932965255 Y -286.691662732826 ZZ1 -6.644274461633202 ZZ2 -5.000002007434219 ZZ3 -4.999998848323777 ZZ4 -4.999876571618324 \n\nnAgPMMA@mark\nX -257.59173020097427 Y -290.6916728263365 ZZ1 -135.86427496373074 \n\nnAgPMMA@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nnAgPMMA@cal\nX -342.21179128221985 Y -282.43170111987484 ZZ1 -106.50427566058444 \n\nsafeZZ1\nZZ1 -6.644274461633202 \n\nsafeZZ2\nZZ2 -5.000002007434219 \n\nsafeZZ3\nZZ3 -4.999998848323777 \n\nsafeZZ4\nZZ4 -4.999876571618324 \n\nnAgPMMAslide@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'initial\nX -241.20172932965255 Y -286.691662732826 ZZ1 -6.644274461633202 ZZ2 -5.000002007434219 ZZ3 -4.999998848323777 ZZ4 -4.999876571618324 \n\nnAgPMMA@mark\nX -257.59173020097427 Y -290.6916728263365 ZZ1 -135.86427496373074 \n\nnAgPMMA@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nnAgPMMA@cal\nX -342.21179128221985 Y -282.43170111987484 ZZ1 -106.50427566058444 \n\nsafeZZ1\nZZ1 -6.644274461633202 \n\nsafeZZ2\nZZ2 -5.000002007434219 \n\nsafeZZ3\nZZ3 -4.999998848323777 \n\nsafeZZ4\nZZ4 -4.999876571618324 \n\nnAgPMMAslide@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'initial\nX -241.20172932965255 Y -286.691662732826 ZZ1 -6.644274461633202 ZZ2 -5.000002007434219 ZZ3 -4.999998848323777 ZZ4 -4.999876571618324 \n\nnAgPMMA@mark\nX -257.59173020097427 Y -290.6916728263365 ZZ1 -135.86427496373074 \n\nnAgPMMA@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nnAgPMMA@cal\nX -342.21179128221985 Y -282.43170111987484 ZZ1 -106.50427566058444 \n\nsafeZZ1\nZZ1 -6.644274461633202 \n\nsafeZZ2\nZZ2 -5.000002007434219 \n\nsafeZZ3\nZZ3 -4.999998848323777 \n\nsafeZZ4\nZZ4 -4.999876571618324 \n\nnAgPMMAslide@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'initial\nX -241.20172932965255 Y -286.691662732826 ZZ1 -6.644274461633202 ZZ2 -5.000002007434219 ZZ3 -4.999998848323777 ZZ4 -4.999876571618324 \n\nnAgPMMA@mark\nX -257.59173020097427 Y -290.6916728263365 ZZ1 -135.86427496373074 \n\nnAgPMMA@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nnAgPMMA@cal\nX -342.21179128221985 Y -282.43170111987484 ZZ1 -106.50427566058444 \n\nsafeZZ1\nZZ1 -6.644274461633202 \n\nsafeZZ2\nZZ2 -5.000002007434219 \n\nsafeZZ3\nZZ3 -4.999998848323777 \n\nsafeZZ4\nZZ4 -4.999876571618324 \n\nnAgPMMAslide@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'n'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'initial', 'desc': 'parameters used to generate toolpath'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': -241.20172932965255, 'Y': -286.691662732826, 'ZZ1': -6.644274461633202, 'ZZ2': -5.000002007434219, 'ZZ3': -4.999998848323777, 'ZZ4': -4.999876571618324}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': -241.20172932965255, 'Y': -286.691662732826, 'ZZ1': -6.644274461633202, 'ZZ2': -5.000002007434219, 'ZZ3': -4.999998848323777, 'ZZ4': -4.999876571618324}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to initial,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': ''}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to initial,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_getPosition', {'axislist': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'initial\nX -241.20172932965255 Y -286.691662732826 ZZ1 -6.644274461633202 ZZ2 -5.000002007434219 ZZ3 -4.999998848323777 ZZ4 -4.999876571618324 \n\nnAgPMMA@mark\nX -257.59173020097427 Y -290.6916728263365 ZZ1 -135.86427496373074 \n\nnAgPMMA@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nnAgPMMA@cal\nX -342.21179128221985 Y -282.43170111987484 ZZ1 -106.50427566058444 \n\nsafeZZ1\nZZ1 -6.644274461633202 \n\nsafeZZ2\nZZ2 -5.000002007434219 \n\nsafeZZ3\nZZ3 -4.999998848323777 \n\nsafeZZ4\nZZ4 -4.999876571618324 \n\nnAgPMMAslide@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'initial\nX -241.20172932965255 Y -286.691662732826 ZZ1 -6.644274461633202 ZZ2 -5.000002007434219 ZZ3 -4.999998848323777 ZZ4 -4.999876571618324 \n\nnAgPMMA@mark\nX -257.59173020097427 Y -290.6916728263365 ZZ1 -135.86427496373074 \n\nnAgPMMA@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nnAgPMMA@cal\nX -342.21179128221985 Y -282.43170111987484 ZZ1 -106.50427566058444 \n\nsafeZZ1\nZZ1 -6.644274461633202 \n\nsafeZZ2\nZZ2 -5.000002007434219 \n\nsafeZZ3\nZZ3 -4.999998848323777 \n\nsafeZZ4\nZZ4 -4.999876571618324 \n\nnAgPMMAslide@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'initial'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_getPosition', 'information': {'axislist': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'initial\nX -241.20172932965255 Y -286.691662732826 ZZ1 -6.644274461633202 ZZ2 -5.000002007434219 ZZ3 -4.999998848323777 ZZ4 -4.999876571618324 \n\nnAgPMMA@mark\nX -257.59173020097427 Y -290.6916728263365 ZZ1 -135.86427496373074 \n\nnAgPMMA@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nnAgPMMA@cal\nX -342.21179128221985 Y -282.43170111987484 ZZ1 -106.50427566058444 \n\nsafeZZ1\nZZ1 -6.644274461633202 \n\nsafeZZ2\nZZ2 -5.000002007434219 \n\nsafeZZ3\nZZ3 -4.999998848323777 \n\nsafeZZ4\nZZ4 -4.999876571618324 \n\nnAgPMMAslide@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'initial\nX -241.20172932965255 Y -286.691662732826 ZZ1 -6.644274461633202 ZZ2 -5.000002007434219 ZZ3 -4.999998848323777 ZZ4 -4.999876571618324 \n\nnAgPMMA@mark\nX -257.59173020097427 Y -290.6916728263365 ZZ1 -135.86427496373074 \n\nnAgPMMA@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nnAgPMMA@cal\nX -342.21179128221985 Y -282.43170111987484 ZZ1 -106.50427566058444 \n\nsafeZZ1\nZZ1 -6.644274461633202 \n\nsafeZZ2\nZZ2 -5.000002007434219 \n\nsafeZZ3\nZZ3 -4.999998848323777 \n\nsafeZZ4\nZZ4 -4.999876571618324 \n\nnAgPMMAslide@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'initial'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_getPosition', 'information': {'axislist': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Disconnect_All', None]}
Handled gui {'subject': 'target.apparatus.Disconnect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Disconnect_All', None]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.applyTemplate', None]}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.applyTemplate', None]}, 'kwargs': {'args': ['C:/Users/jhardin/Desktop/testAPP.json'], 'kwargs': {}}, 'args': ['FromFile']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'consol', 'guiconsol', 'User'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pressure', 'A3200', 'UltimusV', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion', 'sensor', 'Aerotech', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pressure', 'UltimusV', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'consol', 'guiconsol', 'User'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pressure', 'A3200', 'UltimusV', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion', 'sensor', 'Aerotech', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pressure', 'UltimusV', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'type']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'type'], 'value': 'User_GUI'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'address']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'address'], 'value': 'gui'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'addresstype']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype'], 'value': 'zmqNode'}}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', ['guiconsol', 'User', 'sensor', 'consol']]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', None]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', False]}
Sent gui {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['User', 'Connect', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['camera', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['Aerotech', 'A3200', 'motion', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['gantry', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['pump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['system', 'System', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['system', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', 'e_reply']}, 'args': ['aeropump0', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['aeropump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}
Handled gui {'subject': 'target.apparatus.Connect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}, 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'consol', 'User', 'guiconsol'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pressure', 'Ultimus', 'pump', 'UltimusV', 'Nordson', 'A3200'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['camera', 'ueye'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'A3200', 'Aerotech', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pressure', 'Ultimus', 'pump', 'UltimusV', 'Nordson'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'consol', 'User', 'guiconsol'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pressure', 'Ultimus', 'pump', 'UltimusV', 'Nordson', 'A3200'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['camera', 'ueye'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'A3200', 'Aerotech', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pressure', 'Ultimus', 'pump', 'UltimusV', 'Nordson'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'n'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'initial', 'desc': 'parameters used to generate toolpath'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to initial,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': ''}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to initial,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_getPosition', {'axislist': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}]}
Handled procexec {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'value': 'No postion collected'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'information']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial'], 'value': {'X': 'i', 'Y': 'n', 'ZZ1': 'f', 'ZZ2': 'o', 'ZZ3': 'r', 'ZZ4': 'm'}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'nPMMA@mark', 'desc': 'parameters used to generate toolpath'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@mark']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': ''}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_getPosition', {'axislist': ['X', 'Y', 'ZZ1'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}]}
Handled procexec {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'value': 'No postion collected'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'information']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@mark'], 'value': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'nPMMA@start', 'desc': 'parameters used to generate toolpath'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@start,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': ''}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@start,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_getPosition', {'axislist': ['X', 'Y', 'ZZ1'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}]}
Handled procexec {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'value': 'No postion collected'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'information']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start'], 'value': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'nPMMA@cal', 'desc': 'parameters used to generate toolpath'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@cal,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': ''}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@cal,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_getPosition', {'axislist': ['X', 'Y', 'ZZ1'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}]}
Handled procexec {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'value': 'No postion collected'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'information']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal'], 'value': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'camera@mark', 'desc': 'parameters used to generate toolpath'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ2': ''}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ2': ''}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'camera@mark']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to camera@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': ''}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to camera@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ2'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_getPosition', {'axislist': ['X', 'Y', 'ZZ2'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}]}
Handled procexec {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'value': 'No postion collected'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'information']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'camera@mark'], 'value': {'X': 'i', 'Y': 'n', 'ZZ2': 'f'}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 'i', 'Y': 'n', 'ZZ2': 'f'}, 'initial': {'X': 'i', 'Y': 'n', 'ZZ1': 'f', 'ZZ2': 'o', 'ZZ3': 'r', 'ZZ4': 'm'}, 'nPMMA@cal': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}, 'nPMMA@mark': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}, 'nPMMA@start': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 'i', 'Y': 'n', 'ZZ2': 'f'}, 'initial': {'X': 'i', 'Y': 'n', 'ZZ1': 'f', 'ZZ2': 'o', 'ZZ3': 'r', 'ZZ4': 'm'}, 'nPMMA@cal': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}, 'nPMMA@mark': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}, 'nPMMA@start': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'camera@mark\nX i Y n ZZ2 f \n\ninitial\nX i Y n ZZ1 f ZZ2 o ZZ3 r ZZ4 m \n\nnPMMA@cal\nX i Y n ZZ1 f \n\nnPMMA@mark\nX i Y n ZZ1 f \n\nnPMMA@start\nX i Y n ZZ1 f \n\nWould you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'camera@mark\nX i Y n ZZ2 f \n\ninitial\nX i Y n ZZ1 f ZZ2 o ZZ3 r ZZ4 m \n\nnPMMA@cal\nX i Y n ZZ1 f \n\nnPMMA@mark\nX i Y n ZZ1 f \n\nnPMMA@start\nX i Y n ZZ1 f \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Which alignment would you like to redo?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Which alignment would you like to redo?', 'options': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled launcher {'subject': 'close'}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Disconnect_All', None]}
Handled gui {'subject': 'target.apparatus.Disconnect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Disconnect_All', None]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.applyTemplate', None]}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.applyTemplate', None]}, 'kwargs': {'args': ['C:/Users/jhardin/Desktop/testAPP.json'], 'kwargs': {}}, 'args': ['FromFile']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'consol', 'guiconsol', 'User'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pressure', 'A3200', 'UltimusV', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion', 'sensor', 'Aerotech', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pressure', 'UltimusV', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'consol', 'guiconsol', 'User'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pressure', 'A3200', 'UltimusV', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion', 'sensor', 'Aerotech', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pressure', 'UltimusV', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'type']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'type'], 'value': 'User_GUI'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'address']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'address'], 'value': 'gui'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'addresstype']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype'], 'value': 'zmqNode'}}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', ['consol', 'sensor', 'User', 'guiconsol']]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', None]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', False]}
Sent gui {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['User', 'Connect', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['camera', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['sensor', 'Aerotech', 'A3200', 'motion']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['gantry', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['pump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['system', 'System', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['system', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', 'e_reply']}, 'args': ['aeropump0', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['aeropump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}
Handled gui {'subject': 'target.apparatus.Connect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}, 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'consol', 'guiconsol', 'User'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'A3200', 'pump', 'pressure', 'Nordson', 'Ultimus'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'A3200', 'Aerotech', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'pump', 'pressure', 'Nordson', 'Ultimus'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'consol', 'guiconsol', 'User'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'A3200', 'pump', 'pressure', 'Nordson', 'Ultimus'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'A3200', 'Aerotech', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'pump', 'pressure', 'Nordson', 'Ultimus'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'n'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'initial', 'desc': 'parameters used to generate toolpath'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to initial,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': ''}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to initial,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_getPosition', {'axislist': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}]}
Handled procexec {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'value': 'No postion collected'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'information']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial'], 'value': {'X': 'i', 'Y': 'n', 'ZZ1': 'f', 'ZZ2': 'o', 'ZZ3': 'r', 'ZZ4': 'm'}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'nPMMA@mark', 'desc': 'parameters used to generate toolpath'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@mark']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': ''}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_getPosition', {'axislist': ['X', 'Y', 'ZZ1'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}]}
Handled procexec {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'value': 'No postion collected'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'information']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@mark'], 'value': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'nPMMA@start', 'desc': 'parameters used to generate toolpath'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@start,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': ''}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@start,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_getPosition', {'axislist': ['X', 'Y', 'ZZ1'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}]}
Handled procexec {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'value': 'No postion collected'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'information']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start'], 'value': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'nPMMA@cal', 'desc': 'parameters used to generate toolpath'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@cal,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': ''}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@cal,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_getPosition', {'axislist': ['X', 'Y', 'ZZ1'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}]}
Handled procexec {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'value': 'No postion collected'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'information']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal'], 'value': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'camera@mark', 'desc': 'parameters used to generate toolpath'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ2': ''}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ2': ''}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'camera@mark']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to camera@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': ''}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to camera@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ2'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_getPosition', {'axislist': ['X', 'Y', 'ZZ2'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}]}
Handled procexec {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'value': 'No postion collected'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'information']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'camera@mark'], 'value': {'X': 'i', 'Y': 'n', 'ZZ2': 'f'}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 'i', 'Y': 'n', 'ZZ2': 'f'}, 'initial': {'X': 'i', 'Y': 'n', 'ZZ1': 'f', 'ZZ2': 'o', 'ZZ3': 'r', 'ZZ4': 'm'}, 'nPMMA@cal': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}, 'nPMMA@mark': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}, 'nPMMA@start': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 'i', 'Y': 'n', 'ZZ2': 'f'}, 'initial': {'X': 'i', 'Y': 'n', 'ZZ1': 'f', 'ZZ2': 'o', 'ZZ3': 'r', 'ZZ4': 'm'}, 'nPMMA@cal': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}, 'nPMMA@mark': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}, 'nPMMA@start': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'camera@mark\nX i Y n ZZ2 f \n\ninitial\nX i Y n ZZ1 f ZZ2 o ZZ3 r ZZ4 m \n\nnPMMA@cal\nX i Y n ZZ1 f \n\nnPMMA@mark\nX i Y n ZZ1 f \n\nnPMMA@start\nX i Y n ZZ1 f \n\nWould you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'camera@mark\nX i Y n ZZ2 f \n\ninitial\nX i Y n ZZ1 f ZZ2 o ZZ3 r ZZ4 m \n\nnPMMA@cal\nX i Y n ZZ1 f \n\nnPMMA@mark\nX i Y n ZZ1 f \n\nnPMMA@start\nX i Y n ZZ1 f \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'n'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', {'Measured_List': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'list of measurements'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 'i', 'Y': 'n', 'ZZ2': 'f'}, 'initial': {'X': 'i', 'Y': 'n', 'ZZ1': 'f', 'ZZ2': 'o', 'ZZ3': 'r', 'ZZ4': 'm'}, 'nPMMA@cal': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}, 'nPMMA@mark': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}, 'nPMMA@start': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 'i', 'Y': 'n', 'ZZ2': 'f'}, 'initial': {'X': 'i', 'Y': 'n', 'ZZ1': 'f', 'ZZ2': 'o', 'ZZ3': 'r', 'ZZ4': 'm'}, 'nPMMA@cal': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}, 'nPMMA@mark': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}, 'nPMMA@start': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'initial'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_getPosition', 'information': {'axislist': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': 'information'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@mark'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_getPosition', 'information': {'axislist': ['X', 'Y', 'ZZ1'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': 'information'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@start'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_getPosition', 'information': {'axislist': ['X', 'Y', 'ZZ1'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': 'information'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@cal'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_getPosition', 'information': {'axislist': ['X', 'Y', 'ZZ1'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': 'information'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'camera@mark'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ2'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_getPosition', 'information': {'axislist': ['X', 'Y', 'ZZ2'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': 'information'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX i Y n ZZ2 f \n\ninitial\nX i Y n ZZ1 f ZZ2 o ZZ3 r ZZ4 m \n\nnPMMA@cal\nX i Y n ZZ1 f \n\nnPMMA@mark\nX i Y n ZZ1 f \n\nnPMMA@start\nX i Y n ZZ1 f \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX i Y n ZZ2 f \n\ninitial\nX i Y n ZZ1 f ZZ2 o ZZ3 r ZZ4 m \n\nnPMMA@cal\nX i Y n ZZ1 f \n\nnPMMA@mark\nX i Y n ZZ1 f \n\nnPMMA@start\nX i Y n ZZ1 f \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'initial'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_getPosition', 'information': {'axislist': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': 'information'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@mark'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_getPosition', 'information': {'axislist': ['X', 'Y', 'ZZ1'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': 'information'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@start'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_getPosition', 'information': {'axislist': ['X', 'Y', 'ZZ1'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': 'information'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@cal'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_getPosition', 'information': {'axislist': ['X', 'Y', 'ZZ1'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': 'information'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'camera@mark'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ2'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_getPosition', 'information': {'axislist': ['X', 'Y', 'ZZ2'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': 'information'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX i Y n ZZ2 f \n\ninitial\nX i Y n ZZ1 f ZZ2 o ZZ3 r ZZ4 m \n\nnPMMA@cal\nX i Y n ZZ1 f \n\nnPMMA@mark\nX i Y n ZZ1 f \n\nnPMMA@start\nX i Y n ZZ1 f \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX i Y n ZZ2 f \n\ninitial\nX i Y n ZZ1 f ZZ2 o ZZ3 r ZZ4 m \n\nnPMMA@cal\nX i Y n ZZ1 f \n\nnPMMA@mark\nX i Y n ZZ1 f \n\nnPMMA@start\nX i Y n ZZ1 f \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'end']}
Handled launcher {'subject': 'close'}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Disconnect_All', None]}
Handled gui {'subject': 'target.apparatus.Disconnect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Disconnect_All', None]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.applyTemplate', None]}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.applyTemplate', None]}, 'kwargs': {'args': ['C:/Users/jhardin/Desktop/testAPP.json'], 'kwargs': {}}, 'args': ['FromFile']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'consol', 'guiconsol', 'User'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pressure', 'A3200', 'UltimusV', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion', 'sensor', 'Aerotech', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pressure', 'UltimusV', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'consol', 'guiconsol', 'User'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pressure', 'A3200', 'UltimusV', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion', 'sensor', 'Aerotech', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pressure', 'UltimusV', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'type']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'type'], 'value': 'User_GUI'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'address']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'address'], 'value': 'gui'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'addresstype']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype'], 'value': 'zmqNode'}}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', ['sensor', 'User', 'guiconsol', 'consol']]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', None]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', False]}
Sent gui {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['User', 'Connect', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['camera', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['motion', 'sensor', 'Aerotech', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['gantry', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['pump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['system', 'System', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['system', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', 'e_reply']}, 'args': ['aeropump0', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['aeropump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}
Handled gui {'subject': 'target.apparatus.Connect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}, 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'guiconsol', 'User', 'consol'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'A3200', 'pressure', 'Nordson', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'motion', 'A3200', 'Aerotech'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'pressure', 'Nordson', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'guiconsol', 'User', 'consol'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'A3200', 'pressure', 'Nordson', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'motion', 'A3200', 'Aerotech'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'pressure', 'Nordson', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'n'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'initial', 'desc': 'parameters used to generate toolpath'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to initial,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': ''}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to initial,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}
Handled procexec {'subject': 'target.apparatus.getSimulation', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': "What are simulation values for ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4']?", 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': "What are simulation values for ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': '[0,0,0,0,0,0]'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[0,0,0,0,0,0]']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[0,0,0,0,0,0]']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '[0,0,0,0,0,0]']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'nPMMA@mark', 'desc': 'parameters used to generate toolpath'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@mark']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': ''}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}
Handled procexec {'subject': 'target.apparatus.getSimulation', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': '[0,0,0]'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[0,0,0]']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[0,0,0]']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '[0,0,0]']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', [0.0, 0.0, 0.0]]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@mark'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'nPMMA@start', 'desc': 'parameters used to generate toolpath'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@start,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': ''}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@start,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}
Handled procexec {'subject': 'target.apparatus.getSimulation', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': '[0,0,0]'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[0,0,0]']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[0,0,0]']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '[0,0,0]']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', [0.0, 0.0, 0.0]]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'nPMMA@cal', 'desc': 'parameters used to generate toolpath'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@cal,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': ''}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@cal,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}
Handled procexec {'subject': 'target.apparatus.getSimulation', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': '[0,0,0]'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[0,0,0]']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[0,0,0]']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '[0,0,0]']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', [0.0, 0.0, 0.0]]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'camera@mark', 'desc': 'parameters used to generate toolpath'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ2': ''}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ2': ''}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'camera@mark']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to camera@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': ''}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to camera@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ2'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}
Handled procexec {'subject': 'target.apparatus.getSimulation', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': "What are simulation values for ['X', 'Y', 'ZZ2']?", 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': "What are simulation values for ['X', 'Y', 'ZZ2']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': '[0,0,0]'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[0,0,0]']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[0,0,0]']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '[0,0,0]']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', [0.0, 0.0, 0.0]]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'camera@mark'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nWould you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'n'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', {'Measured_List': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'list of measurements'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ2'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ2'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'camera', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'initial'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0,0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@mark'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@start'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@cal'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'camera@mark'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ2'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ2']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ2']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'initial'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0,0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@mark'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@start'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@cal'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'camera@mark'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ2'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ2']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ2']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', False]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', False]}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Would you like to use ink calibraton for PMMA?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated'], 'value': True}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Would you like to make a new file for PMMA?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'n'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Would you like to make new measurement of PMMA?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 60]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 60]}, 'kwargs': {'infoAddress': ['information', 'ink calibration', 'time']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}, 'time': {'source': 'apparatus', 'address': ['information', 'ink calibration', 'time'], 'value': 60, 'desc': 'name of alignmentfile'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': ['motion']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': ['system']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'No devices met requirments']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'No devices met requirments']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'nPMMA@cal'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': ['devices', 'gantry', 'nPMMA', 'axismask'], 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['Z'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the initial weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': '10'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '10']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '10']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '10']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Is 10g the correct value?(y/n)', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Put slide in place and press ENTER.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': ''}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Put slide in place and press ENTER.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}
Error handling procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}, 'kwargs': {'infoAddress': ['devices', 'No devices met requirments', 'pressure']}}: Key not found: ['devices', 'No devices met requirments', 'pressure']
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_No devices met requirments_Set', {'pressure': None}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'initial'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0,0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@mark'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@start'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@cal'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'camera@mark'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ2'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ2']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ2']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_No devices met requirments_Set', 'information': {'pressure': "<class 'NoneType'>"}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'initial'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0,0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@mark'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@start'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@cal'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'camera@mark'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ2'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ2']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ2']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_No devices met requirments_Set', 'information': {'pressure': "<class 'NoneType'>"}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Disconnect_All', None]}
Handled gui {'subject': 'target.apparatus.Disconnect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Disconnect_All', None]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.applyTemplate', None]}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.applyTemplate', None]}, 'kwargs': {'args': ['C:/Users/jhardin/Desktop/testAPP.json'], 'kwargs': {}}, 'args': ['FromFile']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'consol', 'guiconsol', 'User'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pressure', 'A3200', 'UltimusV', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion', 'sensor', 'Aerotech', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pressure', 'UltimusV', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'consol', 'guiconsol', 'User'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pressure', 'A3200', 'UltimusV', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion', 'sensor', 'Aerotech', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pressure', 'UltimusV', 'Ultimus', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'type']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'type'], 'value': 'User_GUI'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'address']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'address'], 'value': 'gui'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'addresstype']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype'], 'value': 'zmqNode'}}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', ['User', 'sensor', 'guiconsol', 'consol']]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', None]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', False]}
Sent gui {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['User', 'Connect', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['camera', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['Aerotech', 'motion', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['gantry', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['pump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['system', 'System', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['system', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', 'e_reply']}, 'args': ['aeropump0', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['aeropump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}
Handled gui {'subject': 'target.apparatus.Connect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}, 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'User', 'guiconsol', 'consol'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['A3200', 'UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'A3200', 'motion', 'Aerotech'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'User', 'guiconsol', 'consol'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['A3200', 'UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'A3200', 'motion', 'Aerotech'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'User', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'camera', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Disconnect_All', None]}
Handled gui {'subject': 'target.apparatus.Disconnect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Disconnect_All', None]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': False, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'User', 'guiconsol', 'consol'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': False, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['A3200', 'UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': False, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': False, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'A3200', 'motion', 'Aerotech'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': False, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': False, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': False, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'User', 'guiconsol', 'consol'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': False, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['A3200', 'UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': False, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': False, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'A3200', 'motion', 'Aerotech'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': False, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': False, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_User_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_camera_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_User_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_camera_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'type']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'type'], 'value': 'User_GUI'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'address']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'address'], 'value': 'gui'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'addresstype']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype'], 'value': 'zmqNode'}}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', ['User', 'sensor', 'guiconsol', 'consol']]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', None]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', False]}
Sent gui {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['User', 'Connect', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['camera', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['Aerotech', 'motion', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['gantry', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['pump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['system', 'System', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['system', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', 'e_reply']}, 'args': ['aeropump0', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['aeropump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}
Handled gui {'subject': 'target.apparatus.Connect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}, 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'guiconsol', 'User', 'consol'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['A3200', 'UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'A3200', 'motion', 'Aerotech'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'guiconsol', 'User', 'consol'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['A3200', 'UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'A3200', 'motion', 'Aerotech'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': {}}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_User_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_camera_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_User_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_camera_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'XlineTPGen']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'XlineTPGen']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'desc': 'parameters used to generate toolpath'}, 'generator': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator'], 'value': 'XlineTPGen', 'desc': 'name of generator'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'dataArgs': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'arguments to make parameter structure'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'PMMA']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'PMMA']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters', 'materialname']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Run', {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, [0]]}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'desc': 'parameters used to generate toolpath'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'newfigure': {'source': 'apparatus', 'address': '', 'value': True, 'desc': 'Make a new figure?'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name'], 'value': 'Logs/1565183992image.png'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_User_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_camera_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]], 'dataArgs': ''}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_User_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_camera_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]], 'dataArgs': ''}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'guiconsol', 'User', 'consol'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['A3200', 'UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'A3200', 'motion', 'Aerotech'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'guiconsol', 'User', 'consol'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['A3200', 'UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'A3200', 'motion', 'Aerotech'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': 'Logs/1565183992image.png'}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': 'Logs/1565183992image.png'}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_User_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_camera_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]], 'dataArgs': ''}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_User_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_camera_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]], 'dataArgs': ''}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'XlineTPGen']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'XlineTPGen']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'desc': 'parameters used to generate toolpath'}, 'generator': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator'], 'value': 'XlineTPGen', 'desc': 'name of generator'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'dataArgs': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'arguments to make parameter structure'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'PMMA']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'PMMA']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters', 'materialname']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Run', {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, [0]]}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'desc': 'parameters used to generate toolpath'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'newfigure': {'source': 'apparatus', 'address': '', 'value': True, 'desc': 'Make a new figure?'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name'], 'value': 'Logs/1565184113image.png'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_User_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_camera_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]], 'dataArgs': ''}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'dataArgs': ''}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_User_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_camera_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]], 'dataArgs': ''}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'dataArgs': ''}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'guiconsol', 'User', 'consol'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['A3200', 'UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'A3200', 'motion', 'Aerotech'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'guiconsol', 'User', 'consol'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['A3200', 'UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'A3200', 'motion', 'Aerotech'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': 'Logs/1565184113image.png'}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': 'Logs/1565184113image.png'}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_User_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_camera_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]], 'dataArgs': ''}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'dataArgs': ''}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_User_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_camera_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]], 'dataArgs': ''}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'dataArgs': ''}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'guiconsol', 'User', 'consol'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['A3200', 'UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'A3200', 'motion', 'Aerotech'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'guiconsol', 'User', 'consol'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['A3200', 'UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'A3200', 'motion', 'Aerotech'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': 'Logs/1565184113image.png'}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': 'Logs/1565184113image.png'}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_User_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_camera_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]], 'dataArgs': ''}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'dataArgs': ''}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_User_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_camera_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]], 'dataArgs': ''}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'dataArgs': ''}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'Monkey_Eye', 'type']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'Monkey_Eye', 'type'], 'value': 'Sensor'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'Monkey_Eye', 'address']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'Monkey_Eye', 'address'], 'value': 'procexec'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'Monkey_Eye', 'addresstype']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'Monkey_Eye', 'addresstype'], 'value': 'zmqNode'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'guiconsol', 'User', 'consol'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['A3200', 'UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'A3200', 'motion', 'Aerotech'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}, 'Monkey_Eye': {'type': 'Sensor', 'address': 'procexec', 'addresstype': 'zmqNode'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'guiconsol', 'User', 'consol'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['A3200', 'UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'A3200', 'motion', 'Aerotech'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}, 'Monkey_Eye': {'type': 'Sensor', 'address': 'procexec', 'addresstype': 'zmqNode'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': 'Logs/1565184113image.png'}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': 'Logs/1565184113image.png'}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'guiconsol', 'User', 'consol'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['A3200', 'UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'A3200', 'motion', 'Aerotech'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}, 'Monkey_Eye': {'type': 'Sensor', 'address': 'procexec', 'addresstype': 'zmqNode'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'User': {'Connected': True, 'address': 'gui', 'addresstype': 'zmqNode', 'descriptors': ['sensor', 'guiconsol', 'User', 'consol'], 'type': 'User_GUI'}, 'aeropump0': {'A3200address': 'procexec', 'A3200name': 'gantry', 'Connected': True, 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['A3200', 'UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpaddress': 'procexec', 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['ueye', 'camera'], 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ2'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'A3200', 'motion', 'Aerotech'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'Connected': False, 'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'Connected': False, 'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': '', 'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'Ultimus', 'pump', 'Nordson', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'Connected': True, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['system'], 'type': 'System'}, 'Monkey_Eye': {'type': 'Sensor', 'address': 'procexec', 'addresstype': 'zmqNode'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': 'Logs/1565184113image.png'}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'ProcedureData': {'Toolpath_Generate': {'generator': 'XlineTPGen', 'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}, 'Toolpath_Plot': {'image_file_name': 'Logs/1565184113image.png'}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ2': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_User_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_camera_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]], 'dataArgs': ''}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'dataArgs': ''}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'eproc_User_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_camera_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': ''}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]], 'dataArgs': ''}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'dataArgs': ''}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled launcher {'subject': 'close'}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Disconnect_All', None]}
Handled gui {'subject': 'target.apparatus.Disconnect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Disconnect_All', None]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.applyTemplate', None]}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.applyTemplate', None]}, 'kwargs': {'args': [[{'PMMA': 'ZZ1'}], [{'name': 'camera', 'axis': 'ZZ3', 'type': 'IDS_ueye'}]], 'kwargs': {}}, 'args': ['FlexPrinterGUI']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'axismask': {'Z': 'ZZ3'}}}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA']}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'camera': {'type': 'IDS_ueye', 'addresstype': 'zmqNode', 'address': 'procexec', 'settle_time': 5}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'axismask': {'Z': 'ZZ3'}}}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA']}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'camera': {'type': 'IDS_ueye', 'addresstype': 'zmqNode', 'address': 'procexec', 'settle_time': 5}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'COM'], 'value': ''}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'COM'], 'value': 7}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'descriptors'], 'value': ['PMMA']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pressure'], 'value': 50}}
Handled gui {'subject': 'target.apparatus.logApparatus', 'args': ['C:/Users/jhardin/Desktop/DemoFiles/DemoApparatus.json']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'type']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'type'], 'value': 'User_GUI'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'address']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'address'], 'value': 'gui'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'addresstype']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype'], 'value': 'zmqNode'}}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['Aerotech', 'A3200', 'sensor', 'motion']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['gantry', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['pump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': 7}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['camera', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['system', 'System', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['system', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', ['guiconsol', 'consol', 'User', 'sensor']]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', None]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', False]}
Sent gui {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['User', 'Connect', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', 'e_reply']}, 'args': ['aeropump0', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['aeropump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}
Handled gui {'subject': 'target.apparatus.Connect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}, 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['A3200', 'motion', 'sensor', 'Aerotech'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'axismask': {'Z': 'ZZ3'}}, 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': 7, 'pressure': 50, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'PMMA', 'Ultimus', 'Nordson', 'pump', 'pressure'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['A3200', 'UltimusV', 'Ultimus', 'Nordson', 'pump', 'pressure'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'type': 'IDS_ueye', 'addresstype': 'zmqNode', 'address': 'procexec', 'settle_time': 5, 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['guiconsol', 'consol', 'User', 'sensor']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['A3200', 'motion', 'sensor', 'Aerotech'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'axismask': {'Z': 'ZZ3'}}, 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': 7, 'pressure': 50, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'PMMA', 'Ultimus', 'Nordson', 'pump', 'pressure'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['A3200', 'UltimusV', 'Ultimus', 'Nordson', 'pump', 'pressure'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'type': 'IDS_ueye', 'addresstype': 'zmqNode', 'address': 'procexec', 'settle_time': 5, 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['guiconsol', 'consol', 'User', 'sensor']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['A3200', 'motion', 'sensor', 'Aerotech'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'axismask': {'Z': 'ZZ3'}}, 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': 7, 'pressure': 50, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'PMMA', 'Ultimus', 'Nordson', 'pump', 'pressure'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['A3200', 'UltimusV', 'Ultimus', 'Nordson', 'pump', 'pressure'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'type': 'IDS_ueye', 'addresstype': 'zmqNode', 'address': 'procexec', 'settle_time': 5, 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['guiconsol', 'consol', 'User', 'sensor']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['A3200', 'motion', 'sensor', 'Aerotech'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'axismask': {'Z': 'ZZ3'}}, 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': 7, 'pressure': 50, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'PMMA', 'Ultimus', 'Nordson', 'pump', 'pressure'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['A3200', 'UltimusV', 'Ultimus', 'Nordson', 'pump', 'pressure'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'type': 'IDS_ueye', 'addresstype': 'zmqNode', 'address': 'procexec', 'settle_time': 5, 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['guiconsol', 'consol', 'User', 'sensor']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['A3200', 'motion', 'sensor', 'Aerotech'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'axismask': {'Z': 'ZZ3'}}, 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': 7, 'pressure': 50, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'PMMA', 'Ultimus', 'Nordson', 'pump', 'pressure'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['A3200', 'UltimusV', 'Ultimus', 'Nordson', 'pump', 'pressure'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'type': 'IDS_ueye', 'addresstype': 'zmqNode', 'address': 'procexec', 'settle_time': 5, 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['guiconsol', 'consol', 'User', 'sensor']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['A3200', 'motion', 'sensor', 'Aerotech'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'axismask': {'Z': 'ZZ3'}}, 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': 7, 'pressure': 50, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'PMMA', 'Ultimus', 'Nordson', 'pump', 'pressure'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['A3200', 'UltimusV', 'Ultimus', 'Nordson', 'pump', 'pressure'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'type': 'IDS_ueye', 'addresstype': 'zmqNode', 'address': 'procexec', 'settle_time': 5, 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['guiconsol', 'consol', 'User', 'sensor']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': {}}, 'Toolpath_Generate': {'toolpath': {}, 'parameters': {}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': {}}, 'Toolpath_Generate': {'toolpath': {}, 'parameters': {}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {}, 'desc': 'parameters used to generate toolpath'}, 'generator': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator'], 'value': 'XlineTPGen', 'desc': 'name of generator'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': {}, 'desc': 'where to store the toolpath'}, 'dataArgs': {'source': 'apparatus', 'address': '', 'value': ['PMMA'], 'desc': 'arguments to make parameter structure'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Run', {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'desc': 'parameters used to generate toolpath'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'newfigure': {'source': 'apparatus', 'address': '', 'value': True, 'desc': 'Make a new figure?'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name'], 'value': 'Logs/1565209808image.png'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['A3200', 'motion', 'sensor', 'Aerotech'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'axismask': {'Z': 'ZZ3'}}, 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': 7, 'pressure': 50, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'PMMA', 'Ultimus', 'Nordson', 'pump', 'pressure'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['A3200', 'UltimusV', 'Ultimus', 'Nordson', 'pump', 'pressure'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'type': 'IDS_ueye', 'addresstype': 'zmqNode', 'address': 'procexec', 'settle_time': 5, 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['guiconsol', 'consol', 'User', 'sensor']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['A3200', 'motion', 'sensor', 'Aerotech'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'axismask': {'Z': 'ZZ3'}}, 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': 7, 'pressure': 50, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'PMMA', 'Ultimus', 'Nordson', 'pump', 'pressure'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['A3200', 'UltimusV', 'Ultimus', 'Nordson', 'pump', 'pressure'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'type': 'IDS_ueye', 'addresstype': 'zmqNode', 'address': 'procexec', 'settle_time': 5, 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['guiconsol', 'consol', 'User', 'sensor']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': 'Logs/1565209808image.png'}, 'Toolpath_Generate': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': 'Logs/1565209808image.png'}, 'Toolpath_Generate': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What filename?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'alignments.json', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': 'alignments.json'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}}}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ2 0.0 \n\nWould you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ2 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Which alignment would you like to redo?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Which alignment would you like to redo?', 'options': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'nPMMA@start'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'nPMMA@start']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'nPMMA@start']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'nPMMA@start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'nPMMA@start', 'desc': 'parameters used to generate toolpath'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@start,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': ''}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@start,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}
Handled procexec {'subject': 'target.apparatus.getSimulation', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': '[25,25,25]'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[25,25,25]']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[25,25,25]']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '[25,25,25]']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', [25.0, 25.0, 25.0]]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start'], 'value': {'X': 25.0, 'Y': 25.0, 'ZZ1': 25.0}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 25.0, 'Y': 25.0, 'ZZ1': 25.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 25.0, 'Y': 25.0, 'ZZ1': 25.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 25.0 Y 25.0 ZZ1 25.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ2 0.0 \n\nWould you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 25.0 Y 25.0 ZZ1 25.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ2 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'n'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', {'Measured_List': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'list of measurements'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 25.0, 'Y': 25.0, 'ZZ1': 25.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 25.0, 'Y': 25.0, 'ZZ1': 25.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ3'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ3'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'camera', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ2 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ2 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Which alignment would you like to redo?', 'options': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'default': '', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Which alignment would you like to redo?', 'options': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'nPMMA@start'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@start'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[25,25,25]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 25.0 Y 25.0 ZZ1 25.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ2 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 25.0 Y 25.0 ZZ1 25.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ2 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ2 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ2 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Which alignment would you like to redo?', 'options': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'default': '', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Which alignment would you like to redo?', 'options': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'nPMMA@start'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@start'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[25,25,25]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 25.0 Y 25.0 ZZ1 25.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ2 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 25.0 Y 25.0 ZZ1 25.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ2 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['A3200', 'motion', 'sensor', 'Aerotech'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'axismask': {'Z': 'ZZ3'}}, 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': 7, 'pressure': 50, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'PMMA', 'Ultimus', 'Nordson', 'pump', 'pressure'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['A3200', 'UltimusV', 'Ultimus', 'Nordson', 'pump', 'pressure'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'type': 'IDS_ueye', 'addresstype': 'zmqNode', 'address': 'procexec', 'settle_time': 5, 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['guiconsol', 'consol', 'User', 'sensor']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['A3200', 'motion', 'sensor', 'Aerotech'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'axismask': {'Z': 'ZZ3'}}, 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': 7, 'pressure': 50, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'PMMA', 'Ultimus', 'Nordson', 'pump', 'pressure'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumprestime': 0, 'pumpontime': 0, 'pumpofftime': 0, 'midtime': 0, 'addresstype': 'zmqNode', 'descriptors': ['A3200', 'UltimusV', 'Ultimus', 'Nordson', 'pump', 'pressure'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'type': 'IDS_ueye', 'addresstype': 'zmqNode', 'address': 'procexec', 'settle_time': 5, 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['guiconsol', 'consol', 'User', 'sensor']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 25.0, 'Y': 25.0, 'ZZ1': 25.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': '[25,25,25]'}, 'User_Consol_InputOptions': {'result': 'n'}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': 'Logs/1565209808image.png'}, 'Toolpath_Generate': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 25.0, 'Y': 25.0, 'ZZ1': 25.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': '[25,25,25]'}, 'User_Consol_InputOptions': {'result': 'n'}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': 'Logs/1565209808image.png'}, 'Toolpath_Generate': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ2 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ2 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Which alignment would you like to redo?', 'options': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'default': '', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Which alignment would you like to redo?', 'options': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'nPMMA@start'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@start'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[25,25,25]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 25.0 Y 25.0 ZZ1 25.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ2 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 25.0 Y 25.0 ZZ1 25.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ2 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ2 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ2 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Which alignment would you like to redo?', 'options': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'default': '', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Which alignment would you like to redo?', 'options': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'nPMMA@start'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@start'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[25,25,25]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 25.0 Y 25.0 ZZ1 25.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ2 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 25.0 Y 25.0 ZZ1 25.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ2 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled launcher {'subject': 'close'}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.importApparatus', None]}
Handled gui {'subject': 'target.apparatus.importApparatus', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.importApparatus', None]}, 'args': ['C:/Users/jhardin/Desktop/DemoFiles/DemoApparatus.json']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': [], 'midtime': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['PMMA'], 'midtime': 0, 'pressure': 50, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': [], 'midtime': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['PMMA'], 'midtime': 0, 'pressure': 50, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'type']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'type'], 'value': 'User_GUI'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'address']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'address'], 'value': 'gui'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'addresstype']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype'], 'value': 'zmqNode'}}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['camera', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['gantry', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['pump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': 7}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['system', 'System', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['system', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', ['User', 'sensor', 'guiconsol', 'consol']]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', None]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', False]}
Sent gui {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['User', 'Connect', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', 'e_reply']}, 'args': ['aeropump0', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['aeropump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}
Handled gui {'subject': 'target.apparatus.Connect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}, 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'pump', 'Ultimus', 'Nordson', 'A3200', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'pump', 'Ultimus', 'Nordson', 'pressure', 'PMMA'], 'midtime': 0, 'pressure': 50, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['User', 'sensor', 'guiconsol', 'consol']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'pump', 'Ultimus', 'Nordson', 'A3200', 'pressure'], 'midtime': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'pump', 'Ultimus', 'Nordson', 'pressure', 'PMMA'], 'midtime': 0, 'pressure': 50, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['User', 'sensor', 'guiconsol', 'consol']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'n'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'initial', 'desc': 'parameters used to generate toolpath'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to initial,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': ''}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to initial,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}
Handled procexec {'subject': 'target.apparatus.getSimulation', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': "What are simulation values for ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4']?", 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': "What are simulation values for ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': '[0,0,0,0,0,0]'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[0,0,0,0,0,0]']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[0,0,0,0,0,0]']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '[0,0,0,0,0,0]']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'nPMMA@mark', 'desc': 'parameters used to generate toolpath'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@mark']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': ''}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}
Handled procexec {'subject': 'target.apparatus.getSimulation', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': '[0,0,0]'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[0,0,0]']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[0,0,0]']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '[0,0,0]']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', [0.0, 0.0, 0.0]]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@mark'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'nPMMA@start', 'desc': 'parameters used to generate toolpath'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@start,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': ''}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@start,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}
Handled procexec {'subject': 'target.apparatus.getSimulation', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': '[0,0,0]'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[0,0,0]']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[0,0,0]']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '[0,0,0]']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', [0.0, 0.0, 0.0]]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'nPMMA@cal', 'desc': 'parameters used to generate toolpath'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@cal,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': ''}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@cal,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}
Handled procexec {'subject': 'target.apparatus.getSimulation', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': '[0,0,0]'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[0,0,0]']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[0,0,0]']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '[0,0,0]']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', [0.0, 0.0, 0.0]]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'camera@mark', 'desc': 'parameters used to generate toolpath'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ3': ''}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ3': ''}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'camera@mark']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to camera@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': ''}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to camera@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ3'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}
Handled procexec {'subject': 'target.apparatus.getSimulation', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': "What are simulation values for ['X', 'Y', 'ZZ3']?", 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': "What are simulation values for ['X', 'Y', 'ZZ3']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': '[0,0,0]'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[0,0,0]']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[0,0,0]']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '[0,0,0]']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', [0.0, 0.0, 0.0]]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'camera@mark'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nWould you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'n'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', {'Measured_List': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'list of measurements'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ3'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ3'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'camera', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', False]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', False]}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Would you like to use ink calibraton for PMMA?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated'], 'value': True}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Would you like to make a new file for PMMA?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 60]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 60]}, 'kwargs': {'infoAddress': ['information', 'ink calibration', 'time']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}, 'time': {'source': 'apparatus', 'address': ['information', 'ink calibration', 'time'], 'value': 60, 'desc': 'name of alignmentfile'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': ['motion']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': ['system']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'nPMMA@cal'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': ['devices', 'gantry', 'nPMMA', 'axismask'], 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['Z'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the initial weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': '10'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '10']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '10']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '10']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Is 10g the correct value?(y/n)', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Put slide in place and press ENTER.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': ''}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Put slide in place and press ENTER.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 50]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 50]}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pressure']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Set', {'pressure': 50}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', {'mid_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'time to allow things to settle'}, 'pumpon_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_On', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': 60}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', {'mid_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'time to allow things to settle'}, 'pumpoff_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Off', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the final weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': '11'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '11']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '11']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '11']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Is 11g the correct value?(y/n)', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {}, 'desc': 'parameters used to generate toolpath'}, 'generator': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator'], 'value': 'XlineTPGen', 'desc': 'name of generator'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': {}, 'desc': 'where to store the toolpath'}, 'dataArgs': {'source': 'apparatus', 'address': '', 'value': ['PMMA'], 'desc': 'arguments to make parameter structure'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Run', {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'desc': 'parameters used to generate toolpath'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'newfigure': {'source': 'apparatus', 'address': '', 'value': True, 'desc': 'Make a new figure?'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name'], 'value': 'Logs/1565223172image.png'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', {'toolpath': {'source': 'apparatus', 'address': '', 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'toolpath to be printed'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Start', {}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}]}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'initial'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', {'motion': {'source': 'apparatus', 'address': '', 'value': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, 'desc': 'motion to start'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}]}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': {'X': 0, 'Y': 0, 'Z': 0.8}, 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'nPMMA@start'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': ['devices', 'gantry', 'nPMMA', 'axismask'], 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['X', 'Y'], ['Z']], 'desc': 'order of operations for moving to a point'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.8}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}]}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'axismask': {'Z': 'ZZ1'}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'axismask': {'Z': 'ZZ1'}}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'axismask': {'Z': 'ZZ1'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}
Error handling procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'samplename']}}: Key not found: ['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'samplename']
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'initial'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0,0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@mark'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@start'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@cal'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'camera@mark'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ3'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ3']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ3']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 50}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': '', 'pumpon_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 60}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': '', 'pumpoff_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'Toolpath_Print', 'information': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}], ['->', '->', {'name': 'Start', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'StartofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['X', 'Y'], ['Z']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'nPMMA'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'axismask': {'Z': 'ZZ1'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'initial'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0,0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@mark'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@start'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@cal'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'camera@mark'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ3'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ3']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ3']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 50}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': '', 'pumpon_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 60}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': '', 'pumpoff_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'Toolpath_Print', 'information': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}], ['->', '->', {'name': 'Start', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'StartofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['X', 'Y'], ['Z']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'nPMMA'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'axismask': {'Z': 'ZZ1'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What filename?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'alignments.json', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': 'alignments.json'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'n'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', {'Measured_List': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'list of measurements'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ3'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ3'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'camera', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 60]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 60]}, 'kwargs': {'infoAddress': ['information', 'ink calibration', 'time']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}, 'time': {'source': 'apparatus', 'address': ['information', 'ink calibration', 'time'], 'value': 60, 'desc': 'name of alignmentfile'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': ['motion']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': ['system']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'nPMMA@cal'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': ['devices', 'gantry', 'nPMMA', 'axismask'], 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['Z'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the initial weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': '10'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '10']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '10']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '10']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Is 10g the correct value?(y/n)', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Put slide in place and press ENTER.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': ''}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Put slide in place and press ENTER.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 50]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 50]}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pressure']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Set', {'pressure': 50}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', {'mid_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'time to allow things to settle'}, 'pumpon_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_On', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': 60}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', {'mid_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'time to allow things to settle'}, 'pumpoff_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Off', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the final weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': '11'}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '11']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '11']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '11']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Is 11g the correct value?(y/n)', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'desc': 'parameters used to generate toolpath'}, 'generator': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator'], 'value': 'XlineTPGen', 'desc': 'name of generator'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'dataArgs': {'source': 'apparatus', 'address': '', 'value': ['PMMA'], 'desc': 'arguments to make parameter structure'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Run', {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'desc': 'parameters used to generate toolpath'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'newfigure': {'source': 'apparatus', 'address': '', 'value': True, 'desc': 'Make a new figure?'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name'], 'value': 'Logs/1565223783image.png'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', {'toolpath': {'source': 'apparatus', 'address': '', 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'toolpath to be printed'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Start', {}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}]}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'initial'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', {'motion': {'source': 'apparatus', 'address': '', 'value': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, 'desc': 'motion to start'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}]}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': {'X': 0, 'Y': 0, 'Z': 0.8}, 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'nPMMA@start'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': ['devices', 'gantry', 'nPMMA', 'axismask'], 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['X', 'Y'], ['Z']], 'desc': 'order of operations for moving to a point'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.8}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}]}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'axismask': {'Z': 'ZZ1'}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'axismask': {'Z': 'ZZ1'}}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'axismask': {'Z': 'ZZ1'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}
Error handling procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'samplename']}}: Key not found: ['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'samplename']
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'initial'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0,0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@mark'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@start'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@cal'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'camera@mark'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ3'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ3']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ3']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 50}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': '', 'pumpon_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 60}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': '', 'pumpoff_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'Toolpath_Print', 'information': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}], ['->', '->', {'name': 'Start', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'StartofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['X', 'Y'], ['Z']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'nPMMA'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'axismask': {'Z': 'ZZ1'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 50}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': '', 'pumpon_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 60}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': '', 'pumpoff_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'Toolpath_Print', 'information': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}], ['->', '->', {'name': 'Start', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'StartofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['X', 'Y'], ['Z']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'nPMMA'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'axismask': {'Z': 'ZZ1'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'initial'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0,0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@mark'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@start'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'nPMMA@cal'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ1'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Update', 'information': {'alignmentname': 'camera@mark'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {'axisList': ['X', 'Y', 'ZZ3'], 'target': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ3']?", 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': "What are simulation values for ['X', 'Y', 'ZZ3']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', {'name': 'User_Consol_Input', 'information': '[0,0,0]'}], ['->', '->', '->', {'name': 'Aerotech_A3200_getPosition', 'information': {}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 50}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': '', 'pumpon_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 60}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': '', 'pumpoff_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'Toolpath_Print', 'information': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}], ['->', '->', {'name': 'Start', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'StartofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['X', 'Y'], ['Z']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'nPMMA'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'axismask': {'Z': 'ZZ1'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 50}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': '', 'pumpon_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 60}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': '', 'pumpoff_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'Toolpath_Print', 'information': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}], ['->', '->', {'name': 'Start', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'StartofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['X', 'Y'], ['Z']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'nPMMA'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'axismask': {'Z': 'ZZ1'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What filename?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'alignments.json', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': 'alignments.json'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'n'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', {'Measured_List': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'list of measurements'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ3'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ3'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'camera', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 60]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 60]}, 'kwargs': {'infoAddress': ['information', 'ink calibration', 'time']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}, 'time': {'source': 'apparatus', 'address': ['information', 'ink calibration', 'time'], 'value': 60, 'desc': 'name of alignmentfile'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': ['motion']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': ['system']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'nPMMA@cal'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': ['devices', 'gantry', 'nPMMA', 'axismask'], 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['Z'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the initial weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': '10'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '10']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '10']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '10']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Is 10g the correct value?(y/n)', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Put slide in place and press ENTER.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': ''}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Put slide in place and press ENTER.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 50]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 50]}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pressure']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Set', {'pressure': 50}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', {'mid_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'time to allow things to settle'}, 'pumpon_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_On', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': 60}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', {'mid_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'time to allow things to settle'}, 'pumpoff_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Off', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the final weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': '11'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '11']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '11']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '11']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Is 11g the correct value?(y/n)', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'desc': 'parameters used to generate toolpath'}, 'generator': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator'], 'value': 'XlineTPGen', 'desc': 'name of generator'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'dataArgs': {'source': 'apparatus', 'address': '', 'value': ['PMMA'], 'desc': 'arguments to make parameter structure'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Run', {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'desc': 'parameters used to generate toolpath'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'newfigure': {'source': 'apparatus', 'address': '', 'value': True, 'desc': 'Make a new figure?'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name'], 'value': 'Logs/1565223924image.png'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', {'toolpath': {'source': 'apparatus', 'address': '', 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'toolpath to be printed'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Start', {}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}]}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'initial'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', {'motion': {'source': 'apparatus', 'address': '', 'value': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, 'desc': 'motion to start'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}]}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': {'X': 0, 'Y': 0, 'Z': 0.8}, 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'nPMMA@start'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': ['devices', 'gantry', 'nPMMA', 'axismask'], 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['X', 'Y'], ['Z']], 'desc': 'order of operations for moving to a point'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.8}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}]}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'axismask': {'Z': 'ZZ1'}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'axismask': {'Z': 'ZZ1'}}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'axismask': {'Z': 'ZZ1'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}
Error handling procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'samplename']}}: Key not found: ['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'samplename']
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.importApparatus', None]}
Handled gui {'subject': 'target.apparatus.importApparatus', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.importApparatus', None]}, 'args': ['C:/Users/jhardin/Desktop/DemoFiles/DemoApparatus.json']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': [], 'midtime': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['PMMA'], 'midtime': 0, 'pressure': 50, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': [], 'midtime': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['PMMA'], 'midtime': 0, 'pressure': 50, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'type']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'type'], 'value': 'User_GUI'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'address']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'address'], 'value': 'gui'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'addresstype']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype'], 'value': 'zmqNode'}}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['camera', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['sensor', 'motion', 'Aerotech', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['gantry', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['pump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': 7}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['system', 'System', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['system', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', ['consol', 'sensor', 'guiconsol', 'User']]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', None]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', False]}
Sent gui {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['User', 'Connect', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', 'e_reply']}, 'args': ['aeropump0', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['aeropump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}
Handled gui {'subject': 'target.apparatus.Connect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}, 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'Ultimus', 'Nordson', 'pressure', 'A3200', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'A3200', 'motion', 'sensor'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'PMMA', 'Ultimus', 'Nordson', 'pressure', 'pump'], 'midtime': 0, 'pressure': 50, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['consol', 'sensor', 'guiconsol', 'User']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'Ultimus', 'Nordson', 'pressure', 'A3200', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'A3200', 'motion', 'sensor'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'PMMA', 'Ultimus', 'Nordson', 'pressure', 'pump'], 'midtime': 0, 'pressure': 50, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['consol', 'sensor', 'guiconsol', 'User']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What filename?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'alignments.json', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': 'alignments.json'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'n'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', {'Measured_List': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'list of measurements'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ3'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ3'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'camera', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', False]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', False]}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Would you like to use ink calibraton for PMMA?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated'], 'value': True}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Would you like to make a new file for PMMA?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'n'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Would you like to make new measurement of PMMA?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'n'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calculate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calculate', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': ['motion']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'do_pumpcal']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'do_speedcal']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}
Error handling procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'density']}}: Key not found: ['information', 'materials', 'PMMA', 'density']
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}
Error handling procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}, 'kwargs': {'infoAddress': ['devices', 'nPMMA', 'trace_width']}}: Key not found: ['devices', 'nPMMA', 'trace_width']
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}
Error handling procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}, 'kwargs': {'infoAddress': ['devices', 'nPMMA', 'trace_height']}}: Key not found: ['devices', 'nPMMA', 'trace_height']
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}
Error handling procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pumpres_time']}}: Key not found: ['devices', 'pump0', 'pumpres_time']
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calculate', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_InkCal_Calculate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_InkCal_Calculate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'materials', 'PMMA', 'density']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'Ultimus', 'Nordson', 'pressure', 'A3200', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'A3200', 'motion', 'sensor'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'PMMA', 'Ultimus', 'Nordson', 'pressure', 'pump'], 'midtime': 0, 'pressure': 50, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['consol', 'sensor', 'guiconsol', 'User']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'Ultimus', 'Nordson', 'pressure', 'A3200', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'A3200', 'motion', 'sensor'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'PMMA', 'Ultimus', 'Nordson', 'pressure', 'pump'], 'midtime': 0, 'pressure': 50, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['consol', 'sensor', 'guiconsol', 'User']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': True, 'do_pumpcal': True, 'do_speedcal': True, 'density': {}}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': 'alignments.json'}, 'User_Consol_InputOptions': {'result': 'n'}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': {}}, 'Toolpath_Generate': {'toolpath': {}, 'parameters': {}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': True, 'do_pumpcal': True, 'do_speedcal': True, 'density': {}}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': 'alignments.json'}, 'User_Consol_InputOptions': {'result': 'n'}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': {}}, 'Toolpath_Generate': {'toolpath': {}, 'parameters': {}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'density'], 'value': 1}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What filename?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'alignments.json', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': 'alignments.json'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'n'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', {'Measured_List': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'list of measurements'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ3'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ3'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'camera', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 60]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 60]}, 'kwargs': {'infoAddress': ['information', 'ink calibration', 'time']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}, 'time': {'source': 'apparatus', 'address': ['information', 'ink calibration', 'time'], 'value': 60, 'desc': 'name of alignmentfile'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': ['motion']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': ['system']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'nPMMA@cal'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': ['devices', 'gantry', 'nPMMA', 'axismask'], 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['Z'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the initial weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'Ultimus', 'Nordson', 'pressure', 'A3200', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'A3200', 'motion', 'sensor'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'PMMA', 'Ultimus', 'Nordson', 'pressure', 'pump'], 'midtime': 0, 'pressure': 50, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['consol', 'sensor', 'guiconsol', 'User']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'Ultimus', 'Nordson', 'pressure', 'A3200', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'A3200', 'motion', 'sensor'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'PMMA', 'Ultimus', 'Nordson', 'pressure', 'pump'], 'midtime': 0, 'pressure': 50, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['consol', 'sensor', 'guiconsol', 'User']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': True, 'do_pumpcal': True, 'do_speedcal': True, 'density': 1}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': 'alignments.json'}, 'User_Consol_InputOptions': {'result': 'n'}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': {}}, 'Toolpath_Generate': {'toolpath': {}, 'parameters': {}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': True, 'do_pumpcal': True, 'do_speedcal': True, 'density': 1}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': 'alignments.json'}, 'User_Consol_InputOptions': {'result': 'n'}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': {}}, 'Toolpath_Generate': {'toolpath': {}, 'parameters': {}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_InkCal_Calculate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_InkCal_Calculate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'Ultimus', 'Nordson', 'pressure', 'A3200', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'A3200', 'motion', 'sensor'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'PMMA', 'Ultimus', 'Nordson', 'pressure', 'pump'], 'midtime': 0, 'pressure': 50, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['consol', 'sensor', 'guiconsol', 'User']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'Ultimus', 'Nordson', 'pressure', 'A3200', 'pump'], 'midtime': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'A3200', 'motion', 'sensor'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'PMMA', 'Ultimus', 'Nordson', 'pressure', 'pump'], 'midtime': 0, 'pressure': 50, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['consol', 'sensor', 'guiconsol', 'User']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': True, 'do_pumpcal': True, 'do_speedcal': True, 'density': 1}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': 'alignments.json'}, 'User_Consol_InputOptions': {'result': 'n'}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': {}}, 'Toolpath_Generate': {'toolpath': {}, 'parameters': {}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': True, 'do_pumpcal': True, 'do_speedcal': True, 'density': 1}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': 'alignments.json'}, 'User_Consol_InputOptions': {'result': 'n'}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': {}}, 'Toolpath_Generate': {'toolpath': {}, 'parameters': {}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_InkCal_Calculate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', '->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', '->', '->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_InkCal_Calculate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', '->', '->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', '->', '->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled launcher {'subject': 'close'}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Handled launcher {'subject': 'close'}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.importApparatus', None]}
Handled gui {'subject': 'target.apparatus.importApparatus', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.importApparatus', None]}, 'args': ['C:/Users/jhardin/Desktop/DemoFiles/DemoApparatus.json']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': [], 'midtime': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['PMMA'], 'midtime': 0, 'pressure': 50, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': [], 'midtime': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': ''}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['PMMA'], 'midtime': 0, 'pressure': 50, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'type']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'type'], 'value': 'User_GUI'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'address']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'address'], 'value': 'gui'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'addresstype']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype'], 'value': 'zmqNode'}}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['camera', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['sensor', 'Aerotech', 'A3200', 'motion']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['gantry', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['pump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': 7}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['system', 'System', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['system', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', ['consol', 'User', 'guiconsol', 'sensor']]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', None]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', False]}
Sent gui {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['User', 'Connect', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', 'e_reply']}, 'args': ['aeropump0', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['aeropump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}
Handled gui {'subject': 'target.apparatus.Connect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}, 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pump', 'Ultimus', 'UltimusV', 'pressure', 'A3200'], 'midtime': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['A3200', 'Aerotech', 'sensor', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pump', 'Ultimus', 'UltimusV', 'pressure', 'PMMA'], 'midtime': 0, 'pressure': 50, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['consol', 'User', 'guiconsol', 'sensor']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pump', 'Ultimus', 'UltimusV', 'pressure', 'A3200'], 'midtime': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['A3200', 'Aerotech', 'sensor', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pump', 'Ultimus', 'UltimusV', 'pressure', 'PMMA'], 'midtime': 0, 'pressure': 50, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['consol', 'User', 'guiconsol', 'sensor']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What filename?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'alignments.json', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': 'alignments.json'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'n'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', {'Measured_List': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'list of measurements'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ3'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ3'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'camera', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', False]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', False]}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Would you like to use ink calibraton for PMMA?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated'], 'value': True}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Would you like to make a new file for PMMA?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'n'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Would you like to make new measurement of PMMA?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'n'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calculate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calculate', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': ['motion']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'do_pumpcal']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'do_speedcal']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}
Error handling procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'density']}}: Key not found: ['information', 'materials', 'PMMA', 'density']
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}
Error handling procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}, 'kwargs': {'infoAddress': ['devices', 'nPMMA', 'tracewidth']}}: Key not found: ['devices', 'nPMMA', 'tracewidth']
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}
Error handling procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}, 'kwargs': {'infoAddress': ['devices', 'nPMMA', 'traceheight']}}: Key not found: ['devices', 'nPMMA', 'traceheight']
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 0]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 0]}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pumprestime']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calculate', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_InkCal_Calculate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_InkCal_Calculate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'end']}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'camera', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'User', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Disconnect_All', None]}
Handled gui {'subject': 'target.apparatus.Disconnect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Disconnect_All', None]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pump', 'Ultimus', 'UltimusV', 'pressure', 'A3200'], 'midtime': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': False, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': False, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['A3200', 'Aerotech', 'sensor', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': False}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pump', 'Ultimus', 'UltimusV', 'pressure', 'PMMA'], 'midtime': 0, 'pressure': 50, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': False}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': False, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': False, 'descriptors': ['consol', 'User', 'guiconsol', 'sensor']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pump', 'Ultimus', 'UltimusV', 'pressure', 'A3200'], 'midtime': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': False, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': False, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['A3200', 'Aerotech', 'sensor', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': False}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pump', 'Ultimus', 'UltimusV', 'pressure', 'PMMA'], 'midtime': 0, 'pressure': 50, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': False}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': False, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': False, 'descriptors': ['consol', 'User', 'guiconsol', 'sensor']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': True, 'do_pumpcal': True, 'do_speedcal': True}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': 'alignments.json'}, 'User_Consol_InputOptions': {'result': 'n'}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': {}}, 'Toolpath_Generate': {'toolpath': {}, 'parameters': {}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': True, 'do_pumpcal': True, 'do_speedcal': True}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': 'alignments.json'}, 'User_Consol_InputOptions': {'result': 'n'}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': {}}, 'Toolpath_Generate': {'toolpath': {}, 'parameters': {}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_InkCal_Calculate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_camera_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_User_Disconnect', 'information': {}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_InkCal_Calculate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_camera_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_User_Disconnect', 'information': {}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'nPMMA', 'TraceHeight'], 'value': 1}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'nPMMA', 'TraceWidth'], 'value': 1}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'materials', 'density']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pump', 'Ultimus', 'UltimusV', 'pressure', 'A3200'], 'midtime': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': False, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': False, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['A3200', 'Aerotech', 'sensor', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': False}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': 1, 'TraceWidth': 1, 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pump', 'Ultimus', 'UltimusV', 'pressure', 'PMMA'], 'midtime': 0, 'pressure': 50, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': False}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': False, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': False, 'descriptors': ['consol', 'User', 'guiconsol', 'sensor']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pump', 'Ultimus', 'UltimusV', 'pressure', 'A3200'], 'midtime': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': False, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': False, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['A3200', 'Aerotech', 'sensor', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': False}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': 1, 'TraceWidth': 1, 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pump', 'Ultimus', 'UltimusV', 'pressure', 'PMMA'], 'midtime': 0, 'pressure': 50, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': False}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': False, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': False, 'descriptors': ['consol', 'User', 'guiconsol', 'sensor']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': True, 'do_pumpcal': True, 'do_speedcal': True}, 'density': {}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': 'alignments.json'}, 'User_Consol_InputOptions': {'result': 'n'}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': {}}, 'Toolpath_Generate': {'toolpath': {}, 'parameters': {}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': True, 'do_pumpcal': True, 'do_speedcal': True}, 'density': {}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': 'alignments.json'}, 'User_Consol_InputOptions': {'result': 'n'}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': {}}, 'Toolpath_Generate': {'toolpath': {}, 'parameters': {}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'materials', 'PMMA', 'density']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pump', 'Ultimus', 'UltimusV', 'pressure', 'A3200'], 'midtime': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': False, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': False, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['A3200', 'Aerotech', 'sensor', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': False}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': 1, 'TraceWidth': 1, 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pump', 'Ultimus', 'UltimusV', 'pressure', 'PMMA'], 'midtime': 0, 'pressure': 50, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': False}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': False, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': False, 'descriptors': ['consol', 'User', 'guiconsol', 'sensor']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pump', 'Ultimus', 'UltimusV', 'pressure', 'A3200'], 'midtime': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': False, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': False, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['A3200', 'Aerotech', 'sensor', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': False}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': 1, 'TraceWidth': 1, 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'pump', 'Ultimus', 'UltimusV', 'pressure', 'PMMA'], 'midtime': 0, 'pressure': 50, 'pumpofftime': 0, 'pumpontime': 0, 'pumprestime': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': False}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': False, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': False, 'descriptors': ['consol', 'User', 'guiconsol', 'sensor']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': True, 'do_pumpcal': True, 'do_speedcal': True, 'density': {}}, 'density': {}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': 'alignments.json'}, 'User_Consol_InputOptions': {'result': 'n'}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': {}}, 'Toolpath_Generate': {'toolpath': {}, 'parameters': {}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': True, 'do_pumpcal': True, 'do_speedcal': True, 'density': {}}, 'density': {}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': 'alignments.json'}, 'User_Consol_InputOptions': {'result': 'n'}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': {}}, 'Toolpath_Generate': {'toolpath': {}, 'parameters': {}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'density'], 'value': 1}}
Handled gui {'subject': 'target.apparatus.logApparatus', 'args': ['C:/Users/jhardin/Desktop/DemoFiles/DemoApparatus2.json']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 60]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 60]}, 'kwargs': {'infoAddress': ['information', 'ink calibration', 'time']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}, 'time': {'source': 'apparatus', 'address': ['information', 'ink calibration', 'time'], 'value': 60, 'desc': 'name of alignmentfile'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': ['motion']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': ['system']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'nPMMA@cal'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': ['devices', 'gantry', 'nPMMA', 'axismask'], 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['Z'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the initial weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': '10'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '10']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '10']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '10']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Is 10g the correct value?(y/n)', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Put slide in place and press ENTER.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': ''}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Put slide in place and press ENTER.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 50]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 50]}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pressure']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Set', {'pressure': 50}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', {'mid_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'time to allow things to settle'}, 'pumpon_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_On', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': 60}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', {'mid_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'time to allow things to settle'}, 'pumpoff_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Off', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the final weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': '11'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '11']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '11']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '11']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Is 11g the correct value?(y/n)', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_InkCal_Calculate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_camera_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_User_Disconnect', 'information': {}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 50}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': '', 'pumpon_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 60}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': '', 'pumpoff_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_InkCal_Calculate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_camera_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_User_Disconnect', 'information': {}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 50}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': '', 'pumpon_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 60}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': '', 'pumpoff_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}]]]}, 'kwargs': {'address': ['proclog']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What filename?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'alignments.json', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': 'alignments.json'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'n'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', {'Measured_List': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'list of measurements'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ3'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ3'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'camera', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 60]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 60]}, 'kwargs': {'infoAddress': ['information', 'ink calibration', 'time']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}, 'time': {'source': 'apparatus', 'address': ['information', 'ink calibration', 'time'], 'value': 60, 'desc': 'name of alignmentfile'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': ['motion']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': ['system']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'nPMMA@cal'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': ['devices', 'gantry', 'nPMMA', 'axismask'], 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['Z'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the initial weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': '10'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '10']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '10']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '10']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Is 10g the correct value?(y/n)', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Put slide in place and press ENTER.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': '11'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '11']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '11']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '11']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 50]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 50]}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pressure']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Set', {'pressure': 50}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', {'mid_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'time to allow things to settle'}, 'pumpon_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_On', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': 60}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', {'mid_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'time to allow things to settle'}, 'pumpoff_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Off', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the final weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': '11'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '11']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '11']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '11']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Is 11g the correct value?(y/n)', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {}, 'desc': 'parameters used to generate toolpath'}, 'generator': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator'], 'value': 'XlineTPGen', 'desc': 'name of generator'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': {}, 'desc': 'where to store the toolpath'}, 'dataArgs': {'source': 'apparatus', 'address': '', 'value': ['PMMA'], 'desc': 'arguments to make parameter structure'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Run', {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'desc': 'parameters used to generate toolpath'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'newfigure': {'source': 'apparatus', 'address': '', 'value': True, 'desc': 'Make a new figure?'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name'], 'value': 'Logs/1565225078image.png'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', {'toolpath': {'source': 'apparatus', 'address': '', 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'toolpath to be printed'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Start', {}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['A3200', 'Aerotech', 'sensor', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': False}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['A3200', 'Aerotech', 'sensor', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': False}]}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'initial'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', {'motion': {'source': 'apparatus', 'address': '', 'value': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, 'desc': 'motion to start'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['A3200', 'Aerotech', 'sensor', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': False}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['A3200', 'Aerotech', 'sensor', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': False}]}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': {'X': 0, 'Y': 0, 'Z': 0.8}, 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'nPMMA@start'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': ['devices', 'gantry', 'nPMMA', 'axismask'], 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['X', 'Y'], ['Z']], 'desc': 'order of operations for moving to a point'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.8}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['A3200', 'Aerotech', 'sensor', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': False}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['A3200', 'Aerotech', 'sensor', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': False}]}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'axismask': {'Z': 'ZZ1'}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'axismask': {'Z': 'ZZ1'}}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'axismask': {'Z': 'ZZ1'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 50]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 50]}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pressure']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Set', {'pressure': 50}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}
Error handling procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'mid_time']}}: Key not found: ['devices', 'pump0', 'mid_time']
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}
Error handling procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pumpon_time']}}: Key not found: ['devices', 'pump0', 'pumpon_time']
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', {'mid_time': {'source': 'apparatus', 'address': ['devices', 'pump0', 'mid_time'], 'value': None, 'desc': 'time to allow things to settle'}, 'pumpon_time': {'source': 'apparatus', 'address': ['devices', 'pump0', 'pumpon_time'], 'value': None, 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': None}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_On', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': None}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}
Error handling procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'speed']}}: Key not found: ['devices', 'gantry', 'nPMMA', 'speed']
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelLinearMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelLinearMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': {'X': 5, 'Y': 0, 'Z': 0.8}, 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': '', 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'axismask': {'source': 'apparatus', 'address': '', 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'speed': {'source': 'apparatus', 'address': '', 'value': None, 'desc': 'order of operations for moving to a point'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelLinearMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 5.0, 'Y': 0.0, 'ZZ1': 0.8}, 'speed': None}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelLinearMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelLinearMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', {'motion': {'source': 'apparatus', 'address': '', 'value': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, 'desc': 'motion to start'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'ZZ1': 0.0}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'ZZ1': 0.0}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'safeZZ1']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_InkCal_Calculate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_camera_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_User_Disconnect', 'information': {}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 50}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': '', 'pumpon_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 60}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': '', 'pumpoff_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 50}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': '', 'pumpon_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 60}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': '', 'pumpoff_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'Toolpath_Print', 'information': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}], ['->', '->', {'name': 'Start', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'StartofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['X', 'Y'], ['Z']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'nPMMA'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'axismask': {'Z': 'ZZ1'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 50}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': "<class 'dict'>", 'pumpon_time': "<class 'dict'>", 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': "<class 'NoneType'>"}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': "<class 'NoneType'>"}}], ['->', '->', {'name': 'Motion_RefRelLinearMotion', 'information': {'relpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'axismask': {'Z': 'ZZ1'}, 'speed': "<class 'dict'>"}}], ['->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 5.0, 'Y': 0.0, 'ZZ1': 0.8}, 'speed': "<class 'NoneType'>"}}], ['->', '->', {'name': 'EndofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_InkCal_Calculate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_camera_Disconnect', 'information': {}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_User_Disconnect', 'information': {}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 50}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': '', 'pumpon_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 60}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': '', 'pumpoff_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 50}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': '', 'pumpon_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 60}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': '', 'pumpoff_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'Toolpath_Print', 'information': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}], ['->', '->', {'name': 'Start', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'StartofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['X', 'Y'], ['Z']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'nPMMA'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'axismask': {'Z': 'ZZ1'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 50}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': "<class 'dict'>", 'pumpon_time': "<class 'dict'>", 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': "<class 'NoneType'>"}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': "<class 'NoneType'>"}}], ['->', '->', {'name': 'Motion_RefRelLinearMotion', 'information': {'relpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'axismask': {'Z': 'ZZ1'}, 'speed': "<class 'dict'>"}}], ['->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 5.0, 'Y': 0.0, 'ZZ1': 0.8}, 'speed': "<class 'NoneType'>"}}], ['->', '->', {'name': 'EndofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', 'end']}
Handled launcher {'subject': 'close'}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Disconnect_All', None]}
Handled gui {'subject': 'target.apparatus.Disconnect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Disconnect_All', None]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.applyTemplate', None]}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.applyTemplate', None]}, 'kwargs': {'args': [[{'PMMA': ''}, {'ZZ1': ''}], []], 'kwargs': {}}, 'args': ['FlexPrinterGUI']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': ''}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': ''}}, 'nZZ1': {'axismask': {'Z': ''}}, 'nZZ1slide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': ''}}}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA']}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide']}, 'nZZ1': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'ZZ1']}, 'nZZ1slide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'ZZ1slide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'pump1': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump1': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump1', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': ''}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': ''}}, 'nZZ1': {'axismask': {'Z': ''}}, 'nZZ1slide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': ''}}}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA']}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide']}, 'nZZ1': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'ZZ1']}, 'nZZ1slide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'ZZ1slide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'pump1': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump1': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump1', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}, 'ZZ1': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', '': ''}, 'nPMMA@start': {'X': '', 'Y': '', '': ''}, 'nPMMA@cal': {'X': '', 'Y': '', '': ''}, 'nZZ1@mark': {'X': '', 'Y': '', '': ''}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'nZZ1@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}, 'ZZ1': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', '': ''}, 'nPMMA@start': {'X': '', 'Y': '', '': ''}, 'nPMMA@cal': {'X': '', 'Y': '', '': ''}, 'nZZ1@mark': {'X': '', 'Y': '', '': ''}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'nZZ1@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'pump1', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'aeropump1', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Disconnect_All', None]}
Handled gui {'subject': 'target.apparatus.Disconnect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Disconnect_All', None]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.applyTemplate', None]}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.applyTemplate', None]}, 'kwargs': {'args': [[{'PMMA': 'ZZ1'}], [{'name': 'camera', 'axis': 'ZZ3', 'type': 'IDS_ueye'}]], 'kwargs': {}}, 'args': ['FlexPrinterGUI']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA']}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'camera': {'type': 'IDS_ueye', 'addresstype': 'zmqNode', 'address': 'procexec', 'settle_time': 5}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA']}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'camera': {'type': 'IDS_ueye', 'addresstype': 'zmqNode', 'address': 'procexec', 'settle_time': 5}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump1_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump1_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump1_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump1_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA']}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'camera': {'type': 'IDS_ueye', 'addresstype': 'zmqNode', 'address': 'procexec', 'settle_time': 5}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}}, 'nPMMA': {'ID': '', 'OD': '', 'TraceHeight': '', 'TraceWidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA']}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'camera': {'type': 'IDS_ueye', 'addresstype': 'zmqNode', 'address': 'procexec', 'settle_time': 5}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump1_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump1_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump1_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump1_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled launcher {'subject': 'close'}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Disconnect_All', None]}
Handled gui {'subject': 'target.apparatus.Disconnect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Disconnect_All', None]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.applyTemplate', None]}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.applyTemplate', None]}, 'kwargs': {'args': [[{'PMMA': 'ZZ1'}], [{'name': 'camera', 'axis': 'ZZ3', 'type': 'IDS_ueye'}]], 'kwargs': {}}, 'args': ['FlexPrinterGUI']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}}, 'nPMMA': {'ID': '', 'OD': '', 'traceheight': '', 'tracewidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA']}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'camera': {'type': 'IDS_ueye', 'addresstype': 'zmqNode', 'address': 'procexec', 'settle_time': 5}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}}, 'nPMMA': {'ID': '', 'OD': '', 'traceheight': '', 'tracewidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA']}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'camera': {'type': 'IDS_ueye', 'addresstype': 'zmqNode', 'address': 'procexec', 'settle_time': 5}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}}, 'nPMMA': {'ID': '', 'OD': '', 'traceheight': '', 'tracewidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA']}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'camera': {'type': 'IDS_ueye', 'addresstype': 'zmqNode', 'address': 'procexec', 'settle_time': 5}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}}, 'nPMMA': {'ID': '', 'OD': '', 'traceheight': '', 'tracewidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA']}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'camera': {'type': 'IDS_ueye', 'addresstype': 'zmqNode', 'address': 'procexec', 'settle_time': 5}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Handled launcher {'subject': 'close'}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Disconnect_All', None]}
Handled gui {'subject': 'target.apparatus.Disconnect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Disconnect_All', None]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.applyTemplate', None]}
Handled gui {'subject': 'target.apparatus.applyTemplate', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.applyTemplate', None]}, 'kwargs': {'args': [[{'PMMA': 'ZZ1'}], [{'name': 'camera', 'axis': 'ZZ3', 'type': 'IDS_ueye'}]], 'kwargs': {}}, 'args': ['FlexPrinterGUI']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}}, 'nPMMA': {'ID': '', 'OD': '', 'traceheight': '', 'tracewidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA']}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'camera': {'type': 'IDS_ueye', 'addresstype': 'zmqNode', 'address': 'procexec', 'settle_time': 5}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}}, 'nPMMA': {'ID': '', 'OD': '', 'traceheight': '', 'tracewidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA']}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': '', 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'camera': {'type': 'IDS_ueye', 'addresstype': 'zmqNode', 'address': 'procexec', 'settle_time': 5}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'COM'], 'value': 7}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pressure'], 'value': 10}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'descriptors'], 'value': ['PMMA']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'materials', 'PMMA', 'density']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}}, 'nPMMA': {'ID': '', 'OD': '', 'traceheight': '', 'tracewidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA']}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': 7, 'pressure': 10, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': ['PMMA'], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'camera': {'type': 'IDS_ueye', 'addresstype': 'zmqNode', 'address': 'procexec', 'settle_time': 5}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}}, 'nPMMA': {'ID': '', 'OD': '', 'traceheight': '', 'tracewidth': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA']}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide']}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': 7, 'pressure': 10, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': ['PMMA'], 'address': 'procexec'}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': [], 'address': 'procexec'}, 'camera': {'type': 'IDS_ueye', 'addresstype': 'zmqNode', 'address': 'procexec', 'settle_time': 5}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True, 'density': {}}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True, 'density': {}}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'density'], 'value': 1}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'nPMMA', 'traceheight'], 'value': 1}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'nPMMA', 'tracewidth'], 'value': 1}}
Handled gui {'subject': 'target.apparatus.logApparatus', 'args': ['C:/Users/jhardin/Desktop/DemoFiles/DemoApparatus.json']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'No devices met requirments']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'No devices met requirments']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}
Error handling procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}, 'kwargs': {'infoAddress': ['devices', 'No devices met requirments', 'addresstype']}}: Key not found: ['devices', 'No devices met requirments', 'addresstype']
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y'}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y'}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'type']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'type'], 'value': 'User_GUI'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'address']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'address'], 'value': 'gui'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'addresstype']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype'], 'value': 'zmqNode'}}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['Aerotech', 'A3200', 'sensor', 'motion']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['gantry', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['pump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': 7}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['camera', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['system', 'System', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['system', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', ['consol', 'User', 'sensor', 'guiconsol']]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', None]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', False]}
Sent gui {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['User', 'Connect', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', 'e_reply']}, 'args': ['aeropump0', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['aeropump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}
Handled gui {'subject': 'target.apparatus.Connect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}, 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'traceheight': 1, 'tracewidth': 1, 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': 7, 'pressure': 10, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'pump', 'PMMA', 'Nordson', 'Ultimus', 'pressure'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'A3200', 'pump', 'Nordson', 'Ultimus', 'pressure'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'type': 'IDS_ueye', 'addresstype': 'zmqNode', 'address': 'procexec', 'settle_time': 5, 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['consol', 'User', 'sensor', 'guiconsol']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'traceheight': 1, 'tracewidth': 1, 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': 7, 'pressure': 10, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'pump', 'PMMA', 'Nordson', 'Ultimus', 'pressure'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'A3200', 'pump', 'Nordson', 'Ultimus', 'pressure'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'type': 'IDS_ueye', 'addresstype': 'zmqNode', 'address': 'procexec', 'settle_time': 5, 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['consol', 'User', 'sensor', 'guiconsol']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True, 'density': 1}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': {}}, 'Toolpath_Generate': {'toolpath': {}, 'parameters': {}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': False, 'do_pumpcal': True, 'do_speedcal': True, 'density': 1}}, 'alignments': {'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': {}}, 'Toolpath_Generate': {'toolpath': {}, 'parameters': {}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y'}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y'}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What filename?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'alignments.json', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': 'alignments.json'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'n'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', {'Measured_List': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'list of measurements'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ3'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ3'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'camera', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y'}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y'}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', False]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', False]}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Would you like to use ink calibraton for PMMA?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated'], 'value': True}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Would you like to make a new file for PMMA?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 60]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 60]}, 'kwargs': {'infoAddress': ['information', 'ink calibration', 'time']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}, 'time': {'source': 'apparatus', 'address': ['information', 'ink calibration', 'time'], 'value': 60, 'desc': 'name of alignmentfile'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': ['motion']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': ['system']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'nPMMA@cal'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': ['devices', 'gantry', 'nPMMA', 'axismask'], 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['Z'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the initial weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': '10'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '10']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '10']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '10']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Is 10g the correct value?(y/n)', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Put slide in place and press ENTER.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': ''}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Put slide in place and press ENTER.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 10]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 10]}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pressure']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Set', {'pressure': 10}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', {'mid_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'time to allow things to settle'}, 'pumpon_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_On', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': 60}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', {'mid_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'time to allow things to settle'}, 'pumpoff_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Off', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the final weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': '11'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '11']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '11']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '11']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Is 11g the correct value?(y/n)', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y'}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 10}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': '', 'pumpon_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 60}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': '', 'pumpoff_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y'}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 10}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': '', 'pumpon_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 60}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': '', 'pumpoff_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}]]]}, 'kwargs': {'address': ['proclog']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {}, 'desc': 'parameters used to generate toolpath'}, 'generator': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator'], 'value': 'XlineTPGen', 'desc': 'name of generator'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': {}, 'desc': 'where to store the toolpath'}, 'dataArgs': {'source': 'apparatus', 'address': '', 'value': ['PMMA'], 'desc': 'arguments to make parameter structure'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Run', {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'desc': 'parameters used to generate toolpath'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'newfigure': {'source': 'apparatus', 'address': '', 'value': True, 'desc': 'Make a new figure?'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name'], 'value': 'Logs/1565229214image.png'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y'}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 10}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': '', 'pumpon_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 60}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': '', 'pumpoff_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y'}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 10}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': '', 'pumpon_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 60}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': '', 'pumpoff_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'traceheight': 1, 'tracewidth': 1, 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': 7, 'pressure': 10, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'pump', 'PMMA', 'Nordson', 'Ultimus', 'pressure'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'A3200', 'pump', 'Nordson', 'Ultimus', 'pressure'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'type': 'IDS_ueye', 'addresstype': 'zmqNode', 'address': 'procexec', 'settle_time': 5, 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['consol', 'User', 'sensor', 'guiconsol']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'traceheight': 1, 'tracewidth': 1, 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': 7, 'pressure': 10, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'pump', 'PMMA', 'Nordson', 'Ultimus', 'pressure'], 'address': 'procexec', 'Connected': True}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'A3200', 'pump', 'Nordson', 'Ultimus', 'pressure'], 'address': 'procexec', 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'type': 'IDS_ueye', 'addresstype': 'zmqNode', 'address': 'procexec', 'settle_time': 5, 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['consol', 'User', 'sensor', 'guiconsol']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': True, 'do_pumpcal': True, 'do_speedcal': True, 'density': 1}}, 'alignments': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': '11'}, 'User_Consol_InputOptions': {'result': 'y'}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': 'Logs/1565229214image.png'}, 'Toolpath_Generate': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': True, 'do_pumpcal': True, 'do_speedcal': True, 'density': 1}}, 'alignments': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': '11'}, 'User_Consol_InputOptions': {'result': 'y'}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': 'Logs/1565229214image.png'}, 'Toolpath_Generate': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y'}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 10}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': '', 'pumpon_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 60}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': '', 'pumpoff_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y'}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 10}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': '', 'pumpon_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 60}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': '', 'pumpoff_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', {'toolpath': {'source': 'apparatus', 'address': '', 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'toolpath to be printed'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Start', {}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}]}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'initial'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', {'motion': {'source': 'apparatus', 'address': '', 'value': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, 'desc': 'motion to start'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}]}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': {'X': 0, 'Y': 0, 'Z': 0.8}, 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'nPMMA@start'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': ['devices', 'gantry', 'nPMMA', 'axismask'], 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['X', 'Y'], ['Z']], 'desc': 'order of operations for moving to a point'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.8}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}]}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'MotionRamp']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'MaxAccel']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 10]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 10]}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pressure']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Set', {'pressure': 10}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 0]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 0]}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'mid_time']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 0]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 0]}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pumpon_time']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', {'mid_time': {'source': 'apparatus', 'address': ['devices', 'pump0', 'mid_time'], 'value': 0, 'desc': 'time to allow things to settle'}, 'pumpon_time': {'source': 'apparatus', 'address': ['devices', 'pump0', 'pumpon_time'], 'value': 0, 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': 0}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_On', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': 0}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'speed']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelLinearMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelLinearMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': {'X': 5, 'Y': 0, 'Z': 0.8}, 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': '', 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'axismask': {'source': 'apparatus', 'address': '', 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'speed': {'source': 'apparatus', 'address': '', 'value': 40, 'desc': 'order of operations for moving to a point'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelLinearMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 5.0, 'Y': 0.0, 'ZZ1': 0.8}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelLinearMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelLinearMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', {'motion': {'source': 'apparatus', 'address': '', 'value': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, 'desc': 'motion to start'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'ZZ1': 0.0}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'ZZ1': 0.0}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'safeZZ1']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 0]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 0]}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'mid_time']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 0]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 0]}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pumpoff_time']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', {'mid_time': {'source': 'apparatus', 'address': ['devices', 'pump0', 'mid_time'], 'value': 0, 'desc': 'time to allow things to settle'}, 'pumpoff_time': {'source': 'apparatus', 'address': ['devices', 'pump0', 'pumpoff_time'], 'value': 0, 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': 0}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Off', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': 0}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}]}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['End', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['End', {}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}]}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'initial'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y'}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 10}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': '', 'pumpon_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 60}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': '', 'pumpoff_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'Toolpath_Print', 'information': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}], ['->', '->', {'name': 'Start', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'StartofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['X', 'Y'], ['Z']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'nPMMA'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 10}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': 0, 'pumpon_time': 0, 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', {'name': 'Motion_RefRelLinearMotion', 'information': {'relpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 5.0, 'Y': 0.0, 'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', {'name': 'EndofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': 0, 'pumpoff_time': 0, 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'End', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y'}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 10}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': '', 'pumpon_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 60}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': '', 'pumpoff_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'Toolpath_Print', 'information': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}], ['->', '->', {'name': 'Start', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'StartofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['X', 'Y'], ['Z']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'nPMMA'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 10}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': 0, 'pumpon_time': 0, 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', {'name': 'Motion_RefRelLinearMotion', 'information': {'relpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 5.0, 'Y': 0.0, 'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', {'name': 'EndofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': 0, 'pumpoff_time': 0, 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'End', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['End', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['End', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['End', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', 'end']}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'camera', 'procedure': 'Measure', 'details': {'file': 'test.png'}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.DoEproc', None]}
Handled procexec {'subject': 'target.apparatus.DoEproc', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.DoEproc', None]}, 'args': ['camera', 'Measure', {'file': 'test.png'}]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y'}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 10}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': '', 'pumpon_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 60}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': '', 'pumpoff_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'Toolpath_Print', 'information': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}], ['->', '->', {'name': 'Start', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'StartofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['X', 'Y'], ['Z']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'nPMMA'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 10}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': 0, 'pumpon_time': 0, 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', {'name': 'Motion_RefRelLinearMotion', 'information': {'relpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 5.0, 'Y': 0.0, 'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', {'name': 'EndofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': 0, 'pumpoff_time': 0, 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'End', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', {'name': 'eproc_camera_Measure', 'information': {'file': 'test.png'}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y'}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 10}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': '', 'pumpon_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 60}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': '', 'pumpoff_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'Toolpath_Print', 'information': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}], ['->', '->', {'name': 'Start', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'StartofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['X', 'Y'], ['Z']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'nPMMA'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 10}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': 0, 'pumpon_time': 0, 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', {'name': 'Motion_RefRelLinearMotion', 'information': {'relpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 5.0, 'Y': 0.0, 'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', {'name': 'EndofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': 0, 'pumpoff_time': 0, 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'End', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', {'name': 'eproc_camera_Measure', 'information': {'file': 'test.png'}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What filename?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'alignments.json', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': 'alignments.json'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'n'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', {'Measured_List': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'list of measurements'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ3'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ3'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'camera', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 60]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 60]}, 'kwargs': {'infoAddress': ['information', 'ink calibration', 'time']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}, 'time': {'source': 'apparatus', 'address': ['information', 'ink calibration', 'time'], 'value': 60, 'desc': 'name of alignmentfile'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': ['motion']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': ['system']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'nPMMA@cal'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': ['devices', 'gantry', 'nPMMA', 'axismask'], 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['Z'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the initial weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': '10'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '10']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '10']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '10']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Is 10g the correct value?(y/n)', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Put slide in place and press ENTER.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': ''}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Put slide in place and press ENTER.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 10]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 10]}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pressure']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Set', {'pressure': 10}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', {'mid_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'time to allow things to settle'}, 'pumpon_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_On', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': 60}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', {'mid_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'time to allow things to settle'}, 'pumpoff_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Off', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the final weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result'], 'value': '11'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '11']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '11']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '11']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Is 11g the correct value?(y/n)', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}, 'args': [{'descriptors': 'consol'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled gui {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'desc': 'parameters used to generate toolpath'}, 'generator': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator'], 'value': 'XlineTPGen', 'desc': 'name of generator'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'dataArgs': {'source': 'apparatus', 'address': '', 'value': ['PMMA'], 'desc': 'arguments to make parameter structure'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Run', {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'desc': 'parameters used to generate toolpath'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'newfigure': {'source': 'apparatus', 'address': '', 'value': True, 'desc': 'Make a new figure?'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name'], 'value': 'Logs/1565229320image.png'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', {'toolpath': {'source': 'apparatus', 'address': '', 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'toolpath to be printed'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Start', {}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}]}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'initial'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', {'motion': {'source': 'apparatus', 'address': '', 'value': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, 'desc': 'motion to start'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}]}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': {'X': 0, 'Y': 0, 'Z': 0.8}, 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'nPMMA@start'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': ['devices', 'gantry', 'nPMMA', 'axismask'], 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['X', 'Y'], ['Z']], 'desc': 'order of operations for moving to a point'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.8}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}]}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'MotionRamp']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'MaxAccel']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 10]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 10]}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pressure']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Set', {'pressure': 10}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 0]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 0]}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'mid_time']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 0]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 0]}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pumpon_time']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', {'mid_time': {'source': 'apparatus', 'address': ['devices', 'pump0', 'mid_time'], 'value': 0, 'desc': 'time to allow things to settle'}, 'pumpon_time': {'source': 'apparatus', 'address': ['devices', 'pump0', 'pumpon_time'], 'value': 0, 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': 0}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_On', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': 0}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'speed']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelLinearMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelLinearMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': {'X': 5, 'Y': 0, 'Z': 0.8}, 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': '', 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'axismask': {'source': 'apparatus', 'address': '', 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'speed': {'source': 'apparatus', 'address': '', 'value': 40, 'desc': 'order of operations for moving to a point'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelLinearMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 5.0, 'Y': 0.0, 'ZZ1': 0.8}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelLinearMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelLinearMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', {'motion': {'source': 'apparatus', 'address': '', 'value': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, 'desc': 'motion to start'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'ZZ1': 0.0}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'ZZ1': 0.0}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'safeZZ1']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 0]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 0]}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'mid_time']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 0]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 0]}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pumpoff_time']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', {'mid_time': {'source': 'apparatus', 'address': ['devices', 'pump0', 'mid_time'], 'value': 0, 'desc': 'time to allow things to settle'}, 'pumpoff_time': {'source': 'apparatus', 'address': ['devices', 'pump0', 'pumpoff_time'], 'value': 0, 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': 0}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Off', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': 0}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}]}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['End', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['End', {}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}]}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}]}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'initial'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}, 'args': [{'descriptors': 'motion'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['End', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['End', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['End', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', 'end']}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'camera', 'procedure': 'Measure', 'details': {'file': 'test.png'}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.DoEproc', None]}
Handled procexec {'subject': 'target.apparatus.DoEproc', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.DoEproc', None]}, 'args': ['camera', 'Measure', {'file': 'test.png'}]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y'}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 10}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': '', 'pumpon_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 60}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': '', 'pumpoff_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'Toolpath_Print', 'information': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}], ['->', '->', {'name': 'Start', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'StartofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['X', 'Y'], ['Z']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'nPMMA'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 10}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': 0, 'pumpon_time': 0, 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', {'name': 'Motion_RefRelLinearMotion', 'information': {'relpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 5.0, 'Y': 0.0, 'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', {'name': 'EndofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': 0, 'pumpoff_time': 0, 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'End', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', {'name': 'eproc_camera_Measure', 'information': {'file': 'test.png'}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 10}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': '', 'pumpon_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 60}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': '', 'pumpoff_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'Toolpath_Print', 'information': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}], ['->', '->', {'name': 'Start', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'StartofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['X', 'Y'], ['Z']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'nPMMA'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 10}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': 0, 'pumpon_time': 0, 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', {'name': 'Motion_RefRelLinearMotion', 'information': {'relpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 5.0, 'Y': 0.0, 'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', {'name': 'EndofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': 0, 'pumpoff_time': 0, 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'End', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', {'name': 'eproc_camera_Measure', 'information': {'file': 'test.png'}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y'}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 10}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': '', 'pumpon_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 60}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': '', 'pumpoff_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'Toolpath_Print', 'information': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}], ['->', '->', {'name': 'Start', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'StartofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['X', 'Y'], ['Z']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'nPMMA'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 10}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': 0, 'pumpon_time': 0, 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', {'name': 'Motion_RefRelLinearMotion', 'information': {'relpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 5.0, 'Y': 0.0, 'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', {'name': 'EndofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': 0, 'pumpoff_time': 0, 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'End', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', {'name': 'eproc_camera_Measure', 'information': {'file': 'test.png'}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 10}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': '', 'pumpon_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 60}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': '', 'pumpoff_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'Toolpath_Print', 'information': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}], ['->', '->', {'name': 'Start', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'StartofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['X', 'Y'], ['Z']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'nPMMA'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 10}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': 0, 'pumpon_time': 0, 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', {'name': 'Motion_RefRelLinearMotion', 'information': {'relpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 5.0, 'Y': 0.0, 'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', {'name': 'EndofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': 0, 'pumpoff_time': 0, 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'End', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', {'name': 'eproc_camera_Measure', 'information': {'file': 'test.png'}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'camera', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'User', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Disconnect_All', None]}
Handled gui {'subject': 'target.apparatus.Disconnect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Disconnect_All', None]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': False}, 'nPMMA': {'ID': '', 'OD': '', 'traceheight': 1, 'tracewidth': 1, 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': 7, 'pressure': 10, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'pump', 'PMMA', 'Nordson', 'Ultimus', 'pressure'], 'address': 'procexec', 'Connected': False}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'A3200', 'pump', 'Nordson', 'Ultimus', 'pressure'], 'address': 'procexec', 'Connected': False, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'type': 'IDS_ueye', 'addresstype': 'zmqNode', 'address': 'procexec', 'settle_time': 5, 'Connected': False, 'descriptors': ['ueye', 'camera']}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': False, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': False, 'descriptors': ['consol', 'User', 'sensor', 'guiconsol']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'gantry': {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': False}, 'nPMMA': {'ID': '', 'OD': '', 'traceheight': 1, 'tracewidth': 1, 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'type': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'Connected': False}, 'pump0': {'type': 'Nordson_UltimusV', 'COM': 7, 'pressure': 10, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'pump', 'PMMA', 'Nordson', 'Ultimus', 'pressure'], 'address': 'procexec', 'Connected': False}, 'aeropump0': {'type': 'Nordson_UltimusV_A3200', 'pumpname': 'pump0', 'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'pressure': 0, 'vacuum': 0, 'pumpres_time': 0, 'pumpon_time': 0, 'pumpoff_time': 0, 'mid_time': 0, 'addresstype': 'zmqNode', 'descriptors': ['UltimusV', 'A3200', 'pump', 'Nordson', 'Ultimus', 'pressure'], 'address': 'procexec', 'Connected': False, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'type': 'IDS_ueye', 'addresstype': 'zmqNode', 'address': 'procexec', 'settle_time': 5, 'Connected': False, 'descriptors': ['ueye', 'camera']}, 'system': {'type': 'System', 'addresstype': 'zmqNode', 'address': 'procexec', 'Connected': False, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': False, 'descriptors': ['consol', 'User', 'sensor', 'guiconsol']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': True, 'do_pumpcal': True, 'do_speedcal': True, 'density': 1}}, 'alignments': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': '11'}, 'User_Consol_InputOptions': {'result': 'y'}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': 'Logs/1565229320image.png'}, 'Toolpath_Generate': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'materials': {'PMMA': {'calibrated': True, 'do_pumpcal': True, 'do_speedcal': True, 'density': 1}}, 'alignments': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}, 'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': '11'}, 'User_Consol_InputOptions': {'result': 'y'}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': 'Logs/1565229320image.png'}, 'Toolpath_Generate': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y'}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 10}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': '', 'pumpon_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 60}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': '', 'pumpoff_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'Toolpath_Print', 'information': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}], ['->', '->', {'name': 'Start', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'StartofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['X', 'Y'], ['Z']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'nPMMA'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 10}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': 0, 'pumpon_time': 0, 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', {'name': 'Motion_RefRelLinearMotion', 'information': {'relpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 5.0, 'Y': 0.0, 'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', {'name': 'EndofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': 0, 'pumpoff_time': 0, 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'End', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', {'name': 'eproc_camera_Measure', 'information': {'file': 'test.png'}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 10}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': '', 'pumpon_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 60}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': '', 'pumpoff_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'Toolpath_Print', 'information': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}], ['->', '->', {'name': 'Start', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'StartofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['X', 'Y'], ['Z']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'nPMMA'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 10}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': 0, 'pumpon_time': 0, 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', {'name': 'Motion_RefRelLinearMotion', 'information': {'relpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 5.0, 'Y': 0.0, 'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', {'name': 'EndofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': 0, 'pumpoff_time': 0, 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'End', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', {'name': 'eproc_camera_Measure', 'information': {'file': 'test.png'}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_camera_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_User_Disconnect', 'information': {}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y'}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 10}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': '', 'pumpon_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 60}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': '', 'pumpoff_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'Toolpath_Print', 'information': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}], ['->', '->', {'name': 'Start', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'StartofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['X', 'Y'], ['Z']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'nPMMA'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 10}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': 0, 'pumpon_time': 0, 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', {'name': 'Motion_RefRelLinearMotion', 'information': {'relpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 5.0, 'Y': 0.0, 'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', {'name': 'EndofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': 0, 'pumpoff_time': 0, 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'End', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', {'name': 'eproc_camera_Measure', 'information': {'file': 'test.png'}}], ['->', {'name': 'User_FlexPrinter_Alignments_Align', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA', 'filename': 'alignments.json'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_Input', 'information': 'alignments.json'}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', {'name': 'User_Consol_InputOptions', 'information': 'n'}], ['->', '->', {'name': 'User_FlexPrinter_Alignments_Derive', 'information': {'Measured_List': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'primenoz': 'nPMMA'}}], ['->', {'name': 'User_InkCal_Calibrate', 'information': {'material': 'PMMA', 'filename': 'cal.json'}}], ['->', '->', {'name': 'User_InkCal_Measure', 'information': {'material': 'PMMA', 'filename': 'cal.json', 'time': 60}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['Z'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '10'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'Put slide in place and press ENTER.', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 10}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': '', 'pumpon_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 60}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': '', 'pumpoff_time': '', 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': ''}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'target': ['information', 'procedures', 'User_Consol_Input', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInput', 'information': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_Input', 'information': '11'}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'target': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}], ['->', '->', '->', '->', {'name': 'eproc_User_GetInputOptions', 'information': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}}], ['->', '->', '->', {'name': 'User_Consol_InputOptions', 'information': 'y'}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': 'XlineTPGen', 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}], ['->', {'name': 'Toolpath_Print', 'information': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}], ['->', '->', {'name': 'Start', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'StartofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'speed': 40, 'axismask': {'Z': 'ZZ1'}, 'priority': [['X', 'Y'], ['Z']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'nPMMA'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'eproc_pump0_Set', 'information': {'pressure': 10}}], ['->', '->', '->', {'name': 'Pump_PumpOn', 'information': {'mid_time': 0, 'pumpon_time': 0, 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_On', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', {'name': 'Motion_RefRelLinearMotion', 'information': {'relpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 5.0, 'Y': 0.0, 'ZZ1': 0.8}, 'speed': 40}}], ['->', '->', {'name': 'EndofMotion', 'information': {'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', '->', {'name': 'Pump_PumpOff', 'information': {'mid_time': 0, 'pumpoff_time': 0, 'name': 'pump0'}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', '->', {'name': 'eproc_pump0_Off', 'information': {}}], ['->', '->', '->', '->', {'name': 'eproc_system_Dwell', 'information': {'dtime': 0}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', '->', {'name': 'End', 'information': {}}], ['->', '->', '->', {'name': 'Aerotech_A3200_Set', 'information': {'Type': 'default'}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Set_Motion', 'information': {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': "<class 'bool'>", 'axismask': {}}}], ['->', '->', '->', {'name': 'Motion_RefRelPriorityLineMotion', 'information': {'relpoint': '', 'refpoint': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40, 'axismask': '', 'priority': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']]}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}}], ['->', '->', '->', '->', {'name': 'eproc_gantry_Move', 'information': {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}}], ['->', '->', '->', {'name': 'eproc_gantry_Run', 'information': {}}], ['->', {'name': 'eproc_camera_Measure', 'information': {'file': 'test.png'}}], ['->', {'name': 'eproc_gantry_Disconnect', 'information': {}}], ['->', {'name': 'eproc_pump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Disconnect', 'information': {}}], ['->', {'name': 'eproc_camera_Disconnect', 'information': {}}], ['->', {'name': 'eproc_system_Disconnect', 'information': {}}], ['->', {'name': 'eproc_User_Disconnect', 'information': {}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled launcher {'subject': 'close'}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.importApparatus', None]}
Handled gui {'subject': 'target.apparatus.importApparatus', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.importApparatus', None]}, 'args': ['C:/Users/jhardin/Desktop/DemoFiles/DemoApparatus.json']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': [], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': ''}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['PMMA'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': [], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': ''}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['PMMA'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'type']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'type'], 'value': 'User_GUI'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'address']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'address'], 'value': 'gui'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'addresstype']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype'], 'value': 'zmqNode'}}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['camera', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['motion', 'Aerotech', 'sensor', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['gantry', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['pump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': 7}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['system', 'System', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['system', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', ['sensor', 'consol', 'User', 'guiconsol']]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', None]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', False]}
Sent gui {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['User', 'Connect', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', 'e_reply']}, 'args': ['aeropump0', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['aeropump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}
Handled gui {'subject': 'target.apparatus.Connect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}, 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Ultimus', 'UltimusV', 'pressure', 'Nordson', 'A3200', 'pump'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['A3200', 'sensor', 'Aerotech', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Ultimus', 'PMMA', 'pressure', 'UltimusV', 'Nordson', 'pump'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['sensor', 'consol', 'User', 'guiconsol']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Ultimus', 'UltimusV', 'pressure', 'Nordson', 'A3200', 'pump'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['A3200', 'sensor', 'Aerotech', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Ultimus', 'PMMA', 'pressure', 'UltimusV', 'Nordson', 'pump'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['sensor', 'consol', 'User', 'guiconsol']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {}, 'desc': 'parameters used to generate toolpath'}, 'generator': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator'], 'value': 'XlineTPGen', 'desc': 'name of generator'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': {}, 'desc': 'where to store the toolpath'}, 'dataArgs': {'source': 'apparatus', 'address': '', 'value': ['PMMA'], 'desc': 'arguments to make parameter structure'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Run', {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'desc': 'parameters used to generate toolpath'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'newfigure': {'source': 'apparatus', 'address': '', 'value': True, 'desc': 'Make a new figure?'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name'], 'value': 'Logs/1565296469image.png'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Ultimus', 'UltimusV', 'pressure', 'Nordson', 'A3200', 'pump'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['A3200', 'sensor', 'Aerotech', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Ultimus', 'PMMA', 'pressure', 'UltimusV', 'Nordson', 'pump'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['sensor', 'consol', 'User', 'guiconsol']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Ultimus', 'UltimusV', 'pressure', 'Nordson', 'A3200', 'pump'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['A3200', 'sensor', 'Aerotech', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Ultimus', 'PMMA', 'pressure', 'UltimusV', 'Nordson', 'pump'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['sensor', 'consol', 'User', 'guiconsol']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': 'Logs/1565296469image.png'}, 'Toolpath_Generate': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': 'Logs/1565296469image.png'}, 'Toolpath_Generate': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled launcher {'subject': 'close'}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.importApparatus', None]}
Handled gui {'subject': 'target.apparatus.importApparatus', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.importApparatus', None]}, 'args': ['C:/Users/jhardin/Desktop/DemoFiles/DemoApparatus.json']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': [], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': ''}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['PMMA'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': [], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': ''}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['PMMA'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'type']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'type'], 'value': 'User_GUI'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'address']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'address'], 'value': 'gui'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'addresstype']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype'], 'value': 'zmqNode'}}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['camera', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['A3200', 'Aerotech', 'sensor', 'motion']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['gantry', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['pump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': 7}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['system', 'System', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['system', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', ['guiconsol', 'consol', 'User', 'sensor']]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', None]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', False]}
Sent gui {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['User', 'Connect', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', 'e_reply']}, 'args': ['aeropump0', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['aeropump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}
Handled gui {'subject': 'target.apparatus.Connect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}, 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'UltimusV', 'A3200', 'pressure', 'Nordson', 'Ultimus'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'A3200', 'sensor'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'UltimusV', 'PMMA', 'pressure', 'Nordson', 'Ultimus'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['guiconsol', 'consol', 'User', 'sensor']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'UltimusV', 'A3200', 'pressure', 'Nordson', 'Ultimus'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'A3200', 'sensor'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'UltimusV', 'PMMA', 'pressure', 'Nordson', 'Ultimus'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['guiconsol', 'consol', 'User', 'sensor']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {}, 'desc': 'parameters used to generate toolpath'}, 'generator': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator'], 'value': 'XlineTPGen', 'desc': 'name of generator'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': {}, 'desc': 'where to store the toolpath'}, 'dataArgs': {'source': 'apparatus', 'address': '', 'value': ['PMMA'], 'desc': 'arguments to make parameter structure'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Run', {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'desc': 'parameters used to generate toolpath'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'newfigure': {'source': 'apparatus', 'address': '', 'value': True, 'desc': 'Make a new figure?'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name'], 'value': 'Logs/1565436176image.png'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'UltimusV', 'A3200', 'pressure', 'Nordson', 'Ultimus'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'A3200', 'sensor'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'UltimusV', 'PMMA', 'pressure', 'Nordson', 'Ultimus'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['guiconsol', 'consol', 'User', 'sensor']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'UltimusV', 'A3200', 'pressure', 'Nordson', 'Ultimus'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'A3200', 'sensor'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'UltimusV', 'PMMA', 'pressure', 'Nordson', 'Ultimus'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['guiconsol', 'consol', 'User', 'sensor']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': 'Logs/1565436176image.png'}, 'Toolpath_Generate': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': 'Logs/1565436176image.png'}, 'Toolpath_Generate': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'ender'}]]}}
Handled launcher {'subject': 'close'}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.importApparatus', None]}
Handled gui {'subject': 'target.apparatus.importApparatus', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.importApparatus', None]}, 'args': ['C:/Users/jhardin/Desktop/DemoFiles/DemoApparatus.json']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': [], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': ''}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['PMMA'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': [], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': ''}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['PMMA'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'type']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'type'], 'value': 'User_GUI'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'address']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'address'], 'value': 'gui'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'addresstype']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype'], 'value': 'zmqNode'}}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['camera', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['Aerotech', 'motion', 'sensor', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['gantry', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['pump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': 7}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['system', 'System', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['system', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', ['consol', 'sensor', 'guiconsol', 'User']]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', None]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', False]}
Sent gui {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['User', 'Connect', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', 'e_reply']}, 'args': ['aeropump0', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['aeropump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}
Handled gui {'subject': 'target.apparatus.Connect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}, 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pressure', 'UltimusV', 'Nordson', 'A3200', 'Ultimus'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion', 'A3200', 'Aerotech', 'sensor'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pressure', 'UltimusV', 'Nordson', 'PMMA', 'Ultimus'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['consol', 'sensor', 'guiconsol', 'User']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pressure', 'UltimusV', 'Nordson', 'A3200', 'Ultimus'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion', 'A3200', 'Aerotech', 'sensor'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pressure', 'UltimusV', 'Nordson', 'PMMA', 'Ultimus'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['consol', 'sensor', 'guiconsol', 'User']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {}, 'desc': 'parameters used to generate toolpath'}, 'generator': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator'], 'value': 'XlineTPGen', 'desc': 'name of generator'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': {}, 'desc': 'where to store the toolpath'}, 'dataArgs': {'source': 'apparatus', 'address': '', 'value': ['PMMA'], 'desc': 'arguments to make parameter structure'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Run', {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'desc': 'parameters used to generate toolpath'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'newfigure': {'source': 'apparatus', 'address': '', 'value': True, 'desc': 'Make a new figure?'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name'], 'value': 'Logs/1565436652image.png'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pressure', 'UltimusV', 'Nordson', 'A3200', 'Ultimus'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion', 'A3200', 'Aerotech', 'sensor'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pressure', 'UltimusV', 'Nordson', 'PMMA', 'Ultimus'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['consol', 'sensor', 'guiconsol', 'User']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pressure', 'UltimusV', 'Nordson', 'A3200', 'Ultimus'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion', 'A3200', 'Aerotech', 'sensor'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'pressure', 'UltimusV', 'Nordson', 'PMMA', 'Ultimus'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['consol', 'sensor', 'guiconsol', 'User']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': 'Logs/1565436652image.png'}, 'Toolpath_Generate': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': 'Logs/1565436652image.png'}, 'Toolpath_Generate': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled launcher {'subject': 'close'}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.importApparatus', None]}
Handled gui {'subject': 'target.apparatus.importApparatus', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.importApparatus', None]}, 'args': ['C:/Users/jhardin/Desktop/DemoFiles/DemoApparatus.json']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': [], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': ''}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['PMMA'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': [], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': ''}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['PMMA'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'type']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'type'], 'value': 'User_GUI'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'address']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'address'], 'value': 'gui'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'addresstype']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype'], 'value': 'zmqNode'}}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['camera', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['gantry', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['pump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': 7}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['system', 'System', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['system', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', ['guiconsol', 'sensor', 'User', 'consol']]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', None]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', False]}
Sent gui {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['User', 'Connect', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', 'e_reply']}, 'args': ['aeropump0', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['aeropump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}
Handled gui {'subject': 'target.apparatus.Connect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}, 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'UltimusV', 'pressure', 'pump', 'Ultimus', 'A3200'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'PMMA', 'UltimusV', 'pressure', 'pump', 'Ultimus'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['guiconsol', 'sensor', 'User', 'consol']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'UltimusV', 'pressure', 'pump', 'Ultimus', 'A3200'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'PMMA', 'UltimusV', 'pressure', 'pump', 'Ultimus'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['guiconsol', 'sensor', 'User', 'consol']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {}, 'desc': 'parameters used to generate toolpath'}, 'generator': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator'], 'value': 'XlineTPGen', 'desc': 'name of generator'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': {}, 'desc': 'where to store the toolpath'}, 'dataArgs': {'source': 'apparatus', 'address': '', 'value': ['PMMA'], 'desc': 'arguments to make parameter structure'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Run', {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'desc': 'parameters used to generate toolpath'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'newfigure': {'source': 'apparatus', 'address': '', 'value': True, 'desc': 'Make a new figure?'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name'], 'value': 'Logs/1565436770image.png'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'UltimusV', 'pressure', 'pump', 'Ultimus', 'A3200'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'PMMA', 'UltimusV', 'pressure', 'pump', 'Ultimus'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['guiconsol', 'sensor', 'User', 'consol']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'UltimusV', 'pressure', 'pump', 'Ultimus', 'A3200'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'PMMA', 'UltimusV', 'pressure', 'pump', 'Ultimus'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['guiconsol', 'sensor', 'User', 'consol']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': 'Logs/1565436770image.png'}, 'Toolpath_Generate': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': 'Logs/1565436770image.png'}, 'Toolpath_Generate': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'UltimusV', 'pressure', 'pump', 'Ultimus', 'A3200'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'PMMA', 'UltimusV', 'pressure', 'pump', 'Ultimus'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['guiconsol', 'sensor', 'User', 'consol']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'UltimusV', 'pressure', 'pump', 'Ultimus', 'A3200'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Nordson', 'PMMA', 'UltimusV', 'pressure', 'pump', 'Ultimus'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['guiconsol', 'sensor', 'User', 'consol']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': 'Logs/1565436770image.png'}, 'Toolpath_Generate': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': 'Logs/1565436770image.png'}, 'Toolpath_Generate': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled launcher {'subject': 'close'}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.importApparatus', None]}
Handled gui {'subject': 'target.apparatus.importApparatus', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.importApparatus', None]}, 'args': ['C:/Users/jhardin/Desktop/DemoFiles/DemoApparatus.json']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': [], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': ''}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['PMMA'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': [], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': ''}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['PMMA'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'type']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'type'], 'value': 'User_GUI'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'address']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'address'], 'value': 'gui'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'addresstype']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype'], 'value': 'zmqNode'}}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['camera', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['A3200', 'Aerotech', 'sensor', 'motion']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['gantry', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['pump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': 7}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['system', 'System', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['system', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', ['sensor', 'consol', 'User', 'guiconsol']]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', None]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', False]}
Sent gui {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['User', 'Connect', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', 'e_reply']}, 'args': ['aeropump0', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['aeropump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}
Handled gui {'subject': 'target.apparatus.Connect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}, 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'UltimusV', 'Nordson', 'Ultimus', 'pressure', 'A3200'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'A3200', 'Aerotech', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'UltimusV', 'Nordson', 'PMMA', 'Ultimus', 'pressure'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['sensor', 'consol', 'User', 'guiconsol']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'UltimusV', 'Nordson', 'Ultimus', 'pressure', 'A3200'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'A3200', 'Aerotech', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'UltimusV', 'Nordson', 'PMMA', 'Ultimus', 'pressure'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['sensor', 'consol', 'User', 'guiconsol']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {}, 'desc': 'parameters used to generate toolpath'}, 'generator': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator'], 'value': 'XlineTPGen', 'desc': 'name of generator'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': {}, 'desc': 'where to store the toolpath'}, 'dataArgs': {'source': 'apparatus', 'address': '', 'value': ['PMMA'], 'desc': 'arguments to make parameter structure'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Run', {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'desc': 'parameters used to generate toolpath'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'newfigure': {'source': 'apparatus', 'address': '', 'value': True, 'desc': 'Make a new figure?'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name'], 'value': 'Logs/1565437198image.png'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'UltimusV', 'Nordson', 'Ultimus', 'pressure', 'A3200'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'A3200', 'Aerotech', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'UltimusV', 'Nordson', 'PMMA', 'Ultimus', 'pressure'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['sensor', 'consol', 'User', 'guiconsol']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'UltimusV', 'Nordson', 'Ultimus', 'pressure', 'A3200'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['sensor', 'A3200', 'Aerotech', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'UltimusV', 'Nordson', 'PMMA', 'Ultimus', 'pressure'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['sensor', 'consol', 'User', 'guiconsol']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': 'Logs/1565437198image.png'}, 'Toolpath_Generate': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': 'Logs/1565437198image.png'}, 'Toolpath_Generate': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled launcher {'subject': 'close'}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.importApparatus', None]}
Handled gui {'subject': 'target.apparatus.importApparatus', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.importApparatus', None]}, 'args': ['C:/Users/jhardin/Desktop/DemoFiles/DemoApparatus.json']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': [], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': ''}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['PMMA'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': [], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': ''}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['PMMA'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'type']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'type'], 'value': 'User_GUI'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'address']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'address'], 'value': 'gui'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'addresstype']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype'], 'value': 'zmqNode'}}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['camera', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['motion', 'sensor', 'Aerotech', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['gantry', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['pump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': 7}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['system', 'System', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['system', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', ['guiconsol', 'consol', 'User', 'sensor']]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', None]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', False]}
Sent gui {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['User', 'Connect', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', 'e_reply']}, 'args': ['aeropump0', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['aeropump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}
Handled gui {'subject': 'target.apparatus.Connect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}, 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Ultimus', 'Nordson', 'UltimusV', 'pressure', 'pump', 'A3200'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Ultimus', 'Nordson', 'UltimusV', 'pressure', 'pump', 'PMMA'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['guiconsol', 'consol', 'User', 'sensor']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Ultimus', 'Nordson', 'UltimusV', 'pressure', 'pump', 'A3200'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['Ultimus', 'Nordson', 'UltimusV', 'pressure', 'pump', 'PMMA'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['guiconsol', 'consol', 'User', 'sensor']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {}, 'desc': 'parameters used to generate toolpath'}, 'generator': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator'], 'value': 'XlineTPGen', 'desc': 'name of generator'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': {}, 'desc': 'where to store the toolpath'}, 'dataArgs': {'source': 'apparatus', 'address': '', 'value': ['PMMA'], 'desc': 'arguments to make parameter structure'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Run', {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'desc': 'parameters used to generate toolpath'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'newfigure': {'source': 'apparatus', 'address': '', 'value': True, 'desc': 'Make a new figure?'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name'], 'value': 'Logs/1565437390image.png'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Handled launcher {'subject': 'close'}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.importApparatus', None]}
Handled gui {'subject': 'target.apparatus.importApparatus', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.importApparatus', None]}, 'args': ['C:/Users/jhardin/Desktop/DemoFiles/DemoApparatus.json']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': [], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': ''}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['PMMA'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': [], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': ''}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['PMMA'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'type']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'type'], 'value': 'User_GUI'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'address']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'address'], 'value': 'gui'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'addresstype']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype'], 'value': 'zmqNode'}}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['camera', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['motion', 'sensor', 'A3200', 'Aerotech']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['gantry', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['pump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': 7}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['system', 'System', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['system', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', ['sensor', 'consol', 'guiconsol', 'User']]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', None]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', False]}
Sent gui {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['User', 'Connect', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', 'e_reply']}, 'args': ['aeropump0', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['aeropump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}
Handled gui {'subject': 'target.apparatus.Connect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}, 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pressure', 'Nordson', 'A3200', 'UltimusV', 'Ultimus', 'pump'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pressure', 'Nordson', 'UltimusV', 'PMMA', 'Ultimus', 'pump'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['sensor', 'consol', 'guiconsol', 'User']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pressure', 'Nordson', 'A3200', 'UltimusV', 'Ultimus', 'pump'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pressure', 'Nordson', 'UltimusV', 'PMMA', 'Ultimus', 'pump'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['sensor', 'consol', 'guiconsol', 'User']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {}, 'desc': 'parameters used to generate toolpath'}, 'generator': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator'], 'value': 'XlineTPGen', 'desc': 'name of generator'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': {}, 'desc': 'where to store the toolpath'}, 'dataArgs': {'source': 'apparatus', 'address': '', 'value': ['PMMA'], 'desc': 'arguments to make parameter structure'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Run', {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'desc': 'parameters used to generate toolpath'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'newfigure': {'source': 'apparatus', 'address': '', 'value': True, 'desc': 'Make a new figure?'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name'], 'value': 'Logs/1565437635image.png'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pressure', 'Nordson', 'A3200', 'UltimusV', 'Ultimus', 'pump'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pressure', 'Nordson', 'UltimusV', 'PMMA', 'Ultimus', 'pump'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['sensor', 'consol', 'guiconsol', 'User']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pressure', 'Nordson', 'A3200', 'UltimusV', 'Ultimus', 'pump'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pressure', 'Nordson', 'UltimusV', 'PMMA', 'Ultimus', 'pump'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['sensor', 'consol', 'guiconsol', 'User']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': 'Logs/1565437635image.png'}, 'Toolpath_Generate': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': 'Logs/1565437635image.png'}, 'Toolpath_Generate': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pressure', 'Nordson', 'A3200', 'UltimusV', 'Ultimus', 'pump'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pressure', 'Nordson', 'UltimusV', 'PMMA', 'Ultimus', 'pump'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['sensor', 'consol', 'guiconsol', 'User']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pressure', 'Nordson', 'A3200', 'UltimusV', 'Ultimus', 'pump'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pressure', 'Nordson', 'UltimusV', 'PMMA', 'Ultimus', 'pump'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['sensor', 'consol', 'guiconsol', 'User']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': 'Logs/1565437635image.png'}, 'Toolpath_Generate': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': 'Logs/1565437635image.png'}, 'Toolpath_Generate': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled launcher {'subject': 'close'}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.importApparatus', None]}
Handled gui {'subject': 'target.apparatus.importApparatus', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.importApparatus', None]}, 'args': ['C:/Users/jhardin/Desktop/DemoFiles/DemoApparatus.json']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': [], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': ''}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['PMMA'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System'}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': [], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye'}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['motion'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter'}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': ''}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': ''}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['PMMA'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System'}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', []]}, 'kwargs': {'address': ['proclog']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'type']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'type'], 'value': 'User_GUI'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'address']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'address'], 'value': 'gui'}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled gui {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['devices', 'User', 'addresstype']]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled gui {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype'], 'value': 'zmqNode'}}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['camera', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['Aerotech', 'sensor', 'A3200', 'motion']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['gantry', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['pump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': 7}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['system', 'System', 'procexec', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['system', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDescriptors', ['User', 'guiconsol', 'sensor', 'consol']]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', 'e_reply']}, 'args': [True]}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].setSimulation', None]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', 'e_reply']}}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["User"]["Address"].getDependence', False]}
Sent gui {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['User', 'Connect', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent procexec {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', 'e_reply']}, 'args': ['aeropump0', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', 'e_reply']}, 'args': ['aeropump0', 'Connect', 'procexec']}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', 'e_reply']}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}
Handled gui {'subject': 'target.apparatus.Connect_All', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.Connect_All', None]}, 'kwargs': {'simulation': True}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'UltimusV', 'pressure', 'Nordson', 'A3200', 'Ultimus'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'PMMA', 'UltimusV', 'pressure', 'Nordson', 'Ultimus'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['User', 'guiconsol', 'sensor', 'consol']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'UltimusV', 'pressure', 'Nordson', 'A3200', 'Ultimus'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'PMMA', 'UltimusV', 'pressure', 'Nordson', 'Ultimus'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['User', 'guiconsol', 'sensor', 'consol']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}, 'kwargs': {'address': ['proclog']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {}, 'desc': 'parameters used to generate toolpath'}, 'generator': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator'], 'value': 'XlineTPGen', 'desc': 'name of generator'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': {}, 'desc': 'where to store the toolpath'}, 'dataArgs': {'source': 'apparatus', 'address': '', 'value': ['PMMA'], 'desc': 'arguments to make parameter structure'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}, 'args': [{'descriptors': 'system'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Run', {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Handled procexec {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'desc': 'parameters used to generate toolpath'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'newfigure': {'source': 'apparatus', 'address': '', 'value': True, 'desc': 'Make a new figure?'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Handled procexec {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name'], 'value': 'Logs/1565438039image.png'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'UltimusV', 'pressure', 'Nordson', 'A3200', 'Ultimus'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'PMMA', 'UltimusV', 'pressure', 'Nordson', 'Ultimus'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['User', 'guiconsol', 'sensor', 'consol']}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'aeropump0': {'A3200name': 'gantry', 'IOaxis': 'ZZ1', 'IObit': 2, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'UltimusV', 'pressure', 'Nordson', 'A3200', 'Ultimus'], 'mid_time': 0, 'pressure': 0, 'pumpname': 'pump0', 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV_A3200', 'vacuum': 0, 'Connected': True, 'pumpaddress': 'procexec', 'A3200address': 'procexec'}, 'camera': {'address': 'procexec', 'addresstype': 'zmqNode', 'settle_time': 5, 'type': 'IDS_ueye', 'Connected': True, 'descriptors': ['ueye', 'camera']}, 'gantry': {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}, 'speed': 40}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}, 'nPMMA': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMA'], 'traceheight': 1, 'tracewidth': 1, 'type': '', 'Connected': False}, 'nPMMAslide': {'ID': '', 'OD': '', 'addresstype': '', 'descriptors': ['nozzle', 'PMMAslide'], 'type': '', 'Connected': False}, 'pump0': {'COM': 7, 'address': 'procexec', 'addresstype': 'zmqNode', 'descriptors': ['pump', 'PMMA', 'UltimusV', 'pressure', 'Nordson', 'Ultimus'], 'mid_time': 0, 'pressure': 10, 'pumpoff_time': 0, 'pumpon_time': 0, 'pumpres_time': 0, 'type': 'Nordson_UltimusV', 'vacuum': 0, 'Connected': True}, 'system': {'address': 'procexec', 'addresstype': 'zmqNode', 'type': 'System', 'Connected': True, 'descriptors': ['system']}, 'User': {'type': 'User_GUI', 'address': 'gui', 'addresstype': 'zmqNode', 'Connected': True, 'descriptors': ['User', 'guiconsol', 'sensor', 'consol']}}]}, 'kwargs': {'address': ['devices']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': 'Logs/1565438039image.png'}, 'Toolpath_Generate': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', {'alignmentnames': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'alignments': {'camera@mark': {'X': '', 'Y': '', 'ZZ3': ''}, 'initial': {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}, 'nPMMA@cal': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@mark': {'X': '', 'Y': '', 'ZZ1': ''}, 'nPMMA@start': {'X': '', 'Y': '', 'ZZ1': ''}}, 'alignmentsfile': 'alignments.json', 'calibrationfile': 'cal.json', 'ink calibration': {'time': 60}, 'materials': {'PMMA': {'calibrated': False, 'density': 1, 'do_pumpcal': True, 'do_speedcal': True}}, 'procedures': {'Aerotech_A3200_getPosition': {'result': {}}, 'User_Consol_Input': {'result': {}}, 'User_Consol_InputOptions': {'result': {}}}, 'ProcedureData': {'Toolpath_Plot': {'image_file_name': 'Logs/1565438039image.png'}, 'Toolpath_Generate': {'toolpath': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'generator': {}}, 'SpanningSample': {'cur_parameters': {'motionFile': {}}}}}]}, 'kwargs': {'address': ['information']}}
Sent gui {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}
Handled gui {'subject': 'target.apparatus.serialClone', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.serialClone', [['->', {'name': 'eproc_camera_Connect', 'information': {}}], ['->', {'name': 'eproc_gantry_Connect', 'information': {}}], ['->', {'name': 'eproc_pump0_Connect', 'information': {'COM': 7}}], ['->', {'name': 'eproc_system_Connect', 'information': {}}], ['->', {'name': 'eproc_User_Connect', 'information': {}}], ['->', {'name': 'eproc_aeropump0_Connect', 'information': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}], ['->', {'name': 'Toolpath_Generate', 'information': {'parameters': {}, 'generator': 'XlineTPGen', 'target': {}, 'dataArgs': ['PMMA']}}], ['->', '->', {'name': 'eproc_system_Run', 'information': {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}}], ['->', '->', {'name': 'Toolpath_Plot', 'information': {'parameters': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'target': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'newfigure': "<class 'dict'>"}}]]]}, 'kwargs': {'address': ['proclog']}}
Handled launcher {'subject': 'close'}
