Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'args': [['information', 'procedures', 'User_Consol_Input', 'result']], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}}
Sent User {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'cal.json']}
Handled User {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'calibrationfile']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'cal.json']}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': 9}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['User', 'User_Consol', 'procexec', 'User'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['sensor', 'User', 'consol']]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'args': [True]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'alignmentnames']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal']]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'alignments.json']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nAgPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'args': [['information', 'procedures', 'User_Consol_Input', 'result']], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}}
Sent User {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'cal.json']}
Handled User {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'calibrationfile']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'cal.json']}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': 9}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['User', 'User_Consol', 'procexec', 'User'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['sensor', 'User', 'consol']]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'args': [True]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'alignmentnames']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal']]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'alignments.json']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nAgPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'args': [{'descriptors': 'consol'}], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled User {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'Invalid ApparatusAddress']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'Invalid ApparatusAddress']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'Invalid ApparatusAddress']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'initial', 'desc': 'parameters used to generate toolpath'}}]}
Handled User {'subject': 'close'}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'args': [['information', 'procedures', 'User_Consol_Input', 'result']], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}}
Sent User {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'cal.json']}
Handled User {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'calibrationfile']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'cal.json']}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': 9}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['User', 'User_Consol', 'procexec', 'User'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['sensor', 'User', 'consol']]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'args': [True]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'alignmentnames']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal']]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'alignments.json']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nAgPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'args': [{'descriptors': 'consol'}], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled User {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'y']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled User {'subject': 'close'}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'args': [['information', 'procedures', 'User_Consol_Input', 'result']], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}}
Sent User {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'cal.json']}
Handled User {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'calibrationfile']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'cal.json']}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': 9}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['User', 'User_Consol', 'procexec', 'User'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['sensor', 'User', 'consol']]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'args': [True]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'alignmentnames']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal']]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'alignments.json']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nAgPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'args': [{'descriptors': 'consol'}], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled User {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input'], 'value': 'n'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'n']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'n']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'n']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'initial', 'desc': 'parameters used to generate toolpath'}}]}
Handled User {'subject': 'close'}
Sent User {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'cal.json']}
Handled User {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'calibrationfile']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'cal.json']}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': 9}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['User', 'User_Consol', 'procexec', 'User'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['sensor', 'User', 'consol']]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'args': [True]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Handled User {'subject': 'close'}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'args': [['information', 'procedures', 'User_Consol_Input', 'result']], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}}
Sent User {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'cal.json']}
Handled User {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'calibrationfile']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'cal.json']}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': 9}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['User', 'User_Consol', 'procexec', 'User'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['sensor', 'User', 'consol']]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'args': [True]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'alignmentnames']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal']]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'alignments.json']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nAgPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'args': [{'descriptors': 'consol'}], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled User {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'y']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'What filename?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'alignments.json', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'args': [{'descriptors': 'consol'}], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled User {'subject': 'close'}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'args': [['information', 'procedures', 'User_Consol_Input', 'result']], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}}
Sent User {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'cal.json']}
Handled User {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'calibrationfile']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'cal.json']}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': 9}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['User', 'User_Consol', 'procexec', 'User'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['sensor', 'User', 'consol']]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'args': [True]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'alignmentnames']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal']]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'alignments.json']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nAgPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'args': [{'descriptors': 'consol'}], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled User {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'y']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'What filename?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'alignments.json', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'args': [{'descriptors': 'consol'}], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled User {'subject': 'close'}
Sent User {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'cal.json']}
Handled User {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'calibrationfile']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'cal.json']}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'args': [['information', 'procedures', 'User_Consol_Input', 'result']], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': 9}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['User', 'User_Consol', 'procexec', 'User'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['sensor', 'User', 'consol']]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'args': [True]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'alignmentnames']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal']]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'alignments.json']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nAgPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'args': [{'descriptors': 'consol'}], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled User {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'y']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What filename?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'alignments.json', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'args': [{'descriptors': 'consol'}], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled User {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input'], 'value': 'alignments.json'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'alignments.json']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled User {'subject': 'close'}
Sent User {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'cal.json']}
Handled User {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'calibrationfile']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'cal.json']}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'args': [['information', 'procedures', 'User_Consol_Input', 'result']], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': 9}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['User', 'User_Consol', 'procexec', 'User'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['sensor', 'User', 'consol']]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'args': [True]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'alignmentnames']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal']]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'alignments.json']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nAgPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'args': [{'descriptors': 'consol'}], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled User {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'y']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What filename?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'alignments.json', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'args': [{'descriptors': 'consol'}], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled User {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input'], 'value': 'alignments.json'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'alignments.json']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information'], 'value': {'initial': {'X': -241.20172932965255, 'Y': -286.691662732826, 'ZZ1': -6.644274461633202, 'ZZ2': -5.000002007434219, 'ZZ3': -4.999998848323777, 'ZZ4': -4.999876571618324}, 'nAgPMMA@mark': {'X': -257.59173020097427, 'Y': -290.6916728263365, 'ZZ1': -135.86427496373074}, 'nAgPMMA@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}, 'nAgPMMA@cal': {'X': -342.21179128221985, 'Y': -282.43170111987484, 'ZZ1': -106.50427566058444}, 'safeZZ1': {'ZZ1': -6.644274461633202}, 'safeZZ2': {'ZZ2': -5.000002007434219}, 'safeZZ3': {'ZZ3': -4.999998848323777}, 'safeZZ4': {'ZZ4': -4.999876571618324}, 'nAgPMMAslide@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}}}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'args': [['information', 'procedures', 'User_Consol_Input', 'result']], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}}
Sent User {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'cal.json']}
Handled User {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'calibrationfile']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'cal.json']}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': 9}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['User', 'User_Consol', 'procexec', 'User'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['sensor', 'User', 'consol']]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'args': [True]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'alignmentnames']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal']]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'alignments.json']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nAgPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'args': [{'descriptors': 'consol'}], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled User {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'y']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What filename?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'alignments.json', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'args': [{'descriptors': 'consol'}], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled User {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input'], 'value': 'alignments.json'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'alignments.json']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information'], 'value': {'initial': {'X': -241.20172932965255, 'Y': -286.691662732826, 'ZZ1': -6.644274461633202, 'ZZ2': -5.000002007434219, 'ZZ3': -4.999998848323777, 'ZZ4': -4.999876571618324}, 'nAgPMMA@mark': {'X': -257.59173020097427, 'Y': -290.6916728263365, 'ZZ1': -135.86427496373074}, 'nAgPMMA@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}, 'nAgPMMA@cal': {'X': -342.21179128221985, 'Y': -282.43170111987484, 'ZZ1': -106.50427566058444}, 'safeZZ1': {'ZZ1': -6.644274461633202}, 'safeZZ2': {'ZZ2': -5.000002007434219}, 'safeZZ3': {'ZZ3': -4.999998848323777}, 'safeZZ4': {'ZZ4': -4.999876571618324}, 'nAgPMMAslide@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Would you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'args': [{'descriptors': 'consol'}], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled User {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions'], 'value': 'n'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Would you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'n']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'n']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', {'Measured_List': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal'], 'desc': 'list of measurements'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nAgPMMA', 'desc': 'prime material'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}
Handled procexec {'subject': 'target.apparatus.createAppEntry', 'args': [['information', 'procedures', 'User_Consol_Input', 'result']], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['madeEntry', None]}}
Sent User {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'cal.json']}
Handled User {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'calibrationfile']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'cal.json']}}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': 9}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent procexec {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.createDevice', 'args': ['User', 'User_Consol', 'procexec', 'User'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['sensor', 'User', 'consol']]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].setSimulation', 'args': [True]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Sent User {'subject': 'target.executor.devicelist["User"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled User {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Sent procexec {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', 'e_reply']}}
Handled procexec {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Sent procexec {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled procexec {'subject': 'target.apparatus.Connect_All', 'kwargs': {'simulation': True}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal']]}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'alignmentnames']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal']]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'alignments.json']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nAgPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'args': [{'descriptors': 'consol'}], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled User {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions'], 'value': 'y'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'y']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'y']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What filename?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'alignments.json', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'args': [{'descriptors': 'consol'}], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Handled User {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input'], 'value': 'alignments.json'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'alignments.json']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'alignments.json']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Handled procexec {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information'], 'value': {'initial': {'X': -241.20172932965255, 'Y': -286.691662732826, 'ZZ1': -6.644274461633202, 'ZZ2': -5.000002007434219, 'ZZ3': -4.999998848323777, 'ZZ4': -4.999876571618324}, 'nAgPMMA@mark': {'X': -257.59173020097427, 'Y': -290.6916728263365, 'ZZ1': -135.86427496373074}, 'nAgPMMA@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}, 'nAgPMMA@cal': {'X': -342.21179128221985, 'Y': -282.43170111987484, 'ZZ1': -106.50427566058444}, 'safeZZ1': {'ZZ1': -6.644274461633202}, 'safeZZ2': {'ZZ2': -5.000002007434219}, 'safeZZ3': {'ZZ3': -4.999998848323777}, 'safeZZ4': {'ZZ4': -4.999876571618324}, 'nAgPMMAslide@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Would you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'args': [{'descriptors': 'consol'}], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'User']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'zmqNode']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Handled User {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions'], 'value': 'n'}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Would you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'n']}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', 'n']}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'start']}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', {'Measured_List': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nAgPMMA@mark', 'nAgPMMA@start', 'nAgPMMA@cal'], 'desc': 'list of measurements'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nAgPMMA', 'desc': 'prime material'}}]}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', {'initial': {'X': -241.20172932965255, 'Y': -286.691662732826, 'ZZ1': -6.644274461633202, 'ZZ2': -5.000002007434219, 'ZZ3': -4.999998848323777, 'ZZ4': -4.999876571618324}, 'nAgPMMA@mark': {'X': -257.59173020097427, 'Y': -290.6916728263365, 'ZZ1': -135.86427496373074}, 'nAgPMMA@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}, 'nAgPMMA@cal': {'X': -342.21179128221985, 'Y': -282.43170111987484, 'ZZ1': -106.50427566058444}, 'safeZZ1': {'ZZ1': -6.644274461633202}, 'safeZZ2': {'ZZ2': -5.000002007434219}, 'safeZZ3': {'ZZ3': -4.999998848323777}, 'safeZZ4': {'ZZ4': -4.999876571618324}, 'nAgPMMAslide@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['information', 'alignments']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', {'initial': {'X': -241.20172932965255, 'Y': -286.691662732826, 'ZZ1': -6.644274461633202, 'ZZ2': -5.000002007434219, 'ZZ3': -4.999998848323777, 'ZZ4': -4.999876571618324}, 'nAgPMMA@mark': {'X': -257.59173020097427, 'Y': -290.6916728263365, 'ZZ1': -135.86427496373074}, 'nAgPMMA@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}, 'nAgPMMA@cal': {'X': -342.21179128221985, 'Y': -282.43170111987484, 'ZZ1': -106.50427566058444}, 'safeZZ1': {'ZZ1': -6.644274461633202}, 'safeZZ2': {'ZZ2': -5.000002007434219}, 'safeZZ3': {'ZZ3': -4.999998848323777}, 'safeZZ4': {'ZZ4': -4.999876571618324}, 'nAgPMMAslide@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}}]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'gantry']}
Handled procexec {'subject': 'target.apparatus.findDevice', 'args': [{'descriptors': 'motion'}], 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['devFound', 'gantry']}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['devices', 'gantry', 'nAgPMMA', 'axismask']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', {'Z': 'ZZ1'}]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['devices', 'gantry', 'nAgPMMA', 'axismask']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', {'Z': 'ZZ1'}]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['devices', 'gantry', 'nAgPMMA', 'axismask']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', {'Z': 'ZZ1'}]}}
Sent procexec {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', {'Z': 'ZZ1'}]}
Handled procexec {'subject': 'target.apparatus.getValue', 'kwargs': {'infoAddress': ['devices', 'gantry', 'nAgPMMA', 'axismask']}, 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['gotValue', {'Z': 'ZZ1'}]}}
Handled procexec {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information'], 'value': {'initial': {'X': -241.20172932965255, 'Y': -286.691662732826, 'ZZ1': -6.644274461633202, 'ZZ2': -5.000002007434219, 'ZZ3': -4.999998848323777, 'ZZ4': -4.999876571618324}, 'nAgPMMA@mark': {'X': -257.59173020097427, 'Y': -290.6916728263365, 'ZZ1': -135.86427496373074}, 'nAgPMMA@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}, 'nAgPMMA@cal': {'X': -342.21179128221985, 'Y': -282.43170111987484, 'ZZ1': -106.50427566058444}, 'safeZZ1': {'ZZ1': -6.644274461633202}, 'safeZZ2': {'ZZ2': -5.000002007434219}, 'safeZZ3': {'ZZ3': -4.999998848323777}, 'safeZZ4': {'ZZ4': -4.999876571618324}, 'nAgPMMAslide@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}}}}
Handled procexec {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'end']}
Handled User {'subject': 'close'}
