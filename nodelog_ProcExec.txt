Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['ueye', 'camera']]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['ueye', 'camera']]}}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled launcher {'subject': 'close'}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['ueye', 'camera']]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['ueye', 'camera']]}}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled launcher {'subject': 'close'}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['ueye', 'camera']]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['ueye', 'camera']]}}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled launcher {'subject': 'close'}
Handled launcher {'subject': 'close'}
Handled launcher {'subject': 'close'}
Handled launcher {'subject': 'close'}
Handled launcher {'subject': 'close'}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['TOuch', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Handled appa {'subject': 'target.executor.devicelist["TOuch"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}}
Handled appa {'subject': 'target.executor.devicelist["TOuch"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["TOuch"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Handled appa {'subject': 'target.executor.devicelist["TOuch"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Handled appa {'subject': 'target.executor.devicelist["TOuch"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'TOuch', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'ZZ3', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Handled launcher {'subject': 'close'}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['Touch', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Handled appa {'subject': 'target.executor.devicelist["Touch"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}}
Handled appa {'subject': 'target.executor.devicelist["Touch"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["Touch"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Handled appa {'subject': 'target.executor.devicelist["Touch"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Handled appa {'subject': 'target.executor.devicelist["Touch"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'Touch', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Handled launcher {'subject': 'close'}
Handled launcher {'subject': 'close'}
Handled launcher {'subject': 'close'}
Handled launcher {'subject': 'close'}
Handled launcher {'subject': 'close'}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled launcher {'subject': 'close'}
Handled launcher {'subject': 'close'}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled launcher {'subject': 'close'}
Handled launcher {'subject': 'close'}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled launcher {'subject': 'close'}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['touch', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Handled appa {'subject': 'target.executor.devicelist["touch"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}}
Handled appa {'subject': 'target.executor.devicelist["touch"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["touch"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Handled appa {'subject': 'target.executor.devicelist["touch"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Handled appa {'subject': 'target.executor.devicelist["touch"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'touch', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['touch', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Handled appa {'subject': 'target.executor.devicelist["touch"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}}
Handled appa {'subject': 'target.executor.devicelist["touch"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["touch"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Handled appa {'subject': 'target.executor.devicelist["touch"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Handled appa {'subject': 'target.executor.devicelist["touch"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'touch', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['touch', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Handled appa {'subject': 'target.executor.devicelist["touch"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}}
Handled appa {'subject': 'target.executor.devicelist["touch"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["touch"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Handled appa {'subject': 'target.executor.devicelist["touch"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Handled appa {'subject': 'target.executor.devicelist["touch"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'touch', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Handled appa {'subject': 'target.executor.devicelist[""]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}}
Handled appa {'subject': 'target.executor.devicelist[""]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist[""]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Handled appa {'subject': 'target.executor.devicelist[""]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Handled appa {'subject': 'target.executor.devicelist[""]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': '', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['zz2', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Handled appa {'subject': 'target.executor.devicelist["zz2"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}}
Handled appa {'subject': 'target.executor.devicelist["zz2"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["zz2"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Handled appa {'subject': 'target.executor.devicelist["zz2"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Handled appa {'subject': 'target.executor.devicelist["zz2"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'zz2', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Handled launcher {'subject': 'close'}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['Touch', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Handled appa {'subject': 'target.executor.devicelist["Touch"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}}
Handled appa {'subject': 'target.executor.devicelist["Touch"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["Touch"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Handled appa {'subject': 'target.executor.devicelist["Touch"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Handled appa {'subject': 'target.executor.devicelist["Touch"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'Touch', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Handled launcher {'subject': 'close'}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled launcher {'subject': 'close'}
Handled launcher {'subject': 'close'}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['Touch', 'IDS_ueye', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['ueye', 'camera']]}
Handled appa {'subject': 'target.executor.devicelist["Touch"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['ueye', 'camera']]}}
Handled appa {'subject': 'target.executor.devicelist["Touch"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["Touch"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["Touch"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'Touch', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'Touch', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'Touch', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled launcher {'subject': 'close'}
Handled launcher {'subject': 'close'}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled launcher {'subject': 'close'}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled launcher {'subject': 'close'}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['Motion', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Handled appa {'subject': 'target.executor.devicelist["Motion"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}}
Handled appa {'subject': 'target.executor.devicelist["Motion"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["Motion"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Handled appa {'subject': 'target.executor.devicelist["Motion"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Handled appa {'subject': 'target.executor.devicelist["Motion"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'Motion', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'Motion', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [False]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled launcher {'subject': 'close'}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['TOuch', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Handled appa {'subject': 'target.executor.devicelist["TOuch"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}}
Handled appa {'subject': 'target.executor.devicelist["TOuch"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["TOuch"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Handled appa {'subject': 'target.executor.devicelist["TOuch"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Handled appa {'subject': 'target.executor.devicelist["TOuch"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'TOuch', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'TOuch', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled launcher {'subject': 'close'}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [False]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [False]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [False]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled launcher {'subject': 'close'}
Handled launcher {'subject': 'close'}
Handled launcher {'subject': 'close'}
Handled launcher {'subject': 'close'}
Handled launcher {'subject': 'close'}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [False]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['touch', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Handled appa {'subject': 'target.executor.devicelist["touch"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}}
Handled appa {'subject': 'target.executor.devicelist["touch"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["touch"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Handled appa {'subject': 'target.executor.devicelist["touch"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Handled appa {'subject': 'target.executor.devicelist["touch"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'touch', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'touch', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled launcher {'subject': 'close'}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['Touch', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Handled appa {'subject': 'target.executor.devicelist["Touch"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}}
Handled appa {'subject': 'target.executor.devicelist["Touch"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["Touch"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Handled appa {'subject': 'target.executor.devicelist["Touch"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Handled appa {'subject': 'target.executor.devicelist["Touch"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'Touch', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'Touch', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['Touch', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Handled appa {'subject': 'target.executor.devicelist["Touch"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}}
Handled appa {'subject': 'target.executor.devicelist["Touch"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["Touch"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Handled appa {'subject': 'target.executor.devicelist["Touch"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Handled appa {'subject': 'target.executor.devicelist["Touch"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'Touch', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Handled launcher {'subject': 'close'}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ["touch'", 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Handled appa {'subject': 'target.executor.devicelist["touch\'"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}}
Handled appa {'subject': 'target.executor.devicelist["touch\'"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["touch\'"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Handled appa {'subject': 'target.executor.devicelist["touch\'"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Handled appa {'subject': 'target.executor.devicelist["touch\'"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': "touch'", 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': "touch'", 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled launcher {'subject': 'close'}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getRequirements', 'args': ['Connect'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent gui {'subject': 'target.executor.getDevices', 'args': ['gotDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.getDevices', 'args': ['gotDevices', []]}}
Sent gui {'subject': 'target.executor.getDevices', 'args': ['gotDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.getDevices', 'args': ['gotDevices', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['burp', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Handled appa {'subject': 'target.executor.devicelist["burp"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}}
Handled appa {'subject': 'target.executor.devicelist["burp"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["burp"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Handled appa {'subject': 'target.executor.devicelist["burp"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['burp', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'burp', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['burp', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Handled appa {'subject': 'target.executor.devicelist["burp"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}}
Handled appa {'subject': 'target.executor.devicelist["burp"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["burp"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Handled appa {'subject': 'target.executor.devicelist["burp"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['burp', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'burp', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'system']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'system']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'system']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['burp', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Handled appa {'subject': 'target.executor.devicelist["burp"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}}
Handled appa {'subject': 'target.executor.devicelist["burp"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["burp"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Handled appa {'subject': 'target.executor.devicelist["burp"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['burp', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'burp', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'burp', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['gantry', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['gantry', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['Touch', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Handled appa {'subject': 'target.executor.devicelist["Touch"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}}
Handled appa {'subject': 'target.executor.devicelist["Touch"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["Touch"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Handled appa {'subject': 'target.executor.devicelist["Touch"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['Touch', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'Touch', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'Touch', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'Touch', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'Touch', 'system']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'Touch', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'Touch', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['gantry', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['pump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['aeropump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Initialize', 'Measure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['Touch', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Initialize', 'Measure']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['system', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['gantry', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['gantry', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['gantry', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['pump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['aeropump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['system', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['touch', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Handled appa {'subject': 'target.executor.devicelist["touch"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}}
Handled appa {'subject': 'target.executor.devicelist["touch"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["touch"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Handled appa {'subject': 'target.executor.devicelist["touch"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['touch', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'touch', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'system', 'touch']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'system', 'touch']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['gantry', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['pump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['aeropump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['system', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Initialize', 'Measure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['touch', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Initialize', 'Measure']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'system', 'touch']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'system', 'touch']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['gantry', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['pump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['aeropump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['system', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Initialize', 'Measure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['touch', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Initialize', 'Measure']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'system', 'touch']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'system', 'touch']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['gantry', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['pump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['aeropump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['system', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Initialize', 'Measure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['touch', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Initialize', 'Measure']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['gantry', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['pump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['aeropump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['system', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['gantry', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['pump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['aeropump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['system', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['gantry', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['pump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['aeropump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['system', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['gantry', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['pump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['aeropump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['system', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pressure', 'vacuum']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Set', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pressure', 'vacuum']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['address', 'addresstype', 'axis', 'channel']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'getAI', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['address', 'addresstype', 'axis', 'channel']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Disconnect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['setting']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Set', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['setting']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['system', 'Disconnect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['dtime']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['system', 'Dwell', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['dtime']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['address', 'addresstype', 'arguments']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['system', 'Run', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['address', 'addresstype', 'arguments']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['axis', 'bit', 'value']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'set_DO', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['axis', 'bit', 'value']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['gantry', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['setting']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Set', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['setting']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Disconnect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['point', 'motiontype', 'speed', 'task', 'motionmode']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Move', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['point', 'motiontype', 'speed', 'task', 'motionmode']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['axis', 'bit', 'value']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'set_DO', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['axis', 'bit', 'value']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['address', 'addresstype', 'axislist']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'getPosition', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['address', 'addresstype', 'axislist']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['gantry', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['pump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['aeropump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['system', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['gantry', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['pump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['aeropump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['system', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['point', 'motiontype', 'speed', 'task', 'motionmode']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Move', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['point', 'motiontype', 'speed', 'task', 'motionmode']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['task']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Run', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['task']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Off', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['gantry', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['pump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['aeropump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['system', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['file', 'points', 'parameters', 'interval', 'task', 'mode']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'LogData_Start', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['file', 'points', 'parameters', 'interval', 'task', 'mode']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pressure', 'vacuum']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Set', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pressure', 'vacuum']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Off', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Disconnect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['gantry', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['pump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['aeropump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['system', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['task']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Run', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['task']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['RelAbs', 'dmotionmode', 'dmotiontype', 'motionmode', 'task', 'length_units', 'MotionRamp', 'MaxAccel', 'LookAhead', 'axismask', 'dtask']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Set_Motion', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['RelAbs', 'dmotionmode', 'dmotiontype', 'motionmode', 'task', 'length_units', 'MotionRamp', 'MaxAccel', 'LookAhead', 'axismask', 'dtask']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['task', 'mode']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'LogData_Stop', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['task', 'mode']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pressure', 'vacuum']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Set', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pressure', 'vacuum']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Disconnect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'On', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['system', 'Disconnect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['system', 'Disconnect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled launcher {'subject': 'close'}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['gantry', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['burp', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Handled appa {'subject': 'target.executor.devicelist["burp"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}}
Handled appa {'subject': 'target.executor.devicelist["burp"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["burp"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Handled appa {'subject': 'target.executor.devicelist["burp"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['burp', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'burp', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'zz2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['RelAbs', 'dmotionmode', 'dmotiontype', 'motionmode', 'task', 'length_units', 'MotionRamp', 'MaxAccel', 'LookAhead', 'axismask', 'dtask']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Set_Motion', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['RelAbs', 'dmotionmode', 'dmotiontype', 'motionmode', 'task', 'length_units', 'MotionRamp', 'MaxAccel', 'LookAhead', 'axismask', 'dtask']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['address', 'addresstype', 'axislist']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'getPosition', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['address', 'addresstype', 'axislist']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['address', 'addresstype', 'axis', 'channel']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'getAI', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['address', 'addresstype', 'axis', 'channel']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['cmstr', 'task', 'mode']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Load', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['cmstr', 'task', 'mode']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['task', 'mode']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'LogData_Stop', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['task', 'mode']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['cmstr', 'task', 'mode']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Load', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['cmstr', 'task', 'mode']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['task', 'mode']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'LogData_Stop', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['task', 'mode']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Disconnect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['point', 'motiontype', 'speed', 'task', 'motionmode']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Move', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['point', 'motiontype', 'speed', 'task', 'motionmode']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['point', 'motiontype', 'speed', 'task', 'motionmode']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Move', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['point', 'motiontype', 'speed', 'task', 'motionmode']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Disconnect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Disconnect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['gantry', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['pump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['aeropump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Initialize', 'Measure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['burp', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Initialize', 'Measure']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['system', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Disconnect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['gantry', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['pump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['aeropump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Initialize', 'Measure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['burp', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Initialize', 'Measure']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['system', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['gantry', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['pump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['aeropump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Initialize', 'Measure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['burp', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Initialize', 'Measure']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['system', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['gantry', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['pump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['aeropump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Initialize', 'Measure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['burp', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Initialize', 'Measure']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['system', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['gantry', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['pump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['aeropump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Initialize', 'Measure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['burp', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Initialize', 'Measure']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['system', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['axis', 'bit', 'value']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'set_DO', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['axis', 'bit', 'value']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['num_points']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['burp', 'Initialize', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['num_points']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['burp', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['setting']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['burp', 'Set', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['setting']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['setting']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['burp', 'Set', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['setting']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['burp', 'Disconnect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['gantry', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['pump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['aeropump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Initialize', 'Measure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['burp', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Initialize', 'Measure']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['system', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['gantry', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['pump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['aeropump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Initialize', 'Measure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['burp', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Initialize', 'Measure']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['system', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['ger', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Handled appa {'subject': 'target.executor.devicelist["ger"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}}
Handled appa {'subject': 'target.executor.devicelist["ger"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["ger"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Handled appa {'subject': 'target.executor.devicelist["ger"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['ger', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'ger', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Off', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'On', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system', 'ger']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system', 'ger']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['gantry', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['pump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['aeropump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Initialize', 'Measure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['burp', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Initialize', 'Measure']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['system', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Initialize', 'Measure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['ger', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Initialize', 'Measure']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['ger', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Handled appa {'subject': 'target.executor.devicelist["ger"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}}
Handled appa {'subject': 'target.executor.devicelist["ger"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["ger"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Handled appa {'subject': 'target.executor.devicelist["ger"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['ger', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'ger', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['ger', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['ger', 'Disconnect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['ger', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system', 'ger']]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', ['gantry', 'pump0', 'aeropump0', 'burp', 'system', 'ger']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['gantry', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['pump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['aeropump0', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Initialize', 'Measure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['burp', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Initialize', 'Measure']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['system', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Initialize', 'Measure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'args': ['ger', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Initialize', 'Measure']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['ger', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Handled appa {'subject': 'target.executor.devicelist["ger"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}}
Handled appa {'subject': 'target.executor.devicelist["ger"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["ger"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Handled appa {'subject': 'target.executor.devicelist["ger"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['ger', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'ger', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': '', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Disconnect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Off', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['task']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Run', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['task']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Off', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['task']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Run', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['task']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['file', 'points', 'parameters', 'interval', 'task', 'mode']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'LogData_Start', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['file', 'points', 'parameters', 'interval', 'task', 'mode']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Off', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['file', 'points', 'parameters', 'interval', 'task', 'mode']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'LogData_Start', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['file', 'points', 'parameters', 'interval', 'task', 'mode']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'On', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['setting']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Set', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['setting']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['setting']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Set', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['setting']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Disconnect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['RelAbs', 'dmotionmode', 'dmotiontype', 'motionmode', 'task', 'length_units', 'MotionRamp', 'MaxAccel', 'LookAhead', 'axismask', 'dtask']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Set_Motion', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['RelAbs', 'dmotionmode', 'dmotiontype', 'motionmode', 'task', 'length_units', 'MotionRamp', 'MaxAccel', 'LookAhead', 'axismask', 'dtask']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['cmstr', 'task', 'mode']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Load', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['cmstr', 'task', 'mode']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['axis', 'bit', 'value']]}
Handled gui {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'set_DO', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['axis', 'bit', 'value']]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'args': ['procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDevices', []]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['gantry', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['pump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['pump1', 'Nordson_UltimusV', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump1"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Handled appa {'subject': 'target.executor.devicelist["pump1"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump1"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['pump1', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['COM']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'pump1', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['aeropump1', 'Nordson_UltimusV_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump1"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Handled appa {'subject': 'target.executor.devicelist["aeropump1"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump1"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['dsdsd', 'Keyence_GT2_A3200', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}
Handled appa {'subject': 'target.executor.devicelist["dsdsd"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', []]}}
Handled appa {'subject': 'target.executor.devicelist["dsdsd"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["dsdsd"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}
Handled appa {'subject': 'target.executor.createDevice', 'args': ['system', 'System', 'procexec', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['devMade', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDescriptors', ['system']]}}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['system', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', []]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['aeropump0', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump1"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['pump', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['aeropump1', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'aeropump1', 'procedure': 'Connect', 'details': {'pumpname': 'pump1', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}
Handled appa {'subject': 'target.executor.devicelist["dsdsd"]["Address"].getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotDependencies', ['A3200', 'system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}
Handled appa {'subject': 'target.executor.getRequirements', 'args': ['dsdsd', 'Connect', 'procexec'], 'ereply': {'subject': 'target.executor.recv_value', 'args': ['gotRequirements', ['A3200name', 'A3200address', 'systemname', 'systemaddress', 'axis', 'DOaxis', 'DObit', 'AIaxis', 'AIchannel']]}}
Handled appa {'subject': 'target.executor.execute', 'args': [[[{'devices': 'dsdsd', 'procedure': 'Connect', 'details': {'A3200name': 'gantry', 'A3200address': 'procexec', 'systemname': 'system', 'systemaddress': 'procexec', 'axis': 'ZZ2', 'DOaxis': 'ZZ1', 'DObit': 0, 'AIaxis': 'ZZ2', 'AIchannel': 0}}]]]}
Handled launcher {'subject': 'close'}
Handled launcher {'subject': 'close'}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.clearProclist', None]}
Handled gui {'subject': 'target.clearProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.clearProclist', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'gui', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Sent gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'gui', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].Connect', 'kwargs': {}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['User is connected.\n']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['camera', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['sensor', 'Aerotech', 'motion', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['sensor', 'Aerotech', 'motion', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['gantry', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}, 'args': ['pump0', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['system', 'System', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['system', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}, 'args': ['aeropump0', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}, 'args': ['aeropump0', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['aeropump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}, 'args': ['camera', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}, 'args': ['gantry', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['pump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}, 'args': ['system', 'procexec']}
Handled launcher {'subject': 'close'}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.clearProclist', None]}
Handled gui {'subject': 'target.clearProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.clearProclist', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'gui', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Sent gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'gui', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].Connect', 'kwargs': {}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['User is connected.\n']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['camera', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['motion', 'sensor', 'Aerotech', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['motion', 'sensor', 'Aerotech', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['gantry', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}, 'args': ['pump0', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['system', 'System', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['system', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}, 'args': ['aeropump0', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}, 'args': ['aeropump0', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['aeropump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}, 'args': ['camera', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}, 'args': ['gantry', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['pump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}, 'args': ['system', 'procexec']}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}
Handled gui {'subject': 'target.createProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}, 'args': ['', 'Toolpath_Generate', {}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {}}]]}}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}
Handled gui {'subject': 'target.createProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}, 'args': ['', 'Toolpath_Generate', {'dataArgs': ['PMMA']}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA']}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA']}}]]}}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'XlineTPGen']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'desc': 'parameters used to generate toolpath'}, 'generator': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator'], 'value': 'XlineTPGen', 'desc': 'name of generator'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'dataArgs': {'source': 'apparatus', 'address': '', 'value': ['PMMA'], 'desc': 'arguments to make parameter structure'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}
Error handling gui {'subject': 'target.doProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}, 'args': ['', 'Toolpath_Generate']}: No module named 'XlineTPGen'
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'XlineTPGen']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'desc': 'parameters used to generate toolpath'}, 'generator': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator'], 'value': 'XlineTPGen', 'desc': 'name of generator'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'dataArgs': {'source': 'apparatus', 'address': '', 'value': ['PMMA'], 'desc': 'arguments to make parameter structure'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'system'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Run', {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, [0]]}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'desc': 'parameters used to generate toolpath'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'newfigure': {'source': 'apparatus', 'address': '', 'value': True, 'desc': 'Make a new figure?'}}]}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name'], 'value': 'Logs/1565122803image.png'}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}
Handled gui {'subject': 'target.doProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}, 'args': ['', 'Toolpath_Generate']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['aeropump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}, 'args': ['camera', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}, 'args': ['gantry', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['pump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}, 'args': ['system', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA']}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA']}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Handled launcher {'subject': 'close'}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.clearProclist', None]}
Handled gui {'subject': 'target.clearProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.clearProclist', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'gui', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Sent gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'gui', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].Connect', 'kwargs': {}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['User is connected.\n']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['camera', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['Aerotech', 'A3200', 'sensor', 'motion']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['Aerotech', 'A3200', 'sensor', 'motion']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['gantry', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}, 'args': ['pump0', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['system', 'System', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['system', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}, 'args': ['aeropump0', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}, 'args': ['aeropump0', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['aeropump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}, 'args': ['camera', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}, 'args': ['gantry', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['pump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}, 'args': ['system', 'procexec']}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}
Handled gui {'subject': 'target.createProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}, 'args': ['', 'User_FlexPrinter_Alignments_Align', {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.exportProclist', None]}
Handled gui {'subject': 'target.exportProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.exportProclist', None]}, 'args': ['C:/Users/jhardin/Desktop/Testing Alignments.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What filename?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'alignments.json', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['alignments.json\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'initial': {'X': -241.20172932965255, 'Y': -286.691662732826, 'ZZ1': -6.644274461633202, 'ZZ2': -5.000002007434219, 'ZZ3': -4.999998848323777, 'ZZ4': -4.999876571618324}, 'nAgPMMA@mark': {'X': -257.59173020097427, 'Y': -290.6916728263365, 'ZZ1': -135.86427496373074}, 'nAgPMMA@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}, 'nAgPMMA@cal': {'X': -342.21179128221985, 'Y': -282.43170111987484, 'ZZ1': -106.50427566058444}, 'safeZZ1': {'ZZ1': -6.644274461633202}, 'safeZZ2': {'ZZ2': -5.000002007434219}, 'safeZZ3': {'ZZ3': -4.999998848323777}, 'safeZZ4': {'ZZ4': -4.999876571618324}, 'nAgPMMAslide@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'initial': {'X': -241.20172932965255, 'Y': -286.691662732826, 'ZZ1': -6.644274461633202, 'ZZ2': -5.000002007434219, 'ZZ3': -4.999998848323777, 'ZZ4': -4.999876571618324}, 'nAgPMMA@mark': {'X': -257.59173020097427, 'Y': -290.6916728263365, 'ZZ1': -135.86427496373074}, 'nAgPMMA@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}, 'nAgPMMA@cal': {'X': -342.21179128221985, 'Y': -282.43170111987484, 'ZZ1': -106.50427566058444}, 'safeZZ1': {'ZZ1': -6.644274461633202}, 'safeZZ2': {'ZZ2': -5.000002007434219}, 'safeZZ3': {'ZZ3': -4.999998848323777}, 'safeZZ4': {'ZZ4': -4.999876571618324}, 'nAgPMMAslide@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'initial\nX -241.20172932965255 Y -286.691662732826 ZZ1 -6.644274461633202 ZZ2 -5.000002007434219 ZZ3 -4.999998848323777 ZZ4 -4.999876571618324 \n\nnAgPMMA@mark\nX -257.59173020097427 Y -290.6916728263365 ZZ1 -135.86427496373074 \n\nnAgPMMA@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nnAgPMMA@cal\nX -342.21179128221985 Y -282.43170111987484 ZZ1 -106.50427566058444 \n\nsafeZZ1\nZZ1 -6.644274461633202 \n\nsafeZZ2\nZZ2 -5.000002007434219 \n\nsafeZZ3\nZZ3 -4.999998848323777 \n\nsafeZZ4\nZZ4 -4.999876571618324 \n\nnAgPMMAslide@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nWould you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'initial\nX -241.20172932965255 Y -286.691662732826 ZZ1 -6.644274461633202 ZZ2 -5.000002007434219 ZZ3 -4.999998848323777 ZZ4 -4.999876571618324 \n\nnAgPMMA@mark\nX -257.59173020097427 Y -290.6916728263365 ZZ1 -135.86427496373074 \n\nnAgPMMA@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nnAgPMMA@cal\nX -342.21179128221985 Y -282.43170111987484 ZZ1 -106.50427566058444 \n\nsafeZZ1\nZZ1 -6.644274461633202 \n\nsafeZZ2\nZZ2 -5.000002007434219 \n\nsafeZZ3\nZZ3 -4.999998848323777 \n\nsafeZZ4\nZZ4 -4.999876571618324 \n\nnAgPMMAslide@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'initial\nX -241.20172932965255 Y -286.691662732826 ZZ1 -6.644274461633202 ZZ2 -5.000002007434219 ZZ3 -4.999998848323777 ZZ4 -4.999876571618324 \n\nnAgPMMA@mark\nX -257.59173020097427 Y -290.6916728263365 ZZ1 -135.86427496373074 \n\nnAgPMMA@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nnAgPMMA@cal\nX -342.21179128221985 Y -282.43170111987484 ZZ1 -106.50427566058444 \n\nsafeZZ1\nZZ1 -6.644274461633202 \n\nsafeZZ2\nZZ2 -5.000002007434219 \n\nsafeZZ3\nZZ3 -4.999998848323777 \n\nsafeZZ4\nZZ4 -4.999876571618324 \n\nnAgPMMAslide@start\nX -257.5916123742403 Y -290.6915925513197 ZZ1 -135.84427379778893 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['n\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', {'Measured_List': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'list of measurements'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'initial': {'X': -241.20172932965255, 'Y': -286.691662732826, 'ZZ1': -6.644274461633202, 'ZZ2': -5.000002007434219, 'ZZ3': -4.999998848323777, 'ZZ4': -4.999876571618324}, 'nAgPMMA@mark': {'X': -257.59173020097427, 'Y': -290.6916728263365, 'ZZ1': -135.86427496373074}, 'nAgPMMA@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}, 'nAgPMMA@cal': {'X': -342.21179128221985, 'Y': -282.43170111987484, 'ZZ1': -106.50427566058444}, 'safeZZ1': {'ZZ1': -6.644274461633202}, 'safeZZ2': {'ZZ2': -5.000002007434219}, 'safeZZ3': {'ZZ3': -4.999998848323777}, 'safeZZ4': {'ZZ4': -4.999876571618324}, 'nAgPMMAslide@start': {'X': -257.5916123742403, 'Y': -290.6915925513197, 'ZZ1': -135.84427379778893}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'end']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}
Error handling gui {'subject': 'target.doProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}, 'args': ['', 'User_FlexPrinter_Alignments_Align']}: 'X'
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['aeropump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}, 'args': ['camera', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}, 'args': ['gantry', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['pump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}, 'args': ['system', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['n\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'initial', 'desc': 'parameters used to generate toolpath'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': -241.20172932965255, 'Y': -286.691662732826, 'ZZ1': -6.644274461633202, 'ZZ2': -5.000002007434219, 'ZZ3': -4.999998848323777, 'ZZ4': -4.999876571618324}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to initial,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to initial,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_getPosition', {'axislist': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'end']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}
Error handling gui {'subject': 'target.doProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}, 'args': ['', 'User_FlexPrinter_Alignments_Align']}: EXECUTOR SEND FAILURE
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.clearProclist', None]}
Handled gui {'subject': 'target.clearProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.clearProclist', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'gui', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Sent gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'gui', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].Connect', 'kwargs': {}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['User is connected.\n']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['camera', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['Aerotech', 'A3200', 'motion', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['Aerotech', 'A3200', 'motion', 'sensor']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['gantry', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}, 'args': ['pump0', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['system', 'System', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['system', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}, 'args': ['aeropump0', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}, 'args': ['aeropump0', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['aeropump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}, 'args': ['camera', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}, 'args': ['gantry', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['pump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}, 'args': ['system', 'procexec']}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.importProclist', None]}
Handled gui {'subject': 'target.importProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.importProclist', None]}, 'args': ['C:/Users/jhardin/Desktop/Testing Alignments.json']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['n\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'initial', 'desc': 'parameters used to generate toolpath'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to initial,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to initial,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_getPosition', {'axislist': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}]}
Sent appa {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'value': 'No postion collected'}}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'information']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial'], 'value': {'X': 'i', 'Y': 'n', 'ZZ1': 'f', 'ZZ2': 'o', 'ZZ3': 'r', 'ZZ4': 'm'}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'nPMMA@mark', 'desc': 'parameters used to generate toolpath'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@mark']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_getPosition', {'axislist': ['X', 'Y', 'ZZ1'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}]}
Sent appa {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'value': 'No postion collected'}}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'information']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@mark'], 'value': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'nPMMA@start', 'desc': 'parameters used to generate toolpath'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@start,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@start,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_getPosition', {'axislist': ['X', 'Y', 'ZZ1'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}]}
Sent appa {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'value': 'No postion collected'}}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'information']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start'], 'value': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'nPMMA@cal', 'desc': 'parameters used to generate toolpath'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@cal,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@cal,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_getPosition', {'axislist': ['X', 'Y', 'ZZ1'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}]}
Sent appa {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'value': 'No postion collected'}}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'information']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal'], 'value': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'camera@mark', 'desc': 'parameters used to generate toolpath'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'camera@mark']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ2': ''}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to camera@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to camera@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ2'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_getPosition', {'axislist': ['X', 'Y', 'ZZ2'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}]}
Sent appa {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'value': 'No postion collected'}}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'information']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'camera@mark'], 'value': {'X': 'i', 'Y': 'n', 'ZZ2': 'f'}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 'i', 'Y': 'n', 'ZZ2': 'f'}, 'initial': {'X': 'i', 'Y': 'n', 'ZZ1': 'f', 'ZZ2': 'o', 'ZZ3': 'r', 'ZZ4': 'm'}, 'nPMMA@cal': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}, 'nPMMA@mark': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}, 'nPMMA@start': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'camera@mark\nX i Y n ZZ2 f \n\ninitial\nX i Y n ZZ1 f ZZ2 o ZZ3 r ZZ4 m \n\nnPMMA@cal\nX i Y n ZZ1 f \n\nnPMMA@mark\nX i Y n ZZ1 f \n\nnPMMA@start\nX i Y n ZZ1 f \n\nWould you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'camera@mark\nX i Y n ZZ2 f \n\ninitial\nX i Y n ZZ1 f ZZ2 o ZZ3 r ZZ4 m \n\nnPMMA@cal\nX i Y n ZZ1 f \n\nnPMMA@mark\nX i Y n ZZ1 f \n\nnPMMA@start\nX i Y n ZZ1 f \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'camera@mark\nX i Y n ZZ2 f \n\ninitial\nX i Y n ZZ1 f ZZ2 o ZZ3 r ZZ4 m \n\nnPMMA@cal\nX i Y n ZZ1 f \n\nnPMMA@mark\nX i Y n ZZ1 f \n\nnPMMA@start\nX i Y n ZZ1 f \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Which alignment would you like to redo?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Which alignment would you like to redo?', 'options': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Which alignment would you like to redo?', 'options': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.clearProclist', None]}
Handled gui {'subject': 'target.clearProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.clearProclist', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'gui', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Sent gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'gui', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].Connect', 'kwargs': {}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['User is connected.\n']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['camera', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['sensor', 'Aerotech', 'A3200', 'motion']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['sensor', 'Aerotech', 'A3200', 'motion']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['gantry', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}, 'args': ['pump0', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['system', 'System', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['system', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}, 'args': ['aeropump0', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}, 'args': ['aeropump0', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['aeropump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}, 'args': ['camera', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}, 'args': ['gantry', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['pump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}, 'args': ['system', 'procexec']}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.importProclist', None]}
Handled gui {'subject': 'target.importProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.importProclist', None]}, 'args': ['C:/Users/jhardin/Desktop/Testing Alignments.json']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['n\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'initial', 'desc': 'parameters used to generate toolpath'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to initial,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to initial,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_getPosition', {'axislist': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}]}
Sent appa {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'value': 'No postion collected'}}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'information']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial'], 'value': {'X': 'i', 'Y': 'n', 'ZZ1': 'f', 'ZZ2': 'o', 'ZZ3': 'r', 'ZZ4': 'm'}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'nPMMA@mark', 'desc': 'parameters used to generate toolpath'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@mark']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_getPosition', {'axislist': ['X', 'Y', 'ZZ1'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}]}
Sent appa {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'value': 'No postion collected'}}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'information']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@mark'], 'value': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'nPMMA@start', 'desc': 'parameters used to generate toolpath'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@start,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@start,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_getPosition', {'axislist': ['X', 'Y', 'ZZ1'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}]}
Sent appa {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'value': 'No postion collected'}}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'information']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start'], 'value': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'nPMMA@cal', 'desc': 'parameters used to generate toolpath'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@cal,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@cal,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_getPosition', {'axislist': ['X', 'Y', 'ZZ1'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}]}
Sent appa {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'value': 'No postion collected'}}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'information']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal'], 'value': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'camera@mark', 'desc': 'parameters used to generate toolpath'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'camera@mark']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ2': ''}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to camera@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to camera@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ2'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_getPosition', {'axislist': ['X', 'Y', 'ZZ2'], 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']}, 'addresstype': 'zmqNode_AppAddress'}]}
Sent appa {'subject': 'target.apparatus.setValue', 'kwargs': {'infoAddress': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'value': 'No postion collected'}}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'information']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'camera@mark'], 'value': {'X': 'i', 'Y': 'n', 'ZZ2': 'f'}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 'i', 'Y': 'n', 'ZZ2': 'f'}, 'initial': {'X': 'i', 'Y': 'n', 'ZZ1': 'f', 'ZZ2': 'o', 'ZZ3': 'r', 'ZZ4': 'm'}, 'nPMMA@cal': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}, 'nPMMA@mark': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}, 'nPMMA@start': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'camera@mark\nX i Y n ZZ2 f \n\ninitial\nX i Y n ZZ1 f ZZ2 o ZZ3 r ZZ4 m \n\nnPMMA@cal\nX i Y n ZZ1 f \n\nnPMMA@mark\nX i Y n ZZ1 f \n\nnPMMA@start\nX i Y n ZZ1 f \n\nWould you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'camera@mark\nX i Y n ZZ2 f \n\ninitial\nX i Y n ZZ1 f ZZ2 o ZZ3 r ZZ4 m \n\nnPMMA@cal\nX i Y n ZZ1 f \n\nnPMMA@mark\nX i Y n ZZ1 f \n\nnPMMA@start\nX i Y n ZZ1 f \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'camera@mark\nX i Y n ZZ2 f \n\ninitial\nX i Y n ZZ1 f ZZ2 o ZZ3 r ZZ4 m \n\nnPMMA@cal\nX i Y n ZZ1 f \n\nnPMMA@mark\nX i Y n ZZ1 f \n\nnPMMA@start\nX i Y n ZZ1 f \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['n\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', {'Measured_List': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'list of measurements'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 'i', 'Y': 'n', 'ZZ2': 'f'}, 'initial': {'X': 'i', 'Y': 'n', 'ZZ1': 'f', 'ZZ2': 'o', 'ZZ3': 'r', 'ZZ4': 'm'}, 'nPMMA@cal': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}, 'nPMMA@mark': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}, 'nPMMA@start': {'X': 'i', 'Y': 'n', 'ZZ1': 'f'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'end']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}
Error handling gui {'subject': 'target.doProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}, 'args': ['', 'User_FlexPrinter_Alignments_Align']}: unsupported operand type(s) for -: 'str' and 'str'
Handled launcher {'subject': 'close'}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.clearProclist', None]}
Handled gui {'subject': 'target.clearProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.clearProclist', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'gui', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Sent gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'gui', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].Connect', 'kwargs': {}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['User is connected.\n']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['camera', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['motion', 'sensor', 'Aerotech', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['motion', 'sensor', 'Aerotech', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['gantry', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}, 'args': ['pump0', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['system', 'System', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['system', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}, 'args': ['aeropump0', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}, 'args': ['aeropump0', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['aeropump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}, 'args': ['camera', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}, 'args': ['gantry', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['pump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}, 'args': ['system', 'procexec']}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.importProclist', None]}
Handled gui {'subject': 'target.importProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.importProclist', None]}, 'args': ['C:/Users/jhardin/Desktop/Testing Alignments.json']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['n\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'initial', 'desc': 'parameters used to generate toolpath'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to initial,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to initial,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.getSimulation', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', 'e_reply']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': "What are simulation values for ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4']?", 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': "What are simulation values for ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': "What are simulation values for ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['[0,0,0,0,0,0]\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[0,0,0,0,0,0]']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '[0,0,0,0,0,0]']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'nPMMA@mark', 'desc': 'parameters used to generate toolpath'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@mark']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.getSimulation', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', 'e_reply']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['[0,0,0]\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[0,0,0]']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '[0,0,0]']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', [0.0, 0.0, 0.0]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@mark'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'nPMMA@start', 'desc': 'parameters used to generate toolpath'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@start,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@start,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.getSimulation', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', 'e_reply']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['[0,0,0]\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[0,0,0]']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '[0,0,0]']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', [0.0, 0.0, 0.0]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'nPMMA@cal', 'desc': 'parameters used to generate toolpath'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@cal,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@cal,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.getSimulation', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', 'e_reply']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['[0,0,0]\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[0,0,0]']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '[0,0,0]']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', [0.0, 0.0, 0.0]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'camera@mark', 'desc': 'parameters used to generate toolpath'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'camera@mark']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ2': ''}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to camera@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to camera@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ2'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.getSimulation', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', 'e_reply']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': "What are simulation values for ['X', 'Y', 'ZZ2']?", 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': "What are simulation values for ['X', 'Y', 'ZZ2']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': "What are simulation values for ['X', 'Y', 'ZZ2']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['[0,0,0]\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[0,0,0]']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '[0,0,0]']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', [0.0, 0.0, 0.0]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'camera@mark'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nWould you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['n\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', {'Measured_List': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'list of measurements'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'camera', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ2'}]}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'end']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}
Handled gui {'subject': 'target.doProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}, 'args': ['', 'User_FlexPrinter_Alignments_Align']}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}
Handled gui {'subject': 'target.createProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}, 'args': ['', 'User_InkCal_Calibrate', {'material': 'PMMA', 'filename': '@information/calibrationfile'}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'material': 'PMMA', 'filename': '@information/calibrationfile'}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'material': 'PMMA', 'filename': '@information/calibrationfile'}}]]}}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', False]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Would you like to use ink calibraton for PMMA?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated'], 'value': True}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Would you like to make a new file for PMMA?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['n\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Would you like to make new measurement of PMMA?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ink calibration', 'time']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 60]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}, 'time': {'source': 'apparatus', 'address': ['information', 'ink calibration', 'time'], 'value': 60, 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['motion']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['system']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'No devices met requirments']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'nPMMA@cal'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': ['devices', 'gantry', 'nPMMA', 'axismask'], 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['Z'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the initial weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['10\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '10']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '10']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Is 10g the correct value?(y/n)', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Put slide in place and press ENTER.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Put slide in place and press ENTER.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'No devices met requirments', 'pressure']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_No devices met requirments_Set', {'pressure': None}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'end']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}
Error handling gui {'subject': 'target.doProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}, 'args': ['', 'User_InkCal_Calibrate']}: 'No devices met requirments'
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.clearProclist', None]}
Handled gui {'subject': 'target.clearProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.clearProclist', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'gui', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Sent gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'gui', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].Connect', 'kwargs': {}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['User is connected.\n']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['camera', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['Aerotech', 'motion', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['Aerotech', 'motion', 'A3200', 'sensor']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['gantry', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}, 'args': ['pump0', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['system', 'System', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['system', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}, 'args': ['aeropump0', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}, 'args': ['aeropump0', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['aeropump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}, 'args': ['camera', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}, 'args': ['gantry', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['pump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}, 'args': ['system', 'procexec']}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].Disconnect', 'kwargs': {}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['User is disconnected.\n']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'User', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'camera', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'gui', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Sent gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'gui', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].Connect', 'kwargs': {}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['User is connected.\n']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['camera', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['Aerotech', 'motion', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['Aerotech', 'motion', 'A3200', 'sensor']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['gantry', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}, 'args': ['pump0', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': ''}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['system', 'System', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['system', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}, 'args': ['aeropump0', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}, 'args': ['aeropump0', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['aeropump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}, 'args': ['camera', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}, 'args': ['gantry', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['pump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}, 'args': ['system', 'procexec']}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}
Handled gui {'subject': 'target.createProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}, 'args': ['', 'Toolpath_Generate', {'generator': 'XlineTPGen'}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen'}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen'}}]]}}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'XlineTPGen']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'desc': 'parameters used to generate toolpath'}, 'generator': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator'], 'value': 'XlineTPGen', 'desc': 'name of generator'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'startofmotion'}, {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, {'motion': {'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA', 'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}}, 'parse': 'endofmotion'}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'dataArgs': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'arguments to make parameter structure'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters', 'materialname']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'PMMA']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'system'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Run', {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, [0]]}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'desc': 'parameters used to generate toolpath'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'newfigure': {'source': 'apparatus', 'address': '', 'value': True, 'desc': 'Make a new figure?'}}]}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name'], 'value': 'Logs/1565183992image.png'}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}
Handled gui {'subject': 'target.doProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}, 'args': ['', 'Toolpath_Generate']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['aeropump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}, 'args': ['camera', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}, 'args': ['gantry', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['pump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}, 'args': ['system', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen'}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}
Handled gui {'subject': 'target.createProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}, 'args': ['', 'User_FlexPrinter_Alignments_Align', {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.insertProclistItem', None]}
Handled gui {'subject': 'target.insertProclistItem', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.insertProclistItem', None]}, 'args': [-1, '', 'User_FlexPrinter_Alignments_Align', {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}]]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.insertProclistItem', None]}
Handled gui {'subject': 'target.insertProclistItem', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.insertProclistItem', None]}, 'args': [-1, '', 'Toolpath_Generate', {'generator': 'XlineTPGen'}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen'}}]]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen'}}]]}}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'XlineTPGen']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'desc': 'parameters used to generate toolpath'}, 'generator': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator'], 'value': 'XlineTPGen', 'desc': 'name of generator'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'dataArgs': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'arguments to make parameter structure'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters', 'materialname']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'PMMA']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'system'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Run', {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, [0]]}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'angtol': 1e-07, 'disttol': 1e-12, 'length': 5, 'materialname': 'PMMA', 'materials': [{'alpha': 0.5, 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'material': 'PMMA'}, {'alpha': 1, 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'material': 'PMMAslide'}], 'tiph': 0.8}, 'desc': 'parameters used to generate toolpath'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'newfigure': {'source': 'apparatus', 'address': '', 'value': True, 'desc': 'Make a new figure?'}}]}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name'], 'value': 'Logs/1565184113image.png'}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}
Handled gui {'subject': 'target.doProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}, 'args': ['', 'Toolpath_Generate']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['aeropump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}, 'args': ['camera', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}, 'args': ['gantry', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['pump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}, 'args': ['system', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen'}}]]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['aeropump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}, 'args': ['camera', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}, 'args': ['gantry', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['pump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}, 'args': ['system', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen'}}]]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['Monkey_Eye', 'Sensor', 'procexec', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system', 'Monkey_Eye']]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system', 'Monkey_Eye']]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['aeropump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}, 'args': ['camera', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}, 'args': ['gantry', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['pump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}, 'args': ['system', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['Monkey_Eye', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen'}}]]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen'}}]]}}
Handled launcher {'subject': 'close'}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.clearProclist', None]}
Handled gui {'subject': 'target.clearProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.clearProclist', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'gui', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['Aerotech', 'A3200', 'sensor', 'motion']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['Aerotech', 'A3200', 'sensor', 'motion']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['gantry', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}, 'args': ['pump0', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': 7}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['camera', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['system', 'System', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['system', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'gui', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].Connect', 'kwargs': {}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['User is connected.\n']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}, 'args': ['aeropump0', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}, 'args': ['aeropump0', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['gantry', 'pump0', 'aeropump0', 'camera', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['gantry', 'pump0', 'aeropump0', 'camera', 'system']]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}, 'args': ['gantry', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['pump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['aeropump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}, 'args': ['camera', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}, 'args': ['system', 'procexec']}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}
Handled gui {'subject': 'target.createProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}, 'args': ['', 'User_FlexPrinter_Alignments_Align', {}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.clearProcedures', None]}
Handled gui {'subject': 'target.clearProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.clearProcedures', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['gantry', 'pump0', 'aeropump0', 'camera', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['gantry', 'pump0', 'aeropump0', 'camera', 'system']]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}, 'args': ['gantry', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['pump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['aeropump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}, 'args': ['camera', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}, 'args': ['system', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}
Handled gui {'subject': 'target.createProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}, 'args': ['', 'Camera_Capture_Image', {}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'Camera_Capture_Image', 'requirements': {}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'Camera_Capture_Image', 'requirements': {}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}
Handled gui {'subject': 'target.createProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}, 'args': ['', 'Camera_Capture_Image', {}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'Camera_Capture_Image', 'requirements': {}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'Camera_Capture_Image', 'requirements': {}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}
Handled gui {'subject': 'target.createProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}, 'args': ['', 'Camera_Capture_Image', {'file': '@information/calibrationfile'}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'Camera_Capture_Image', 'requirements': {'file': '@information/calibrationfile'}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'Camera_Capture_Image', 'requirements': {'file': '@information/calibrationfile'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.clearProcedures', None]}
Handled gui {'subject': 'target.clearProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.clearProcedures', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.removeProcedure', None]}
Handled gui {'subject': 'target.removeProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.removeProcedure', None]}, 'args': ['', 'Camera_Capture_Image']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}
Handled gui {'subject': 'target.createProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}, 'args': ['', 'User_FlexPrinter_Alignments_Align', {}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.clearProcedures', None]}
Handled gui {'subject': 'target.clearProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.clearProcedures', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}
Handled gui {'subject': 'target.createProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}, 'args': ['', 'User_FlexPrinter_Alignments_Align', {}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {}}]]}}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}
Handled gui {'subject': 'target.createProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}, 'args': ['', 'Toolpath_Generate', {}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {}}]]}}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}
Handled gui {'subject': 'target.createProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}, 'args': ['', 'Toolpath_Print', {}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {}}]]}}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}
Handled gui {'subject': 'target.createProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}, 'args': ['', 'User_InkCal_Calibrate', {}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['file']]}
Handled gui {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['file']]}, 'args': ['camera', 'Measure', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}
Handled gui {'subject': 'target.createProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}, 'args': ['camera', 'Measure', {}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {}}]]}}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.reloadProcedures', None]}
Handled gui {'subject': 'target.reloadProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.reloadProcedures', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['gantry', 'pump0', 'aeropump0', 'camera', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['gantry', 'pump0', 'aeropump0', 'camera', 'system']]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}, 'args': ['gantry', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['pump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['aeropump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}, 'args': ['camera', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}, 'args': ['system', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}
Handled gui {'subject': 'target.createProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}, 'args': ['', 'User_FlexPrinter_Alignments_Align', {'Measured_List': '@information/alignmentnames'}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {}}]]}}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}
Handled gui {'subject': 'target.createProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}, 'args': ['', 'User_FlexPrinter_Alignments_Align', {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA'}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {}}]]}}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}
Handled gui {'subject': 'target.createProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}, 'args': ['', 'User_FlexPrinter_Alignments_Align', {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {}}]]}}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}
Handled gui {'subject': 'target.createProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}, 'args': ['', 'Toolpath_Generate', {'generator': 'XlineTPGen'}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {}}]]}}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}
Handled gui {'subject': 'target.createProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}, 'args': ['', 'Toolpath_Generate', {'generator': 'XlineTPGen', 'dataArgs': ['PMMA']}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen', 'dataArgs': ['PMMA']}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen', 'dataArgs': ['PMMA']}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['gantry', 'pump0', 'aeropump0', 'camera', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['gantry', 'pump0', 'aeropump0', 'camera', 'system']]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}, 'args': ['gantry', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['pump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['aeropump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}, 'args': ['camera', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}, 'args': ['system', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen', 'dataArgs': ['PMMA']}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen', 'dataArgs': ['PMMA']}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}
Handled gui {'subject': 'target.createProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}, 'args': ['', 'Toolpath_Print', {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen', 'dataArgs': ['PMMA']}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen', 'dataArgs': ['PMMA']}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {}}]]}}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}
Handled gui {'subject': 'target.createProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}, 'args': ['', 'User_InkCal_Calibrate', {'material': 'PMMA'}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen', 'dataArgs': ['PMMA']}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'material': 'PMMA'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen', 'dataArgs': ['PMMA']}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'material': 'PMMA'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {}}]]}}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}
Handled gui {'subject': 'target.createProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}, 'args': ['', 'User_InkCal_Calibrate', {'material': 'PMMA', 'filename': '@information/calibrationfile'}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen', 'dataArgs': ['PMMA']}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'material': 'PMMA', 'filename': '@information/calibrationfile'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen', 'dataArgs': ['PMMA']}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'material': 'PMMA', 'filename': '@information/calibrationfile'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['file']]}
Handled gui {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['file']]}, 'args': ['camera', 'Measure', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}
Handled gui {'subject': 'target.createProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.createProcedure', None]}, 'args': ['camera', 'Measure', {'file': 'test.png'}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen', 'dataArgs': ['PMMA']}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'material': 'PMMA', 'filename': '@information/calibrationfile'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen', 'dataArgs': ['PMMA']}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'material': 'PMMA', 'filename': '@information/calibrationfile'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['file']]}
Handled gui {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['file']]}, 'args': ['camera', 'Measure', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.insertProclistItem', None]}
Handled gui {'subject': 'target.insertProclistItem', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.insertProclistItem', None]}, 'args': [-1, '', 'User_FlexPrinter_Alignments_Align', {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}]]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.insertProclistItem', None]}
Handled gui {'subject': 'target.insertProclistItem', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.insertProclistItem', None]}, 'args': [-1, '', 'User_InkCal_Calibrate', {'material': 'PMMA', 'filename': '@information/calibrationfile'}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'material': 'PMMA', 'filename': '@information/calibrationfile'}}]]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'material': 'PMMA', 'filename': '@information/calibrationfile'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.insertProclistItem', None]}
Handled gui {'subject': 'target.insertProclistItem', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.insertProclistItem', None]}, 'args': [-1, '', 'Toolpath_Generate', {'generator': 'XlineTPGen', 'dataArgs': ['PMMA']}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'material': 'PMMA', 'filename': '@information/calibrationfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen', 'dataArgs': ['PMMA']}}]]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'material': 'PMMA', 'filename': '@information/calibrationfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen', 'dataArgs': ['PMMA']}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.insertProclistItem', None]}
Handled gui {'subject': 'target.insertProclistItem', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.insertProclistItem', None]}, 'args': [-1, '', 'Toolpath_Print', {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'material': 'PMMA', 'filename': '@information/calibrationfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen', 'dataArgs': ['PMMA']}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}]]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'material': 'PMMA', 'filename': '@information/calibrationfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen', 'dataArgs': ['PMMA']}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['file']]}
Handled gui {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['file']]}, 'args': ['camera', 'Measure', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.insertProclistItem', None]}
Handled gui {'subject': 'target.insertProclistItem', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.insertProclistItem', None]}, 'args': [-1, 'camera', 'Measure', {'file': 'test.png'}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'material': 'PMMA', 'filename': '@information/calibrationfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen', 'dataArgs': ['PMMA']}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'material': 'PMMA', 'filename': '@information/calibrationfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen', 'dataArgs': ['PMMA']}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['file']]}
Handled gui {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['file']]}, 'args': ['camera', 'Measure', 'procexec']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {}, 'desc': 'parameters used to generate toolpath'}, 'generator': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator'], 'value': 'XlineTPGen', 'desc': 'name of generator'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': {}, 'desc': 'where to store the toolpath'}, 'dataArgs': {'source': 'apparatus', 'address': '', 'value': ['PMMA'], 'desc': 'arguments to make parameter structure'}}]}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'system'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Run', {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'desc': 'parameters used to generate toolpath'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'newfigure': {'source': 'apparatus', 'address': '', 'value': True, 'desc': 'Make a new figure?'}}]}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name'], 'value': 'Logs/1565209808image.png'}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}
Handled gui {'subject': 'target.doProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}, 'args': ['', 'Toolpath_Generate']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['gantry', 'pump0', 'aeropump0', 'camera', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['gantry', 'pump0', 'aeropump0', 'camera', 'system']]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}, 'args': ['gantry', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['pump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['aeropump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}, 'args': ['camera', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}, 'args': ['system', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen', 'dataArgs': ['PMMA']}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'material': 'PMMA', 'filename': '@information/calibrationfile'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen', 'dataArgs': ['PMMA']}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'material': 'PMMA', 'filename': '@information/calibrationfile'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'material': 'PMMA', 'filename': '@information/calibrationfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen', 'dataArgs': ['PMMA']}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'material': 'PMMA', 'filename': '@information/calibrationfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen', 'dataArgs': ['PMMA']}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.exportProclist', None]}
Handled gui {'subject': 'target.exportProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.exportProclist', None]}, 'args': ['C:/Users/jhardin/Desktop/DemoFiles/DemoProcList.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What filename?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'alignments.json', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['alignments.json\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ2 0.0 \n\nWould you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ2 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ2 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Which alignment would you like to redo?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Which alignment would you like to redo?', 'options': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Which alignment would you like to redo?', 'options': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['nPMMA@start\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'nPMMA@start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'nPMMA@start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'nPMMA@start', 'desc': 'parameters used to generate toolpath'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@start,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@start,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.getSimulation', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', 'e_reply']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['[25,25,25]\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[25,25,25]']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '[25,25,25]']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', [25.0, 25.0, 25.0]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start'], 'value': {'X': 25.0, 'Y': 25.0, 'ZZ1': 25.0}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 25.0, 'Y': 25.0, 'ZZ1': 25.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 25.0 Y 25.0 ZZ1 25.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ2 0.0 \n\nWould you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 25.0 Y 25.0 ZZ1 25.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ2 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ2 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 25.0 Y 25.0 ZZ1 25.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ2 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ2 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['n\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', {'Measured_List': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'list of measurements'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 25.0, 'Y': 25.0, 'ZZ1': 25.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ2': 0.0}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'camera', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ3'}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'end']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.doProclist', None]}
Error handling gui {'subject': 'target.doProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.doProclist', None]}}: 'ZZ3'
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['gantry', 'pump0', 'aeropump0', 'camera', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['gantry', 'pump0', 'aeropump0', 'camera', 'system']]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}, 'args': ['gantry', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['pump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['aeropump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}, 'args': ['camera', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}, 'args': ['system', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen', 'dataArgs': ['PMMA']}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'material': 'PMMA', 'filename': '@information/calibrationfile'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen', 'dataArgs': ['PMMA']}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'material': 'PMMA', 'filename': '@information/calibrationfile'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'material': 'PMMA', 'filename': '@information/calibrationfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen', 'dataArgs': ['PMMA']}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'primenoz': 'nPMMA', 'filename': '@information/alignmentsfile'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'material': 'PMMA', 'filename': '@information/calibrationfile'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'generator': 'XlineTPGen', 'dataArgs': ['PMMA']}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}}
Handled launcher {'subject': 'close'}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'gui', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['camera', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['motion', 'Aerotech', 'A3200', 'sensor']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['gantry', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}, 'args': ['pump0', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': 7}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['system', 'System', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['system', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'gui', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].Connect', 'kwargs': {}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['User is connected.\n']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}, 'args': ['aeropump0', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}, 'args': ['aeropump0', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['aeropump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}, 'args': ['camera', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}, 'args': ['gantry', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['pump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}, 'args': ['system', 'procexec']}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.importProclist', None]}
Handled gui {'subject': 'target.importProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.importProclist', None]}, 'args': ['C:/Users/jhardin/Desktop/DemoFiles/DemoProcList.json']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['n\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'initial', 'desc': 'parameters used to generate toolpath'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': '', 'ZZ2': '', 'ZZ3': '', 'ZZ4': ''}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to initial,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'Move to initial,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to initial,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.getSimulation', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', 'e_reply']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': "What are simulation values for ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4']?", 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': "What are simulation values for ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': "What are simulation values for ['X', 'Y', 'ZZ1', 'ZZ2', 'ZZ3', 'ZZ4']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['[0,0,0,0,0,0]\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[0,0,0,0,0,0]']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '[0,0,0,0,0,0]']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'nPMMA@mark', 'desc': 'parameters used to generate toolpath'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@mark']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'Move to nPMMA@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.getSimulation', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', 'e_reply']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['[0,0,0]\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[0,0,0]']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '[0,0,0]']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', [0.0, 0.0, 0.0]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@mark'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'nPMMA@start', 'desc': 'parameters used to generate toolpath'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@start,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'Move to nPMMA@start,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@start,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.getSimulation', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', 'e_reply']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['[0,0,0]\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[0,0,0]']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '[0,0,0]']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', [0.0, 0.0, 0.0]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'nPMMA@cal', 'desc': 'parameters used to generate toolpath'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ1': ''}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@cal,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'Move to nPMMA@cal,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to nPMMA@cal,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ1'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.getSimulation', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', 'e_reply']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': "What are simulation values for ['X', 'Y', 'ZZ1']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['[0,0,0]\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[0,0,0]']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '[0,0,0]']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', [0.0, 0.0, 0.0]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', {'alignmentname': {'source': 'apparatus', 'address': '', 'value': 'camera@mark', 'desc': 'parameters used to generate toolpath'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'camera@mark']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': '', 'Y': '', 'ZZ3': ''}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to camera@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'Move to camera@mark,and press ENTER when there.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Move to camera@mark,and press ENTER when there.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', {'axisList': {'source': 'apparatus', 'address': '', 'value': ['X', 'Y', 'ZZ3'], 'desc': 'Axes to get the position of'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'Aerotech_A3200_getPosition', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.getSimulation', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', 'e_reply']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getSimulation', True]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': "What are simulation values for ['X', 'Y', 'ZZ3']?", 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': "What are simulation values for ['X', 'Y', 'ZZ3']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': "What are simulation values for ['X', 'Y', 'ZZ3']?", 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['[0,0,0]\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '[0,0,0]']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '[0,0,0]']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', [0.0, 0.0, 0.0]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_getPosition', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'camera@mark'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Update', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nWould you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['n\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', {'Measured_List': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'list of measurements'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'camera', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ3'}]}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', False]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Would you like to use ink calibraton for PMMA?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated'], 'value': True}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Would you like to make a new file for PMMA?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ink calibration', 'time']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 60]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}, 'time': {'source': 'apparatus', 'address': ['information', 'ink calibration', 'time'], 'value': 60, 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['motion']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['system']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'nPMMA@cal'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': ['devices', 'gantry', 'nPMMA', 'axismask'], 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['Z'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the initial weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['10\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '10']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '10']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Is 10g the correct value?(y/n)', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Put slide in place and press ENTER.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Put slide in place and press ENTER.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pressure']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 50]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Set', {'pressure': 50}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', {'mid_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'time to allow things to settle'}, 'pumpon_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'system'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_On', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': 60}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', {'mid_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'time to allow things to settle'}, 'pumpoff_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'system'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Off', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the final weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['11\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '11']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '11']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Is 11g the correct value?(y/n)', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {}, 'desc': 'parameters used to generate toolpath'}, 'generator': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator'], 'value': 'XlineTPGen', 'desc': 'name of generator'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': {}, 'desc': 'where to store the toolpath'}, 'dataArgs': {'source': 'apparatus', 'address': '', 'value': ['PMMA'], 'desc': 'arguments to make parameter structure'}}]}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'system'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Run', {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'desc': 'parameters used to generate toolpath'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'newfigure': {'source': 'apparatus', 'address': '', 'value': True, 'desc': 'Make a new figure?'}}]}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name'], 'value': 'Logs/1565223172image.png'}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', {'toolpath': {'source': 'apparatus', 'address': '', 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'toolpath to be printed'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Start', {}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'initial'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', {'motion': {'source': 'apparatus', 'address': '', 'value': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, 'desc': 'motion to start'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': {'X': 0, 'Y': 0, 'Z': 0.8}, 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'nPMMA@start'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': ['devices', 'gantry', 'nPMMA', 'axismask'], 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['X', 'Y'], ['Z']], 'desc': 'order of operations for moving to a point'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.8}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'axismask': {'Z': 'ZZ1'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'axismask': {'Z': 'ZZ1'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'samplename']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', 'end']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.doProclist', None]}
Error handling gui {'subject': 'target.doProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.doProclist', None]}}: must be str, not NoneType
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.reloadProcedures', None]}
Handled gui {'subject': 'target.reloadProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.reloadProcedures', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['aeropump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}, 'args': ['camera', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}, 'args': ['gantry', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['pump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}, 'args': ['system', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What filename?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'alignments.json', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['alignments.json\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['n\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', {'Measured_List': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'list of measurements'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'camera', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ3'}]}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ink calibration', 'time']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 60]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}, 'time': {'source': 'apparatus', 'address': ['information', 'ink calibration', 'time'], 'value': 60, 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['motion']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['system']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'nPMMA@cal'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': ['devices', 'gantry', 'nPMMA', 'axismask'], 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['Z'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the initial weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['10\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '10']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '10']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Is 10g the correct value?(y/n)', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Put slide in place and press ENTER.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Put slide in place and press ENTER.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pressure']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 50]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Set', {'pressure': 50}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', {'mid_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'time to allow things to settle'}, 'pumpon_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'system'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_On', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': 60}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', {'mid_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'time to allow things to settle'}, 'pumpoff_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'system'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Off', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the final weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['11\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '11']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '11']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Is 11g the correct value?(y/n)', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'desc': 'parameters used to generate toolpath'}, 'generator': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator'], 'value': 'XlineTPGen', 'desc': 'name of generator'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'dataArgs': {'source': 'apparatus', 'address': '', 'value': ['PMMA'], 'desc': 'arguments to make parameter structure'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'system'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Run', {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'desc': 'parameters used to generate toolpath'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'newfigure': {'source': 'apparatus', 'address': '', 'value': True, 'desc': 'Make a new figure?'}}]}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name'], 'value': 'Logs/1565223783image.png'}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', {'toolpath': {'source': 'apparatus', 'address': '', 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'toolpath to be printed'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Start', {}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'initial'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', {'motion': {'source': 'apparatus', 'address': '', 'value': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, 'desc': 'motion to start'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': {'X': 0, 'Y': 0, 'Z': 0.8}, 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'nPMMA@start'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': ['devices', 'gantry', 'nPMMA', 'axismask'], 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['X', 'Y'], ['Z']], 'desc': 'order of operations for moving to a point'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.8}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'axismask': {'Z': 'ZZ1'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'axismask': {'Z': 'ZZ1'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'samplename']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', 'end']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.doProclist', None]}
Error handling gui {'subject': 'target.doProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.doProclist', None]}}: must be str, not NoneType
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.reloadProcedures', None]}
Handled gui {'subject': 'target.reloadProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.reloadProcedures', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['aeropump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}, 'args': ['camera', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}, 'args': ['gantry', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['pump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}, 'args': ['system', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What filename?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'alignments.json', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['alignments.json\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['n\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', {'Measured_List': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'list of measurements'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'camera', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ3'}]}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ink calibration', 'time']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 60]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}, 'time': {'source': 'apparatus', 'address': ['information', 'ink calibration', 'time'], 'value': 60, 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['motion']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['system']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'nPMMA@cal'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': ['devices', 'gantry', 'nPMMA', 'axismask'], 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['Z'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the initial weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['10\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '10']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '10']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Is 10g the correct value?(y/n)', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Put slide in place and press ENTER.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Put slide in place and press ENTER.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pressure']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 50]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Set', {'pressure': 50}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', {'mid_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'time to allow things to settle'}, 'pumpon_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'system'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_On', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': 60}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', {'mid_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'time to allow things to settle'}, 'pumpoff_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'system'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Off', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the final weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['11\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '11']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '11']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Is 11g the correct value?(y/n)', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'desc': 'parameters used to generate toolpath'}, 'generator': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator'], 'value': 'XlineTPGen', 'desc': 'name of generator'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'dataArgs': {'source': 'apparatus', 'address': '', 'value': ['PMMA'], 'desc': 'arguments to make parameter structure'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'system'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Run', {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'desc': 'parameters used to generate toolpath'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'newfigure': {'source': 'apparatus', 'address': '', 'value': True, 'desc': 'Make a new figure?'}}]}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name'], 'value': 'Logs/1565223924image.png'}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', {'toolpath': {'source': 'apparatus', 'address': '', 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'toolpath to be printed'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Start', {}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'initial'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', {'motion': {'source': 'apparatus', 'address': '', 'value': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, 'desc': 'motion to start'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': {'X': 0, 'Y': 0, 'Z': 0.8}, 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'nPMMA@start'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': ['devices', 'gantry', 'nPMMA', 'axismask'], 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['X', 'Y'], ['Z']], 'desc': 'order of operations for moving to a point'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.8}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['Aerotech', 'motion', 'sensor', 'A3200'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': True}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'axismask': {'Z': 'ZZ1'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'axismask': {'Z': 'ZZ1'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'samplename']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', 'end']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.doProclist', None]}
Error handling gui {'subject': 'target.doProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.doProclist', None]}}: must be str, not NoneType
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'gui', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['camera', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['sensor', 'motion', 'Aerotech', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['sensor', 'motion', 'Aerotech', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['gantry', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}, 'args': ['pump0', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': 7}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['system', 'System', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['system', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'gui', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].Connect', 'kwargs': {}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['User is connected.\n']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}, 'args': ['aeropump0', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}, 'args': ['aeropump0', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['aeropump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}, 'args': ['camera', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}, 'args': ['gantry', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['pump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}, 'args': ['system', 'procexec']}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.importProclist', None]}
Handled gui {'subject': 'target.importProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.importProclist', None]}, 'args': ['C:/Users/jhardin/Desktop/DemoFiles/DemoProcList.json']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What filename?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'alignments.json', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['alignments.json\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['n\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', {'Measured_List': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'list of measurements'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'camera', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ3'}]}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', False]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Would you like to use ink calibraton for PMMA?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated'], 'value': True}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Would you like to make a new file for PMMA?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['n\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Would you like to make new measurement of PMMA?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['n\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calculate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calculate', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['motion']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'do_pumpcal']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'do_speedcal']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'density']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'nPMMA', 'trace_width']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'nPMMA', 'trace_height']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pumpres_time']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calculate', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'end']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.doProclist', None]}
Error handling gui {'subject': 'target.doProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.doProclist', None]}}: unsupported operand type(s) for /: 'float' and 'NoneType'
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What filename?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'alignments.json', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['alignments.json\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['n\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', {'Measured_List': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'list of measurements'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'camera', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ3'}]}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ink calibration', 'time']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 60]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}, 'time': {'source': 'apparatus', 'address': ['information', 'ink calibration', 'time'], 'value': 60, 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['motion']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['system']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'nPMMA@cal'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': ['devices', 'gantry', 'nPMMA', 'axismask'], 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['Z'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the initial weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['aeropump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}, 'args': ['camera', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}, 'args': ['gantry', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['pump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}, 'args': ['system', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.clearProcedures', None]}
Handled gui {'subject': 'target.clearProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.clearProcedures', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.reloadProcedures', None]}
Handled gui {'subject': 'target.reloadProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.reloadProcedures', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['aeropump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}, 'args': ['camera', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}, 'args': ['gantry', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['pump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}, 'args': ['system', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.importProclist', None]}
Handled gui {'subject': 'target.importProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.importProclist', None]}, 'args': ['C:/Users/jhardin/Desktop/DemoFiles/DemoProcList.json']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'gui', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['camera', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['sensor', 'Aerotech', 'A3200', 'motion']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['sensor', 'Aerotech', 'A3200', 'motion']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['gantry', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}, 'args': ['pump0', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': 7}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['system', 'System', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['system', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'gui', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].Connect', 'kwargs': {}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['User is connected.\n']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}, 'args': ['aeropump0', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}, 'args': ['aeropump0', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['aeropump0', 'camera', 'gantry', 'pump0', 'system']]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['aeropump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}, 'args': ['camera', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}, 'args': ['gantry', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['pump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}, 'args': ['system', 'procexec']}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.importProclist', None]}
Handled gui {'subject': 'target.importProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.importProclist', None]}, 'args': ['C:/Users/jhardin/Desktop/DemoFiles/DemoProcList.json']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What filename?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'alignments.json', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['alignments.json\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['n\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', {'Measured_List': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'list of measurements'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'camera', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ3'}]}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', False]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Would you like to use ink calibraton for PMMA?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated'], 'value': True}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Would you like to make a new file for PMMA?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['n\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Would you like to make new measurement of PMMA?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Would you like to make new measurement of PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['n\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calculate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calculate', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['motion']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'do_pumpcal']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'do_speedcal']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'density']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'nPMMA', 'tracewidth']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'nPMMA', 'traceheight']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pumprestime']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 0]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calculate', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'end']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.doProclist', None]}
Error handling gui {'subject': 'target.doProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.doProclist', None]}}: unsupported operand type(s) for /: 'float' and 'NoneType'
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['file']]}
Handled gui {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['file']]}, 'args': ['camera', 'Measure', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'camera', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].Disconnect', 'kwargs': {}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['User is disconnected.\n']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'User', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ink calibration', 'time']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 60]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}, 'time': {'source': 'apparatus', 'address': ['information', 'ink calibration', 'time'], 'value': 60, 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['motion']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['system']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'nPMMA@cal'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': ['devices', 'gantry', 'nPMMA', 'axismask'], 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['Z'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the initial weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['10\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '10']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '10']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Is 10g the correct value?(y/n)', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Put slide in place and press ENTER.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Put slide in place and press ENTER.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pressure']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 50]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Set', {'pressure': 50}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', {'mid_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'time to allow things to settle'}, 'pumpon_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'system'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_On', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': 60}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', {'mid_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'time to allow things to settle'}, 'pumpoff_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'system'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Off', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the final weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['11\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '11']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '11']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Is 11g the correct value?(y/n)', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'end']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}
Handled gui {'subject': 'target.doProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}, 'args': ['', 'User_InkCal_Calibrate']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What filename?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'alignments.json', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['alignments.json\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['n\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', {'Measured_List': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'list of measurements'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'camera', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ3'}]}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ink calibration', 'time']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 60]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}, 'time': {'source': 'apparatus', 'address': ['information', 'ink calibration', 'time'], 'value': 60, 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['motion']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['system']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'nPMMA@cal'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': ['devices', 'gantry', 'nPMMA', 'axismask'], 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['Z'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the initial weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['10\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '10']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '10']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Is 10g the correct value?(y/n)', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Put slide in place and press ENTER.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['11\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '11']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '11']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pressure']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 50]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Set', {'pressure': 50}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', {'mid_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'time to allow things to settle'}, 'pumpon_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'system'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_On', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': 60}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', {'mid_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'time to allow things to settle'}, 'pumpoff_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'system'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Off', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the final weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['11\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '11']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '11']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Is 11g the correct value?(y/n)', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {}, 'desc': 'parameters used to generate toolpath'}, 'generator': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator'], 'value': 'XlineTPGen', 'desc': 'name of generator'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': {}, 'desc': 'where to store the toolpath'}, 'dataArgs': {'source': 'apparatus', 'address': '', 'value': ['PMMA'], 'desc': 'arguments to make parameter structure'}}]}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'system'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Run', {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'desc': 'parameters used to generate toolpath'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'newfigure': {'source': 'apparatus', 'address': '', 'value': True, 'desc': 'Make a new figure?'}}]}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name'], 'value': 'Logs/1565225078image.png'}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', {'toolpath': {'source': 'apparatus', 'address': '', 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'toolpath to be printed'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Start', {}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['A3200', 'Aerotech', 'sensor', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': False}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'initial'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', {'motion': {'source': 'apparatus', 'address': '', 'value': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, 'desc': 'motion to start'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['A3200', 'Aerotech', 'sensor', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': False}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': {'X': 0, 'Y': 0, 'Z': 0.8}, 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'nPMMA@start'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': ['devices', 'gantry', 'nPMMA', 'axismask'], 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['X', 'Y'], ['Z']], 'desc': 'order of operations for moving to a point'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.8}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'address': 'procexec', 'addresstype': 'zmqNode', 'camera': {'axismask': {'Z': 'ZZ3'}}, 'default': {'LookAhead': True, 'MaxAccel': 1000, 'MotionRamp': 1000, 'RelAbs': 'Abs', 'axismask': {}, 'length_units': 'mm', 'mode': 'loadrun', 'speed': 40}, 'descriptors': ['A3200', 'Aerotech', 'sensor', 'motion'], 'model': 'Flex Printer', 'nPMMA': {'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'MaxAccel': 1000, 'MotionRamp': 1000, 'axismask': {'Z': 'ZZ1'}, 'speed': 40}, 'type': 'Aerotech_A3200_FlexPrinter', 'Connected': False}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'axismask': {'Z': 'ZZ1'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'axismask': {'Z': 'ZZ1'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pressure']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 50]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Set', {'pressure': 50}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'mid_time']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pumpon_time']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', {'mid_time': {'source': 'apparatus', 'address': ['devices', 'pump0', 'mid_time'], 'value': None, 'desc': 'time to allow things to settle'}, 'pumpon_time': {'source': 'apparatus', 'address': ['devices', 'pump0', 'pumpon_time'], 'value': None, 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'system'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': None}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_On', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': None}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'end']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'speed']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelLinearMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelLinearMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': {'X': 5, 'Y': 0, 'Z': 0.8}, 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': '', 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'axismask': {'source': 'apparatus', 'address': '', 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'speed': {'source': 'apparatus', 'address': '', 'value': None, 'desc': 'order of operations for moving to a point'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelLinearMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 5.0, 'Y': 0.0, 'ZZ1': 0.8}, 'speed': None}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelLinearMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelLinearMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', {'motion': {'source': 'apparatus', 'address': '', 'value': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, 'desc': 'motion to start'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'safeZZ1']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'ZZ1': 0.0}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', 'end']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.doProclist', None]}
Error handling gui {'subject': 'target.doProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.doProclist', None]}}: EXECUTOR SEND FAILURE
Handled launcher {'subject': 'close'}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.clearProclist', None]}
Handled gui {'subject': 'target.clearProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.clearProclist', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Error handling appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}: 'gantry'
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Error handling appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}: 'pump0'
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Error handling appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}: 'aeropump0'
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Error handling appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'pump1', 'procedure': 'Disconnect', 'details': {}}]]]}: 'pump1'
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Error handling appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'aeropump1', 'procedure': 'Disconnect', 'details': {}}]]]}: 'aeropump1'
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Error handling appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}: 'system'
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.clearProclist', None]}
Handled gui {'subject': 'target.clearProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.clearProclist', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Handled launcher {'subject': 'close'}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.clearProclist', None]}
Handled gui {'subject': 'target.clearProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.clearProclist', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Handled launcher {'subject': 'close'}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.clearProclist', None]}
Handled gui {'subject': 'target.clearProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.clearProclist', None]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', []]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', []]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', []]}}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'Aerotech_A3200_getPosition', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'Toolpath_Generate', 'generator']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'ProcedureData', 'SpanningSample', 'cur_parameters', 'motionFile']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_Input', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent appa {'subject': 'target.apparatus.createAppEntry', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', 'e_reply']}, 'args': [['information', 'procedures', 'User_Consol_InputOptions', 'result']]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.createAppEntry', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.importProclist', None]}
Handled gui {'subject': 'target.importProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.importProclist', None]}, 'args': ['C:/Users/jhardin/Desktop/DemoFiles/DemoProcList.json']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'No devices met requirments']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'No devices met requirments', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y'}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'end']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}
Error handling gui {'subject': 'target.doProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}, 'args': ['', 'User_FlexPrinter_Alignments_Align']}: 'User'
Sent gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'gui', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['gantry', 'Aerotech_A3200_FlexPrinter', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['Aerotech', 'A3200', 'sensor', 'motion']]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDescriptors', ['Aerotech', 'A3200', 'sensor', 'motion']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["gantry"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["gantry"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['gantry', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'gantry', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['pump0', 'Nordson_UltimusV', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["pump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["pump0"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['COM']]}, 'args': ['pump0', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'pump0', 'procedure': 'Connect', 'details': {'COM': 7}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['aeropump0', 'Nordson_UltimusV_A3200', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDescriptors', ['pump', 'pump', 'pressure', 'Nordson', 'Ultimus', 'UltimusV', 'A3200']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}
Handled appa {'subject': 'target.executor.devicelist["aeropump0"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["aeropump0"]["Address"].getDependence', True]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['camera', 'IDS_ueye', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDescriptors', ['ueye', 'camera']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["camera"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["camera"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['camera', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'camera', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['system', 'System', 'procexec', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDescriptors', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDescriptors', ['system']]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].setSimulation', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].setSimulation', None]}, 'args': [True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}
Handled appa {'subject': 'target.executor.devicelist["system"]["Address"].getDependence', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.devicelist["system"]["Address"].getDependence', False]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', []]}, 'args': ['system', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'system', 'procedure': 'Connect', 'details': {}}]]]}
Sent gui {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', 'e_reply']}, 'args': ['User', 'User_GUI', 'gui', 'gui']}
Handled gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}
Handled appa {'subject': 'target.executor.createDevice', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.createDevice', True]}, 'args': ['User', 'User_GUI', 'procexec', 'gui']}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].Connect', 'kwargs': {}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['User is connected.\n']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'User', 'procedure': 'Connect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}
Handled appa {'subject': 'target.executor.getDependencies', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDependencies', ['pump', 'A3200']]}, 'args': ['aeropump0', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}
Handled appa {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['pumpname', 'pumpaddress', 'A3200name', 'A3200address', 'IOaxis', 'IObit']]}, 'args': ['aeropump0', 'Connect', 'procexec']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Connect', 'details': {'pumpname': 'pump0', 'pumpaddress': 'procexec', 'A3200name': 'gantry', 'A3200address': 'procexec', 'IOaxis': 'ZZ1', 'IObit': 2}}]]]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['gantry', 'pump0', 'aeropump0', 'camera', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['gantry', 'pump0', 'aeropump0', 'camera', 'system']]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}, 'args': ['gantry', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['pump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['aeropump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}, 'args': ['camera', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}, 'args': ['system', 'procexec']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What filename?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'alignments.json', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['alignments.json\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['n\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', {'Measured_List': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'list of measurements'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'camera', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ3'}]}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'end']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}
Handled gui {'subject': 'target.doProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}, 'args': ['', 'User_FlexPrinter_Alignments_Align']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', False]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Would you like to use ink calibraton for PMMA?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Would you like to use ink calibraton for PMMA?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated'], 'value': True}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Would you like to make a new file for PMMA?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Would you like to make a new file for PMMA?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ink calibration', 'time']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 60]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}, 'time': {'source': 'apparatus', 'address': ['information', 'ink calibration', 'time'], 'value': 60, 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['motion']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['system']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'nPMMA@cal'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': ['devices', 'gantry', 'nPMMA', 'axismask'], 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['Z'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the initial weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['10\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '10']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '10']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Is 10g the correct value?(y/n)', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Put slide in place and press ENTER.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Put slide in place and press ENTER.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pressure']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 10]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Set', {'pressure': 10}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', {'mid_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'time to allow things to settle'}, 'pumpon_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'system'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_On', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': 60}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', {'mid_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'time to allow things to settle'}, 'pumpoff_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'system'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Off', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the final weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['11\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '11']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '11']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Is 11g the correct value?(y/n)', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'end']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}
Handled gui {'subject': 'target.doProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}, 'args': ['', 'User_InkCal_Calibrate']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {}, 'desc': 'parameters used to generate toolpath'}, 'generator': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator'], 'value': 'XlineTPGen', 'desc': 'name of generator'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': {}, 'desc': 'where to store the toolpath'}, 'dataArgs': {'source': 'apparatus', 'address': '', 'value': ['PMMA'], 'desc': 'arguments to make parameter structure'}}]}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'system'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Run', {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'desc': 'parameters used to generate toolpath'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'newfigure': {'source': 'apparatus', 'address': '', 'value': True, 'desc': 'Make a new figure?'}}]}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name'], 'value': 'Logs/1565229214image.png'}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}
Handled gui {'subject': 'target.doProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}, 'args': ['', 'Toolpath_Generate']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['gantry', 'pump0', 'aeropump0', 'camera', 'system']]}
Handled gui {'subject': 'target.executor.getDevices', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getDevices', ['gantry', 'pump0', 'aeropump0', 'camera', 'system']]}, 'args': ['procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Move', 'Set_Motion', 'set_DO', 'Run', 'getPosition', 'getAI', 'Load', 'LogData_Start', 'LogData_Stop']]}, 'args': ['gantry', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['pump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect']]}, 'args': ['aeropump0', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Measure', 'Configure']]}, 'args': ['camera', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}
Handled gui {'subject': 'target.executor.getEprocs', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getEprocs', ['On', 'Off', 'Set', 'Connect', 'Disconnect', 'Dwell', 'Run']]}, 'args': ['system', 'procexec']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}
Handled gui {'subject': 'target.getProcedures', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProcedures', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}
Handled gui {'subject': 'target.getProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.getProclist', [{'device': '', 'procedure': 'User_FlexPrinter_Alignments_Align', 'requirements': {'Measured_List': '@information/alignmentnames', 'filename': '@information/alignmentsfile', 'primenoz': 'nPMMA'}}, {'device': '', 'procedure': 'User_InkCal_Calibrate', 'requirements': {'filename': '@information/calibrationfile', 'material': 'PMMA'}}, {'device': '', 'procedure': 'Toolpath_Generate', 'requirements': {'dataArgs': ['PMMA'], 'generator': 'XlineTPGen'}}, {'device': '', 'procedure': 'Toolpath_Print', 'requirements': {'toolpath': '@information/ProcedureData/Toolpath_Generate/toolpath'}}, {'device': 'camera', 'procedure': 'Measure', 'requirements': {'file': 'test.png'}}]]}}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', {'toolpath': {'source': 'apparatus', 'address': '', 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'toolpath to be printed'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Start', {}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'initial'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', {'motion': {'source': 'apparatus', 'address': '', 'value': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, 'desc': 'motion to start'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': {'X': 0, 'Y': 0, 'Z': 0.8}, 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'nPMMA@start'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': ['devices', 'gantry', 'nPMMA', 'axismask'], 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['X', 'Y'], ['Z']], 'desc': 'order of operations for moving to a point'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.8}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'MotionRamp']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'MaxAccel']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pressure']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 10]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Set', {'pressure': 10}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'mid_time']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 0]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pumpon_time']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 0]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', {'mid_time': {'source': 'apparatus', 'address': ['devices', 'pump0', 'mid_time'], 'value': 0, 'desc': 'time to allow things to settle'}, 'pumpon_time': {'source': 'apparatus', 'address': ['devices', 'pump0', 'pumpon_time'], 'value': 0, 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'system'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': 0}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_On', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': 0}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'end']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'speed']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelLinearMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelLinearMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': {'X': 5, 'Y': 0, 'Z': 0.8}, 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': '', 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'axismask': {'source': 'apparatus', 'address': '', 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'speed': {'source': 'apparatus', 'address': '', 'value': 40, 'desc': 'order of operations for moving to a point'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelLinearMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 5.0, 'Y': 0.0, 'ZZ1': 0.8}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelLinearMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelLinearMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', {'motion': {'source': 'apparatus', 'address': '', 'value': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, 'desc': 'motion to start'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'safeZZ1']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'ZZ1': 0.0}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'mid_time']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 0]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pumpoff_time']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 0]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', {'mid_time': {'source': 'apparatus', 'address': ['devices', 'pump0', 'mid_time'], 'value': 0, 'desc': 'time to allow things to settle'}, 'pumpoff_time': {'source': 'apparatus', 'address': ['devices', 'pump0', 'pumpoff_time'], 'value': 0, 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'system'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': 0}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Off', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': 0}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['End', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['End', {}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'initial'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['End', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['End', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['End', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', 'end']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}
Handled gui {'subject': 'target.doProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}, 'args': ['', 'Toolpath_Print']}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['file']]}
Handled gui {'subject': 'target.executor.getRequirements', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.getRequirements', ['file']]}, 'args': ['camera', 'Measure', 'procexec']}
Sent appa {'subject': 'target.apparatus.DoEproc', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.DoEproc', 'e_reply']}, 'args': ['camera', 'Measure', {'file': 'test.png'}]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'camera', 'procedure': 'Measure', 'details': {'file': 'test.png'}}]]]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.DoEproc', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}
Handled gui {'subject': 'target.doProcedure', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.doProcedure', None]}, 'args': ['camera', 'Measure']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentnames']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark']]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignmentsfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', {'Measured_List': {'source': 'apparatus', 'address': ['information', 'alignmentnames'], 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'parameters used to generate toolpath'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}, 'filename': {'source': 'apparatus', 'address': ['information', 'alignmentsfile'], 'value': 'alignments.json', 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Import alignments from file?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Import alignments from file?', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What filename?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'alignments.json', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'What filename?', 'default': 'alignments.json', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['alignments.json\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'alignments.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'n', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'camera@mark\nX 0.0 Y 0.0 ZZ3 0.0 \n\ninitial\nX 0.0 Y 0.0 ZZ1 0.0 ZZ2 0.0 ZZ3 0.0 ZZ4 0.0 \n\nnPMMA@cal\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@mark\nX 0.0 Y 0.0 ZZ1 0.0 \n\nnPMMA@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\nsafeZZ1\nZZ1 0.0 \n\nsafeZZ2\nZZ2 0.0 \n\nsafeZZ3\nZZ3 0.0 \n\nsafeZZ4\nZZ4 0.0 \n\nnPMMAslide@start\nX 0.0 Y 0.0 ZZ1 0.0 \n\ncamera@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncameraslide@start\nX 0.0 Y 0.0 ZZ3 0.0 \n\ncamera@cal\nX 0.0 Y 0.0 ZZ3 0.0 \n\nWould you like to redo any alignments?', 'options': ['y', 'n'], 'default': 'n', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['n\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', {'Measured_List': {'source': 'apparatus', 'address': '', 'value': ['initial', 'nPMMA@mark', 'nPMMA@start', 'nPMMA@cal', 'camera@mark'], 'desc': 'list of measurements'}, 'primenoz': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'prime material'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'camera', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ3'}]}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments'], 'value': {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Derive', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'camera@mark': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'initial': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'nPMMA@cal': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@mark': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'nPMMA@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'safeZZ1': {'ZZ1': 0.0}, 'safeZZ2': {'ZZ2': 0.0}, 'safeZZ3': {'ZZ3': 0.0}, 'safeZZ4': {'ZZ4': 0.0}, 'nPMMAslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'camera@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'cameraslide@start': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}, 'camera@cal': {'X': 0.0, 'Y': 0.0, 'ZZ3': 0.0}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_FlexPrinter_Alignments_Align', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'materials', 'PMMA', 'calibrated']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'calibrationfile']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'cal.json']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ink calibration', 'time']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 60]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', {'material': {'source': 'apparatus', 'address': '', 'value': 'PMMA', 'desc': 'parameters used to generate toolpath'}, 'filename': {'source': 'apparatus', 'address': ['information', 'calibrationfile'], 'value': 'cal.json', 'desc': 'name of alignmentfile'}, 'time': {'source': 'apparatus', 'address': ['information', 'ink calibration', 'time'], 'value': 60, 'desc': 'name of alignmentfile'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['motion']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['system']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@cal']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'nPMMA@cal'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': ['devices', 'gantry', 'nPMMA', 'axismask'], 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['Z'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the initial weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'What is the initial weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['10\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '10']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '10']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Is 10g the correct value?(y/n)', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Is 10g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Put slide in place and press ENTER.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'Put slide in place and press ENTER.', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'Put slide in place and press ENTER.', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pressure']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 10]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Set', {'pressure': 10}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', {'mid_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'time to allow things to settle'}, 'pumpon_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'system'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_On', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': 60}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', {'mid_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'time to allow things to settle'}, 'pumpoff_time': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'system'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Off', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': ''}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', {'message': {'source': 'apparatus', 'address': '', 'value': 'What is the final weight of the slide in grams?', 'desc': 'Message to be displayed'}, 'default': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_Input', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInput', {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInput', 'kwargs': {'message': 'What is the final weight of the slide in grams?', 'default': '', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['11\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_Input', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', '11']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', '11']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_Input', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', {'message': {'source': 'apparatus', 'address': '', 'value': 'Is 11g the correct value?(y/n)', 'desc': 'Message to be displayed'}, 'options': {'source': 'apparatus', 'address': '', 'value': ['y', 'n'], 'desc': 'Possible answers'}, 'default': {'source': 'apparatus', 'address': '', 'value': 'y', 'desc': 'default response'}, 'target': {'source': 'apparatus', 'address': '', 'value': ['information', 'procedures', 'User_Consol_InputOptions', 'result'], 'desc': 'AppAddress where the result is stored'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'consol'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'User']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'User', 'addresstype']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'zmqNode']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_User_GetInputOptions', {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].GetInputOptions', 'kwargs': {'message': 'Is 11g the correct value?(y/n)', 'options': ['y', 'n'], 'default': 'y', 'address': {'global': 'appa', 'AppAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}, 'addressType': 'zmqNode_AppAddress'}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['y\n']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'procedures', 'User_Consol_InputOptions', 'result']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'y']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_Consol_InputOptions', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Measure', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['User_InkCal_Calibrate', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'desc': 'parameters used to generate toolpath'}, 'generator': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'generator'], 'value': 'XlineTPGen', 'desc': 'name of generator'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'dataArgs': {'source': 'apparatus', 'address': '', 'value': ['PMMA'], 'desc': 'arguments to make parameter structure'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'system'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Run', {'address': 'XlineTPGen.GenerateToolpath', 'addresstype': 'pointer', 'arguments': [{'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, [0]]}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', {'parameters': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'parameters'], 'value': {'materialname': 'PMMA', 'length': 5, 'tiph': 0.8, 'disttol': 1e-12, 'angtol': 1e-07, 'Xoffset': 0, 'Yoffset': 0, 'Zoffset': 0, 'materials': [{'material': 'PMMA', 'color': 'b', 'linestyle': '-', 'linewidth': 3, 'alpha': 0.5}, {'material': 'PMMAslide', 'color': 'r', 'linestyle': ':', 'linewidth': 2, 'alpha': 1}]}, 'desc': 'parameters used to generate toolpath'}, 'target': {'source': 'apparatus', 'address': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath'], 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'where to store the toolpath'}, 'newfigure': {'source': 'apparatus', 'address': '', 'value': True, 'desc': 'Make a new figure?'}}]}
Sent appa {'subject': 'target.apparatus.setValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Plot', 'image_file_name'], 'value': 'Logs/1565229320image.png'}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.setValue', None]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Plot', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Generate', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'ProcedureData', 'Toolpath_Generate', 'toolpath']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]]]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', {'toolpath': {'source': 'apparatus', 'address': '', 'value': [[{'parse': 'start'}, {'parse': 'startofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, {'parse': 'endofmotion', 'motion': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}}, {'parse': 'end'}]], 'desc': 'toolpath to be printed'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Start', {}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'initial'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Start', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', {'motion': {'source': 'apparatus', 'address': '', 'value': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, 'desc': 'motion to start'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': {'X': 0, 'Y': 0, 'Z': 0.8}, 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'nPMMA@start'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': ['devices', 'gantry', 'nPMMA', 'axismask'], 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['X', 'Y'], ['Z']], 'desc': 'order of operations for moving to a point'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.8}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'nPMMA', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'MotionRamp']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'MaxAccel']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pressure']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 10]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Set', {'pressure': 10}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'mid_time']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 0]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pumpon_time']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 0]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', {'mid_time': {'source': 'apparatus', 'address': ['devices', 'pump0', 'mid_time'], 'value': 0, 'desc': 'time to allow things to settle'}, 'pumpon_time': {'source': 'apparatus', 'address': ['devices', 'pump0', 'pumpon_time'], 'value': 0, 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'system'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': 0}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_On', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': 0}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOn', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['StartofMotion', 'end']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'nPMMA@start']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'speed']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelLinearMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelLinearMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': {'X': 5, 'Y': 0, 'Z': 0.8}, 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': '', 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0}, 'desc': 'Point relative to reference position'}, 'axismask': {'source': 'apparatus', 'address': '', 'value': {'Z': 'ZZ1'}, 'desc': 'Dictionary of motion settings'}, 'speed': {'source': 'apparatus', 'address': '', 'value': 40, 'desc': 'order of operations for moving to a point'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelLinearMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 5.0, 'Y': 0.0, 'ZZ1': 0.8}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelLinearMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelLinearMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', {'motion': {'source': 'apparatus', 'address': '', 'value': {'startpoint': {'X': 0, 'Y': 0, 'Z': 0.8}, 'endpoint': {'X': 5, 'Y': 0, 'Z': 0.8}, 'material': 'PMMA'}, 'desc': 'motion to start'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['pump', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'pump0']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': ['nozzle', 'PMMA']}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'nPMMA']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'nPMMA', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'Z': 'ZZ1'}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'safeZZ1']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'ZZ1': 0.0}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'mid_time']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 0]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'pump0', 'pumpoff_time']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 0]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', {'mid_time': {'source': 'apparatus', 'address': ['devices', 'pump0', 'mid_time'], 'value': 0, 'desc': 'time to allow things to settle'}, 'pumpoff_time': {'source': 'apparatus', 'address': ['devices', 'pump0', 'pumpoff_time'], 'value': 0, 'desc': 'Point relative to reference position'}, 'name': {'source': 'apparatus', 'address': '', 'value': 'pump0', 'desc': 'name of the pump'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'system'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'system']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': 0}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_pump0_Off', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_system_Dwell', {'dtime': 0}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Pump_PumpOff', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['EndofMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['End', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['End', {}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', {'Type': {'source': 'apparatus', 'address': '', 'value': 'default', 'desc': 'name of the full description of A3200 movement stored under the motion devices in the apparatus'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'type': 'Aerotech_A3200_FlexPrinter', 'model': 'Flex Printer', 'descriptors': ['Aerotech', 'A3200', 'sensor', 'motion'], 'addresstype': 'zmqNode', 'address': 'procexec', 'default': {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}, 'nPMMA': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'nPMMAslide': {'speed': 40, 'MotionRamp': 1000, 'MaxAccel': 1000, 'axismask': {'Z': 'ZZ1'}}, 'camera': {'speed': 40, 'axismask': {'Z': 'ZZ3'}}, 'Connected': True}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'speed': 40, 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'RelAbs': 'Abs', 'LookAhead': True, 'mode': 'loadrun', 'axismask': {}}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'RelAbs']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'Abs']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'length_units']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'mm']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MotionRamp']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'MaxAccel']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 1000]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'LookAhead']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', True]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'axismask']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Set_Motion', {'RelAbs': 'Abs', 'length_units': 'mm', 'MotionRamp': 1000, 'MaxAccel': 1000, 'LookAhead': True, 'axismask': {}}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Aerotech_A3200_Set', 'end']}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['information', 'alignments', 'initial']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}]}
Sent appa {'subject': 'target.apparatus.getValue', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 'e_reply']}, 'kwargs': {'infoAddress': ['devices', 'gantry', 'default', 'speed']}}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.getValue', 40]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', {'relpoint': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Reference point'}, 'refpoint': {'source': 'apparatus', 'address': ['information', 'alignments', 'initial'], 'value': {'X': 0.0, 'Y': 0.0, 'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'desc': 'Point relative to reference position'}, 'speed': {'source': 'apparatus', 'address': ['devices', 'gantry', 'default', 'speed'], 'value': 40, 'desc': 'Target speed, typicalling in mm/s'}, 'axismask': {'source': 'apparatus', 'address': '', 'value': '', 'desc': 'Dictionary of motion settings'}, 'priority': {'source': 'apparatus', 'address': '', 'value': [['ZZ1', 'ZZ2', 'ZZ3', 'ZZ4'], ['X', 'Y']], 'desc': 'order of operations for moving to a point'}}]}
Sent appa {'subject': 'target.apparatus.findDevice', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'e_reply']}, 'args': [{'descriptors': 'motion'}]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.findDevice', 'gantry']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'ZZ1': 0.0, 'ZZ2': 0.0, 'ZZ3': 0.0, 'ZZ4': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Move', {'point': {'X': 0.0, 'Y': 0.0}, 'speed': 40}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Motion_RefRelPriorityLineMotion', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['End', 'start']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['eproc_gantry_Run', {}]}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['End', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['End', 'end']}
Sent appa {'subject': 'target.apparatus.LogProc', 'args': ['Toolpath_Print', 'end']}
Sent appa {'subject': 'target.apparatus.DoEproc', 'ereply': {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.DoEproc', 'e_reply']}, 'args': ['camera', 'Measure', {'file': 'test.png'}]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'camera', 'procedure': 'Measure', 'details': {'file': 'test.png'}}]]]}
Handled appa {'subject': 'target.apparatus.recv_value', 'args': ['target.apparatus.DoEproc', None]}
Sent gui {'subject': 'target.executor.recv_value', 'args': ['target.doProclist', None]}
Handled gui {'subject': 'target.doProclist', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.doProclist', None]}}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'gantry', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'pump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'aeropump0', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'camera', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'system', 'procedure': 'Disconnect', 'details': {}}]]]}
Sent gui {'subject': 'target.executor.devicelist["User"]["Address"].Disconnect', 'kwargs': {}, 'ereply': {'subject': 'target.executor.logResponse', 'args': ['e_reply']}}
Handled gui {'subject': 'target.executor.logResponse', 'args': ['User is disconnected.\n']}
Sent appa {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}
Handled appa {'subject': 'target.executor.execute', 'ereply': {'subject': 'target.executor.recv_value', 'args': ['target.executor.execute', None]}, 'args': [[[{'devices': 'User', 'procedure': 'Disconnect', 'details': {}}]]]}
Handled launcher {'subject': 'close'}
